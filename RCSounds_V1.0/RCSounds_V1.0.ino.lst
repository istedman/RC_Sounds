
C:\Users\Ian\AppData\Local\Temp\arduino_build_381453/RCSounds_V1.0.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	1f c0       	rjmp	.+62     	; 0x40 <__dtors_end>
       2:	43 c0       	rjmp	.+134    	; 0x8a <__bad_interrupt>
       4:	58 c5       	rjmp	.+2736   	; 0xab6 <__vector_2>
       6:	41 c0       	rjmp	.+130    	; 0x8a <__bad_interrupt>
       8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
       a:	0b c5       	rjmp	.+2582   	; 0xa22 <__vector_5>
       c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
       e:	b9 c4       	rjmp	.+2418   	; 0x982 <__vector_7>
      10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
      12:	3b c0       	rjmp	.+118    	; 0x8a <__bad_interrupt>
      14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
      16:	39 c0       	rjmp	.+114    	; 0x8a <__bad_interrupt>
      18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
      1a:	37 c0       	rjmp	.+110    	; 0x8a <__bad_interrupt>
      1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>

0000001e <__trampolines_end>:
__trampolines_start():
      1e:	00 00       	nop
      20:	00 00       	nop
      22:	37 00       	.word	0x0037	; ????

00000024 <digital_pin_to_timer_PGM>:
      24:	01 03 00 00 04 00                                   ......

0000002a <port_to_output_PGM>:
      2a:	00 00 00 00 38 00                                   ....8.

00000030 <digital_pin_to_port_PGM>:
      30:	02 02 02 02 02 02                                   ......

00000036 <digital_pin_to_bit_mask_PGM>:
      36:	01 02 04 08 10 20                                   ..... 

0000003c <__ctors_start>:
__ctors_start():
      3c:	18 06       	cpc	r1, r24

0000003e <__ctors_end>:
__dtors_start():
      3e:	44 0a       	sbc	r4, r20

00000040 <__dtors_end>:
__dtors_end():
      40:	11 24       	eor	r1, r1
      42:	1f be       	out	0x3f, r1	; 63
      44:	cf e5       	ldi	r28, 0x5F	; 95
      46:	d2 e0       	ldi	r29, 0x02	; 2
      48:	de bf       	out	0x3e, r29	; 62
      4a:	cd bf       	out	0x3d, r28	; 61

0000004c <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      4c:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      4e:	aa e2       	ldi	r26, 0x2A	; 42
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      50:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      56:	a7 30       	cpi	r26, 0x07	; 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      58:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>

0000005c <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      5c:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      5e:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      60:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      62:	ea e2       	ldi	r30, 0x2A	; 42
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      64:	f9 e1       	ldi	r31, 0x19	; 25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      66:	02 c0       	rjmp	.+4      	; 0x6c <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      68:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      6a:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      6c:	aa 32       	cpi	r26, 0x2A	; 42
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      6e:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      70:	d9 f7       	brne	.-10     	; 0x68 <__do_copy_data+0xc>

00000072 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      72:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      74:	cf e1       	ldi	r28, 0x1F	; 31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      76:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      78:	03 c0       	rjmp	.+6      	; 0x80 <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      7a:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      7c:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      7e:	43 dc       	rcall	.-1914   	; 0xfffff906 <__eeprom_end+0xff7ef906>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      80:	ce 31       	cpi	r28, 0x1E	; 30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      82:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      84:	d1 f7       	brne	.-12     	; 0x7a <__do_global_ctors+0x8>
      86:	69 d6       	rcall	.+3282   	; 0xd5a <main>
      88:	44 cc       	rjmp	.-1912   	; 0xfffff912 <__eeprom_end+0xff7ef912>

0000008a <__bad_interrupt>:
__vector_1():
      8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <DFPlayerMini_Fast::findChecksum(DFPlayerMini_Fast::stack&) [clone .constprop.30]>:
findChecksum():
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:890
			   to calculate the checksum over.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::findChecksum(stack& _stack)
{
	uint16_t checksum = (~(_stack.version + _stack.length + _stack.commandValue + _stack.feedbackValue + _stack.paramMSB + _stack.paramLSB)) + 1;
      8c:	ee eb       	ldi	r30, 0xBE	; 190
      8e:	f1 e0       	ldi	r31, 0x01	; 1
      90:	83 81       	ldd	r24, Z+3	; 0x03
      92:	94 81       	ldd	r25, Z+4	; 0x04
      94:	89 0f       	add	r24, r25
      96:	99 27       	eor	r25, r25
      98:	99 1f       	adc	r25, r25
      9a:	25 81       	ldd	r18, Z+5	; 0x05
      9c:	82 0f       	add	r24, r18
      9e:	91 1d       	adc	r25, r1
      a0:	26 81       	ldd	r18, Z+6	; 0x06
      a2:	28 0f       	add	r18, r24
      a4:	39 2f       	mov	r19, r25
      a6:	31 1d       	adc	r19, r1
      a8:	87 81       	ldd	r24, Z+7	; 0x07
      aa:	28 0f       	add	r18, r24
      ac:	31 1d       	adc	r19, r1
      ae:	80 85       	ldd	r24, Z+8	; 0x08
      b0:	82 0f       	add	r24, r18
      b2:	93 2f       	mov	r25, r19
      b4:	91 1d       	adc	r25, r1
      b6:	91 95       	neg	r25
      b8:	81 95       	neg	r24
      ba:	91 09       	sbc	r25, r1
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:892

	_stack.checksumMSB = checksum >> 8;
      bc:	91 87       	std	Z+9, r25	; 0x09
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:893
	_stack.checksumLSB = checksum & 0xFF;
      be:	82 87       	std	Z+10, r24	; 0x0a
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:894
}
      c0:	08 95       	ret

000000c2 <analogRead.constprop.19>:
analogRead():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_analog.c:72
  #ifndef ADCSRA
  return digitalRead(analogInputToDigitalPin(pin)) ? 1023 : 0; //No ADC, so read as a digital pin instead.
  #endif

  #if defined(ADMUX)
  ADMUX = ((analog_reference & ADMUX_REFS_MASK) << REFS0) | ((pin & ADMUX_MUX_MASK) << MUX0); //select the channel and reference
      c2:	17 b8       	out	0x07, r1	; 7
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_analog.c:74
  #if defined(REFS2)
  ADMUX |= (((analog_reference & 0x04) >> 2) << REFS2); //some have an extra reference bit in a weird position.
      c4:	87 b1       	in	r24, 0x07	; 7
      c6:	87 b9       	out	0x07, r24	; 7
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_analog.c:79
  #endif
  #endif

  #if defined(HAVE_ADC) && HAVE_ADC
  sbi(ADCSRA, ADSC); //Start conversion
      c8:	36 9a       	sbi	0x06, 6	; 6
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_analog.c:81

  while(ADCSRA & (1<<ADSC)); //Wait for conversion to complete.
      ca:	36 99       	sbic	0x06, 6	; 6
      cc:	fe cf       	rjmp	.-4      	; 0xca <analogRead.constprop.19+0x8>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_analog.c:83

  uint8_t low = ADCL;
      ce:	84 b1       	in	r24, 0x04	; 4
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_analog.c:84
  uint8_t high = ADCH;
      d0:	95 b1       	in	r25, 0x05	; 5
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_analog.c:89
  return (high << 8) | low;
  #else
  return LOW;
  #endif
}
      d2:	08 95       	ret

000000d4 <TinySoftwareSerial::flush()>:
flush():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:242
}

void TinySoftwareSerial::flush()
{

}
      d4:	08 95       	ret

000000d6 <TinySoftwareSerial::write(unsigned char)>:
write():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:202
  }
}

size_t TinySoftwareSerial::write(uint8_t ch)
{
  uint8_t oldSREG = SREG;
      d6:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:203
  cli(); //Prevent interrupts from breaking the transmission. Note: TinySoftwareSerial is half duplex.
      d8:	f8 94       	cli
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:234
      [uartMask] "r" (_txmask),
      [uartUnmask] "r" (_txunmask)
    : "r23",
      "r24",
      "r25"
  );
      da:	fc 01       	movw	r30, r24
      dc:	45 85       	ldd	r20, Z+13	; 0x0d
      de:	56 85       	ldd	r21, Z+14	; 0x0e
      e0:	3a e0       	ldi	r19, 0x0A	; 10
      e2:	60 95       	com	r22
      e4:	08 94       	sec
      e6:	20 f4       	brcc	.+8      	; 0xf0 <TinySoftwareSerial::write(unsigned char)+0x1a>
      e8:	78 b3       	in	r23, 0x18	; 24
      ea:	75 23       	and	r23, r21
      ec:	78 bb       	out	0x18, r23	; 24
      ee:	04 c0       	rjmp	.+8      	; 0xf8 <TinySoftwareSerial::write(unsigned char)+0x22>
      f0:	78 b3       	in	r23, 0x18	; 24
      f2:	74 2b       	or	r23, r20
      f4:	78 bb       	out	0x18, r23	; 24
      f6:	00 00       	nop
      f8:	8e d4       	rcall	.+2332   	; 0xa16 <uartDelay>
      fa:	8d d4       	rcall	.+2330   	; 0xa16 <uartDelay>
      fc:	8c d4       	rcall	.+2328   	; 0xa16 <uartDelay>
      fe:	8b d4       	rcall	.+2326   	; 0xa16 <uartDelay>
     100:	66 95       	lsr	r22
     102:	3a 95       	dec	r19
     104:	81 f7       	brne	.-32     	; 0xe6 <TinySoftwareSerial::write(unsigned char)+0x10>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:235
  SREG = oldSREG;
     106:	2f bf       	out	0x3f, r18	; 63
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:237
  return 1;
}
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	08 95       	ret

0000010e <TinySoftwareSerial::read()>:
read():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:191
}

int TinySoftwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     10e:	dc 01       	movw	r26, r24
     110:	1f 96       	adiw	r26, 0x0f	; 15
     112:	ed 91       	ld	r30, X+
     114:	fc 91       	ld	r31, X
     116:	20 a1       	ldd	r18, Z+32	; 0x20
     118:	31 a1       	ldd	r19, Z+33	; 0x21
     11a:	82 a1       	ldd	r24, Z+34	; 0x22
     11c:	93 a1       	ldd	r25, Z+35	; 0x23
     11e:	28 17       	cp	r18, r24
     120:	39 07       	cpc	r19, r25
     122:	79 f0       	breq	.+30     	; 0x142 <TinySoftwareSerial::read()+0x34>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:194
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     124:	a2 a1       	ldd	r26, Z+34	; 0x22
     126:	b3 a1       	ldd	r27, Z+35	; 0x23
     128:	ae 0f       	add	r26, r30
     12a:	bf 1f       	adc	r27, r31
     12c:	8c 91       	ld	r24, X
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:195
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     12e:	22 a1       	ldd	r18, Z+34	; 0x22
     130:	33 a1       	ldd	r19, Z+35	; 0x23
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	2f 71       	andi	r18, 0x1F	; 31
     138:	33 27       	eor	r19, r19
     13a:	33 a3       	std	Z+35, r19	; 0x23
     13c:	22 a3       	std	Z+34, r18	; 0x22
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:196
    return c;
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	08 95       	ret
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:192

int TinySoftwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     142:	8f ef       	ldi	r24, 0xFF	; 255
     144:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:198
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
     146:	08 95       	ret

00000148 <TinySoftwareSerial::peek()>:
peek():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:181
  }
}

int TinySoftwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     148:	dc 01       	movw	r26, r24
     14a:	1f 96       	adiw	r26, 0x0f	; 15
     14c:	ed 91       	ld	r30, X+
     14e:	fc 91       	ld	r31, X
     150:	20 a1       	ldd	r18, Z+32	; 0x20
     152:	31 a1       	ldd	r19, Z+33	; 0x21
     154:	82 a1       	ldd	r24, Z+34	; 0x22
     156:	93 a1       	ldd	r25, Z+35	; 0x23
     158:	28 17       	cp	r18, r24
     15a:	39 07       	cpc	r19, r25
     15c:	39 f0       	breq	.+14     	; 0x16c <TinySoftwareSerial::peek()+0x24>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:184
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     15e:	82 a1       	ldd	r24, Z+34	; 0x22
     160:	93 a1       	ldd	r25, Z+35	; 0x23
     162:	e8 0f       	add	r30, r24
     164:	f9 1f       	adc	r31, r25
     166:	80 81       	ld	r24, Z
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	08 95       	ret
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:182
}

int TinySoftwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:186
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     170:	08 95       	ret

00000172 <TinySoftwareSerial::available()>:
available():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:162
  _rx_buffer->head = _rx_buffer->tail;
}

int TinySoftwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     172:	dc 01       	movw	r26, r24
     174:	1f 96       	adiw	r26, 0x0f	; 15
     176:	ed 91       	ld	r30, X+
     178:	fc 91       	ld	r31, X
     17a:	80 a1       	ldd	r24, Z+32	; 0x20
     17c:	91 a1       	ldd	r25, Z+33	; 0x21
     17e:	22 a1       	ldd	r18, Z+34	; 0x22
     180:	33 a1       	ldd	r19, Z+35	; 0x23
     182:	82 1b       	sub	r24, r18
     184:	93 0b       	sbc	r25, r19
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:163
}
     186:	8f 71       	andi	r24, 0x1F	; 31
     188:	99 27       	eor	r25, r25
     18a:	08 95       	ret

0000018c <Print::print(char)>:
print():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:58
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     18c:	dc 01       	movw	r26, r24
     18e:	ed 91       	ld	r30, X+
     190:	fc 91       	ld	r31, X
     192:	01 90       	ld	r0, Z+
     194:	f0 81       	ld	r31, Z
     196:	e0 2d       	mov	r30, r0
     198:	09 94       	ijmp

0000019a <Print::println()>:
println():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:120
  }
  return( n );
}

size_t Print::println(void)
{
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	ec 01       	movw	r28, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:121
  size_t n = print('\r');
     1a4:	6d e0       	ldi	r22, 0x0D	; 13
     1a6:	f2 df       	rcall	.-28     	; 0x18c <Print::print(char)>
     1a8:	8c 01       	movw	r16, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:122
  n += print('\n');
     1aa:	6a e0       	ldi	r22, 0x0A	; 10
     1ac:	ce 01       	movw	r24, r28
     1ae:	ee df       	rcall	.-36     	; 0x18c <Print::print(char)>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:124
  return n;
}
     1b0:	80 0f       	add	r24, r16
     1b2:	91 1f       	adc	r25, r17
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	08 95       	ret

000001be <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:34

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     1be:	cf 92       	push	r12
     1c0:	df 92       	push	r13
     1c2:	ef 92       	push	r14
     1c4:	ff 92       	push	r15
     1c6:	0f 93       	push	r16
     1c8:	1f 93       	push	r17
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	6c 01       	movw	r12, r24
     1d0:	eb 01       	movw	r28, r22
     1d2:	7b 01       	movw	r14, r22
     1d4:	e4 0e       	add	r14, r20
     1d6:	f5 1e       	adc	r15, r21
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:35
  size_t n = 0;
     1d8:	10 e0       	ldi	r17, 0x00	; 0
     1da:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:36
  while (size--) {
     1dc:	ce 15       	cp	r28, r14
     1de:	df 05       	cpc	r29, r15
     1e0:	61 f0       	breq	.+24     	; 0x1fa <Print::write(unsigned char const*, unsigned int)+0x3c>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:37
    n += write(*buffer++);
     1e2:	69 91       	ld	r22, Y+
     1e4:	d6 01       	movw	r26, r12
     1e6:	ed 91       	ld	r30, X+
     1e8:	fc 91       	ld	r31, X
     1ea:	01 90       	ld	r0, Z+
     1ec:	f0 81       	ld	r31, Z
     1ee:	e0 2d       	mov	r30, r0
     1f0:	c6 01       	movw	r24, r12
     1f2:	09 95       	icall
     1f4:	08 0f       	add	r16, r24
     1f6:	19 1f       	adc	r17, r25
     1f8:	f1 cf       	rjmp	.-30     	; 0x1dc <Print::write(unsigned char const*, unsigned int)+0x1e>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:40
  }
  return n;
}
     1fa:	c8 01       	movw	r24, r16
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	1f 91       	pop	r17
     202:	0f 91       	pop	r16
     204:	ff 90       	pop	r15
     206:	ef 90       	pop	r14
     208:	df 90       	pop	r13
     20a:	cf 90       	pop	r12
     20c:	08 95       	ret

0000020e <micros>:
micros():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:360
    unsigned int r; // needed for some frequencies, optimized away otherwise
    unsigned char f; // temporary storage for millis fraction counter
    unsigned char q = 0; // record whether an overflow is flagged
#endif
    unsigned long m;
    uint8_t t, oldSREG = SREG;
     20e:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:362

    cli();
     210:	f8 94       	cli
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:367
#ifdef CORRECT_EXACT_MICROS
    m = millis_timer_millis;
    f = millis_timer_fract;
#else
    m = millis_timer_overflow_count;
     212:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <millis_timer_overflow_count>
     216:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <millis_timer_overflow_count+0x1>
     21a:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <millis_timer_overflow_count+0x2>
     21e:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <millis_timer_overflow_count+0x3>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:370
#endif
  #if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
    t = TCNT0;
     222:	22 b7       	in	r18, 0x32	; 50
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:389
      m++;
    #else
      q = 1;
    #endif
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR & _BV(TOV0)) && (t < 255))
     224:	08 b6       	in	r0, 0x38	; 56
     226:	01 fe       	sbrs	r0, 1
     228:	05 c0       	rjmp	.+10     	; 0x234 <micros+0x26>
     22a:	2f 3f       	cpi	r18, 0xFF	; 255
     22c:	19 f0       	breq	.+6      	; 0x234 <micros+0x26>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:391
    #ifndef CORRECT_EXACT_MICROS
      m++;
     22e:	01 96       	adiw	r24, 0x01	; 1
     230:	a1 1d       	adc	r26, r1
     232:	b1 1d       	adc	r27, r1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:411
    #else
      q = 1;
    #endif
  #endif

    SREG = oldSREG;
     234:	3f bf       	out	0x3f, r19	; 63
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:453
  #else
  #if F_CPU < 1000000L
    return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
  #else
    #if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 && (F_CPU % 1000000 == 0 )) // Can we just do it the naive way? If so great!
      return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
     236:	ba 2f       	mov	r27, r26
     238:	a9 2f       	mov	r26, r25
     23a:	98 2f       	mov	r25, r24
     23c:	88 27       	eor	r24, r24
     23e:	bc 01       	movw	r22, r24
     240:	cd 01       	movw	r24, r26
     242:	62 0f       	add	r22, r18
     244:	71 1d       	adc	r23, r1
     246:	81 1d       	adc	r24, r1
     248:	91 1d       	adc	r25, r1
     24a:	42 e0       	ldi	r20, 0x02	; 2
     24c:	66 0f       	add	r22, r22
     24e:	77 1f       	adc	r23, r23
     250:	88 1f       	adc	r24, r24
     252:	99 1f       	adc	r25, r25
     254:	4a 95       	dec	r20
     256:	d1 f7       	brne	.-12     	; 0x24c <micros+0x3e>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:508
      //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
      return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
    #endif
  #endif
  #endif // !CORRECT_EXACT_MICROS
  }
     258:	08 95       	ret

0000025a <delay>:
delay():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:516
    // Empty
  }
  void yield(void) __attribute__ ((weak, alias("__empty")));

  void delay(unsigned long ms)
  {
     25a:	cf 92       	push	r12
     25c:	df 92       	push	r13
     25e:	ef 92       	push	r14
     260:	ff 92       	push	r15
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	6b 01       	movw	r12, r22
     268:	7c 01       	movw	r14, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:518
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();
     26a:	d1 df       	rcall	.-94     	; 0x20e <micros>
     26c:	eb 01       	movw	r28, r22
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:522

    while (ms > 0) {
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
     26e:	cf df       	rcall	.-98     	; 0x20e <micros>
     270:	6c 1b       	sub	r22, r28
     272:	7d 0b       	sbc	r23, r29
     274:	68 3e       	cpi	r22, 0xE8	; 232
     276:	73 40       	sbci	r23, 0x03	; 3
     278:	a0 f0       	brcs	.+40     	; 0x2a2 <__stack+0x43>
     27a:	c1 14       	cp	r12, r1
     27c:	d1 04       	cpc	r13, r1
     27e:	e1 04       	cpc	r14, r1
     280:	f1 04       	cpc	r15, r1
     282:	39 f4       	brne	.+14     	; 0x292 <__stack+0x33>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:532
    #else
    uint32_t start = millis();
    while((millis() - start) < ms)  /* NOP */yield();
    return;
    #endif
  }
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	df 90       	pop	r13
     28e:	cf 90       	pop	r12
     290:	08 95       	ret
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:523
    uint16_t start = (uint16_t)micros();

    while (ms > 0) {
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
        ms--;
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	c8 1a       	sub	r12, r24
     296:	d1 08       	sbc	r13, r1
     298:	e1 08       	sbc	r14, r1
     29a:	f1 08       	sbc	r15, r1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:524
        start += 1000;
     29c:	c8 51       	subi	r28, 0x18	; 24
     29e:	dc 4f       	sbci	r29, 0xFC	; 252
     2a0:	e6 cf       	rjmp	.-52     	; 0x26e <__stack+0xf>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:520
  void delay(unsigned long ms)
  {
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();

    while (ms > 0) {
     2a2:	c1 14       	cp	r12, r1
     2a4:	d1 04       	cpc	r13, r1
     2a6:	e1 04       	cpc	r14, r1
     2a8:	f1 04       	cpc	r15, r1
     2aa:	09 f7       	brne	.-62     	; 0x26e <__stack+0xf>
     2ac:	eb cf       	rjmp	.-42     	; 0x284 <__stack+0x25>

000002ae <AvgADCRead(unsigned char) [clone .constprop.18]>:
AvgADCRead():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:180
/*
 * Function to take 4 readings from the specified ADC channel, average them, conver to a voltage
 * and return it to the calling function.
 */

float AvgADCRead(unsigned char ADCInput)
     2ae:	1f 93       	push	r17
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	14 e0       	ldi	r17, 0x04	; 4
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:182
{
  unsigned int AvgADC=0;
     2b6:	d0 e0       	ldi	r29, 0x00	; 0
     2b8:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:188
  unsigned char loopCNT=0;
  float AvgADCVal=0.0;
  
  for(loopCNT=0;loopCNT<4;loopCNT++)
  {
    AvgADC=AvgADC+analogRead(ADCInput);
     2ba:	03 df       	rcall	.-506    	; 0xc2 <analogRead.constprop.19>
     2bc:	c8 0f       	add	r28, r24
     2be:	d9 1f       	adc	r29, r25
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:189
    delay(2);   // ADC settle time
     2c0:	62 e0       	ldi	r22, 0x02	; 2
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	c8 df       	rcall	.-112    	; 0x25a <delay>
     2ca:	11 50       	subi	r17, 0x01	; 1
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:186
{
  unsigned int AvgADC=0;
  unsigned char loopCNT=0;
  float AvgADCVal=0.0;
  
  for(loopCNT=0;loopCNT<4;loopCNT++)
     2cc:	b1 f7       	brne	.-20     	; 0x2ba <AvgADCRead(unsigned char) [clone .constprop.18]+0xc>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:191
  {
    AvgADC=AvgADC+analogRead(ADCInput);
    delay(2);   // ADC settle time
  }
  AvgADCVal= (float)((AvgADC*4.88E-3)/4);   // Calculate average of 4 readings
     2ce:	be 01       	movw	r22, r28
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	f9 d8       	rcall	.-3598   	; 0xfffff4c8 <__eeprom_end+0xff7ef4c8>
     2d6:	28 e6       	ldi	r18, 0x68	; 104
     2d8:	38 ee       	ldi	r19, 0xE8	; 232
     2da:	4f e9       	ldi	r20, 0x9F	; 159
     2dc:	5b e3       	ldi	r21, 0x3B	; 59
     2de:	55 d9       	rcall	.-3414   	; 0xfffff58a <__eeprom_end+0xff7ef58a>
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	40 e8       	ldi	r20, 0x80	; 128
     2e6:	5e e3       	ldi	r21, 0x3E	; 62
     2e8:	50 d9       	rcall	.-3424   	; 0xfffff58a <__eeprom_end+0xff7ef58a>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:193
  return(AvgADCVal);
}
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	1f 91       	pop	r17
     2f0:	08 95       	ret

000002f2 <SoftwareSerial::peek()>:
peek():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:481
  SREG = oldSREG;
}

int SoftwareSerial::peek()
{
  if (!isListening())
     2f2:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <SoftwareSerial::active_object>
     2f6:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <SoftwareSerial::active_object+0x1>
     2fa:	28 17       	cp	r18, r24
     2fc:	39 07       	cpc	r19, r25
     2fe:	81 f4       	brne	.+32     	; 0x320 <SoftwareSerial::peek()+0x2e>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:485
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     300:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <SoftwareSerial::_receive_buffer_head>
     304:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <SoftwareSerial::_receive_buffer_tail>
     308:	98 17       	cp	r25, r24
     30a:	51 f0       	breq	.+20     	; 0x320 <SoftwareSerial::peek()+0x2e>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:489
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     30c:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <SoftwareSerial::_receive_buffer_head>
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	e6 5d       	subi	r30, 0xD6	; 214
     314:	fe 4f       	sbci	r31, 0xFE	; 254
     316:	80 81       	ld	r24, Z
     318:	08 2e       	mov	r0, r24
     31a:	00 0c       	add	r0, r0
     31c:	99 0b       	sbc	r25, r25
     31e:	08 95       	ret
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:482
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
     320:	8f ef       	ldi	r24, 0xFF	; 255
     322:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:490
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
     324:	08 95       	ret

00000326 <SoftwareSerial::flush()>:
flush():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:470
  return 1;
}

void SoftwareSerial::flush()
{
  if (!isListening())
     326:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <SoftwareSerial::active_object>
     32a:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <SoftwareSerial::active_object+0x1>
     32e:	28 17       	cp	r18, r24
     330:	39 07       	cpc	r19, r25
     332:	39 f4       	brne	.+14     	; 0x342 <SoftwareSerial::flush()+0x1c>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:473
    return;

  uint8_t oldSREG = SREG;
     334:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:474
  cli();
     336:	f8 94       	cli
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:475
  _receive_buffer_head = _receive_buffer_tail = 0;
     338:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <SoftwareSerial::_receive_buffer_tail>
     33c:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <SoftwareSerial::_receive_buffer_head>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:476
  SREG = oldSREG;
     340:	8f bf       	out	0x3f, r24	; 63
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:477
}
     342:	08 95       	ret

00000344 <SoftwareSerial::write(unsigned char)>:
write():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:414

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
     344:	ef 92       	push	r14
     346:	ff 92       	push	r15
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	dc 01       	movw	r26, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:415
  if (_tx_delay == 0) {
     352:	5c 96       	adiw	r26, 0x1c	; 28
     354:	ed 90       	ld	r14, X+
     356:	fc 90       	ld	r15, X
     358:	5d 97       	sbiw	r26, 0x1d	; 29
     35a:	e1 14       	cp	r14, r1
     35c:	f1 04       	cpc	r15, r1
     35e:	79 f4       	brne	.+30     	; 0x37e <SoftwareSerial::write(unsigned char)+0x3a>
_ZN5Print13setWriteErrorEi():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.h:73
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	13 96       	adiw	r26, 0x03	; 3
     366:	9c 93       	st	X, r25
     368:	8e 93       	st	-X, r24
     36a:	12 97       	sbiw	r26, 0x02	; 2
write():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:417
    setWriteError();
    return 0;
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:466

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);

  return 1;
}
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	08 95       	ret
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:424

  // By declaring these as local variables, the compiler will put them
  // in registers _before_ disabling interrupts and entering the
  // critical timing sections below, which makes it a lot easier to
  // verify the cycle timings
  volatile uint8_t *reg = _transmitPortRegister;
     37e:	51 96       	adiw	r26, 0x11	; 17
     380:	ed 91       	ld	r30, X+
     382:	fc 91       	ld	r31, X
     384:	52 97       	sbiw	r26, 0x12	; 18
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:425
  uint8_t reg_mask = _transmitBitMask;
     386:	50 96       	adiw	r26, 0x10	; 16
     388:	8c 91       	ld	r24, X
     38a:	50 97       	sbiw	r26, 0x10	; 16
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:426
  uint8_t inv_mask = ~_transmitBitMask;
     38c:	98 2f       	mov	r25, r24
     38e:	90 95       	com	r25
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:427
  uint8_t oldSREG = SREG;
     390:	0f b7       	in	r16, 0x3f	; 63
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:428
  bool inv = _inverse_logic;
     392:	5e 96       	adiw	r26, 0x1e	; 30
     394:	2c 91       	ld	r18, X
     396:	5e 97       	sbiw	r26, 0x1e	; 30
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:431
  uint16_t delay = _tx_delay;

  if (inv)
     398:	12 2f       	mov	r17, r18
     39a:	12 70       	andi	r17, 0x02	; 2
     39c:	21 fd       	sbrc	r18, 1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:432
    b = ~b;
     39e:	60 95       	com	r22
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:434

  cli();  // turn off interrupts for a clean txmit
     3a0:	f8 94       	cli
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:438

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
     3a2:	20 81       	ld	r18, Z
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:437
    b = ~b;

  cli();  // turn off interrupts for a clean txmit

  // Write the start bit
  if (inv)
     3a4:	11 23       	and	r17, r17
     3a6:	19 f1       	breq	.+70     	; 0x3ee <SoftwareSerial::write(unsigned char)+0xaa>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:438
    *reg |= reg_mask;
     3a8:	28 2b       	or	r18, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:440
  else
    *reg &= inv_mask;
     3aa:	20 83       	st	Z, r18
_delay_loop_2():
c:\users\ian\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     3ac:	e7 01       	movw	r28, r14
     3ae:	21 97       	sbiw	r28, 0x01	; 1
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <SoftwareSerial::write(unsigned char)+0x6a>
     3b2:	28 e0       	ldi	r18, 0x08	; 8
write():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:447
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     3b4:	46 2f       	mov	r20, r22
     3b6:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:448
      *reg |= reg_mask; // send 1
     3b8:	30 81       	ld	r19, Z
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:447
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     3ba:	60 ff       	sbrs	r22, 0
     3bc:	1a c0       	rjmp	.+52     	; 0x3f2 <SoftwareSerial::write(unsigned char)+0xae>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:448
      *reg |= reg_mask; // send 1
     3be:	38 2b       	or	r19, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:450
    else
      *reg &= inv_mask; // send 0
     3c0:	30 83       	st	Z, r19
_delay_loop_2():
c:\users\ian\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     3c2:	e7 01       	movw	r28, r14
     3c4:	21 97       	sbiw	r28, 0x01	; 1
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <SoftwareSerial::write(unsigned char)+0x80>
write():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:453

    tunedDelay(delay);
    b >>= 1;
     3c8:	ba 01       	movw	r22, r20
     3ca:	75 95       	asr	r23
     3cc:	67 95       	ror	r22
     3ce:	21 50       	subi	r18, 0x01	; 1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:445
    *reg &= inv_mask;

  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
     3d0:	89 f7       	brne	.-30     	; 0x3b4 <SoftwareSerial::write(unsigned char)+0x70>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:457
    tunedDelay(delay);
    b >>= 1;
  }

  // restore pin to natural state
  if (inv)
     3d2:	11 23       	and	r17, r17
     3d4:	81 f0       	breq	.+32     	; 0x3f6 <SoftwareSerial::write(unsigned char)+0xb2>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:458
    *reg &= inv_mask;
     3d6:	80 81       	ld	r24, Z
     3d8:	89 23       	and	r24, r25
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:460
  else
    *reg |= reg_mask;
     3da:	80 83       	st	Z, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:462

  SREG = oldSREG; // turn interrupts back on
     3dc:	0f bf       	out	0x3f, r16	; 63
_delay_loop_2():
c:\users\ian\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     3de:	5c 96       	adiw	r26, 0x1c	; 28
     3e0:	8d 91       	ld	r24, X+
     3e2:	9c 91       	ld	r25, X
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <SoftwareSerial::write(unsigned char)+0xa0>
write():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:465
  tunedDelay(_tx_delay);

  return 1;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	c1 cf       	rjmp	.-126    	; 0x370 <SoftwareSerial::write(unsigned char)+0x2c>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:440

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
  else
    *reg &= inv_mask;
     3ee:	29 23       	and	r18, r25
     3f0:	dc cf       	rjmp	.-72     	; 0x3aa <SoftwareSerial::write(unsigned char)+0x66>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:450
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
      *reg |= reg_mask; // send 1
    else
      *reg &= inv_mask; // send 0
     3f2:	39 23       	and	r19, r25
     3f4:	e5 cf       	rjmp	.-54     	; 0x3c0 <SoftwareSerial::write(unsigned char)+0x7c>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:460

  // restore pin to natural state
  if (inv)
    *reg &= inv_mask;
  else
    *reg |= reg_mask;
     3f6:	90 81       	ld	r25, Z
     3f8:	89 2b       	or	r24, r25
     3fa:	ef cf       	rjmp	.-34     	; 0x3da <SoftwareSerial::write(unsigned char)+0x96>

000003fc <SoftwareSerial::available()>:
available():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:407
  return d;
}

int SoftwareSerial::available()
{
  if (!isListening())
     3fc:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <SoftwareSerial::active_object>
     400:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <SoftwareSerial::active_object+0x1>
     404:	28 17       	cp	r18, r24
     406:	39 07       	cpc	r19, r25
     408:	69 f4       	brne	.+26     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:410
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     40a:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <SoftwareSerial::_receive_buffer_tail>
     40e:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <SoftwareSerial::_receive_buffer_head>
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	80 5c       	subi	r24, 0xC0	; 192
     416:	9f 4f       	sbci	r25, 0xFF	; 255
     418:	82 1b       	sub	r24, r18
     41a:	91 09       	sbc	r25, r1
     41c:	60 e4       	ldi	r22, 0x40	; 64
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	29 da       	rcall	.-2990   	; 0xfffff874 <__eeprom_end+0xff7ef874>
     422:	08 95       	ret
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:408
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:411

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
     428:	08 95       	ret

0000042a <SoftwareSerial::read()>:
read():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:392


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
     42a:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <SoftwareSerial::active_object>
     42e:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <SoftwareSerial::active_object+0x1>
     432:	28 17       	cp	r18, r24
     434:	39 07       	cpc	r19, r25
     436:	b9 f4       	brne	.+46     	; 0x466 <SoftwareSerial::read()+0x3c>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:396
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     438:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <SoftwareSerial::_receive_buffer_head>
     43c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <SoftwareSerial::_receive_buffer_tail>
     440:	98 17       	cp	r25, r24
     442:	89 f0       	breq	.+34     	; 0x466 <SoftwareSerial::read()+0x3c>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:400
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     444:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <SoftwareSerial::_receive_buffer_head>
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	e6 5d       	subi	r30, 0xD6	; 214
     44c:	fe 4f       	sbci	r31, 0xFE	; 254
     44e:	80 81       	ld	r24, Z
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:401
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     450:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <SoftwareSerial::_receive_buffer_head>
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	2f 5f       	subi	r18, 0xFF	; 255
     458:	3f 4f       	sbci	r19, 0xFF	; 255
     45a:	2f 73       	andi	r18, 0x3F	; 63
     45c:	33 27       	eor	r19, r19
     45e:	20 93 6f 01 	sts	0x016F, r18	; 0x80016f <SoftwareSerial::_receive_buffer_head>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:402
  return d;
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	08 95       	ret
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:393

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
     466:	8f ef       	ldi	r24, 0xFF	; 255
     468:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:403

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
     46a:	08 95       	ret

0000046c <ReadSetupSwitch()>:
ReadSetupSwitch():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:203
 * SETUP_UPPER       =  1.60;
 * SETUP_LOWER       =  1.30;
 */

unsigned char ReadSetupSwitch()
{
     46c:	cf 92       	push	r12
     46e:	df 92       	push	r13
     470:	ef 92       	push	r14
     472:	ff 92       	push	r15
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:205
  float ADCReading;
  ADCReading=AvgADCRead(SELECTION_IN);
     474:	1c df       	rcall	.-456    	; 0x2ae <AvgADCRead(unsigned char) [clone .constprop.18]>
     476:	6b 01       	movw	r12, r22
     478:	7c 01       	movw	r14, r24
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:206
  if (ADCReading >SETUP_LOWER && ADCReading < SETUP_UPPER)
     47a:	26 e6       	ldi	r18, 0x66	; 102
     47c:	36 e6       	ldi	r19, 0x66	; 102
     47e:	46 ea       	ldi	r20, 0xA6	; 166
     480:	5f e3       	ldi	r21, 0x3F	; 63
     482:	f4 d9       	rcall	.-3096   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
     484:	18 16       	cp	r1, r24
     486:	7c f4       	brge	.+30     	; 0x4a6 <ReadSetupSwitch()+0x3a>
     488:	2d ec       	ldi	r18, 0xCD	; 205
     48a:	3c ec       	ldi	r19, 0xCC	; 204
     48c:	4c ec       	ldi	r20, 0xCC	; 204
     48e:	5f e3       	ldi	r21, 0x3F	; 63
     490:	c7 01       	movw	r24, r14
     492:	b6 01       	movw	r22, r12
     494:	15 d8       	rcall	.-4054   	; 0xfffff4c0 <__eeprom_end+0xff7ef4c0>
     496:	87 ff       	sbrs	r24, 7
     498:	06 c0       	rjmp	.+12     	; 0x4a6 <ReadSetupSwitch()+0x3a>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:208
  {
    return(SWITCHCLOSED);
     49a:	87 e7       	ldi	r24, 0x77	; 119
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:216
  {
    return(SWITCHOPEN);
  }
  
  
}
     49c:	ff 90       	pop	r15
     49e:	ef 90       	pop	r14
     4a0:	df 90       	pop	r13
     4a2:	cf 90       	pop	r12
     4a4:	08 95       	ret
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:212
  {
    return(SWITCHCLOSED);
  }
  else
  {
    return(SWITCHOPEN);
     4a6:	86 e6       	ldi	r24, 0x66	; 102
     4a8:	f9 cf       	rjmp	.-14     	; 0x49c <ReadSetupSwitch()+0x30>

000004aa <digitalWrite>:
digitalWrite():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:139
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	fc 01       	movw	r30, r24
     4ae:	ec 5d       	subi	r30, 0xDC	; 220
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	34 91       	lpm	r19, Z
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:140
  uint8_t bit = digitalPinToBitMask(pin);
     4b4:	fc 01       	movw	r30, r24
     4b6:	ea 5c       	subi	r30, 0xCA	; 202
     4b8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ba:	24 91       	lpm	r18, Z
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:141
  uint8_t port = digitalPinToPort(pin);
     4bc:	fc 01       	movw	r30, r24
     4be:	e0 5d       	subi	r30, 0xD0	; 208
     4c0:	ff 4f       	sbci	r31, 0xFF	; 255
     4c2:	e4 91       	lpm	r30, Z
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:144
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     4c4:	ee 23       	and	r30, r30
     4c6:	b9 f0       	breq	.+46     	; 0x4f6 <digitalWrite+0x4c>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:148

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     4c8:	33 23       	and	r19, r19
     4ca:	29 f0       	breq	.+10     	; 0x4d6 <digitalWrite+0x2c>
turnOffPWM():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:67
}

static void turnOffPWM(uint8_t timer)
{
  #if defined(TCCR0A) && defined(COM0A1)
    if( timer == TIMER0A){
     4cc:	31 30       	cpi	r19, 0x01	; 1
     4ce:	a1 f4       	brne	.+40     	; 0x4f8 <digitalWrite+0x4e>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:68
      cbi(TCCR0A, COM0A1);
     4d0:	8a b5       	in	r24, 0x2a	; 42
     4d2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:74
      //cbi(TCCR0A, COM0A0);
    } else
  #endif
  #if defined(TCCR0A) && defined(COM0B1)
    if( timer == TIMER0B){
      cbi(TCCR0A, COM0B1);
     4d4:	8a bd       	out	0x2a, r24	; 42
digitalWrite():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:150

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	ee 0f       	add	r30, r30
     4da:	ff 1f       	adc	r31, r31
     4dc:	e6 5d       	subi	r30, 0xD6	; 214
     4de:	ff 4f       	sbci	r31, 0xFF	; 255
     4e0:	a5 91       	lpm	r26, Z+
     4e2:	b4 91       	lpm	r27, Z
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:153

  if (val == LOW) {
    uint8_t oldSREG = SREG;
     4e4:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:152
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);

  if (val == LOW) {
     4e6:	61 11       	cpse	r22, r1
     4e8:	18 c0       	rjmp	.+48     	; 0x51a <digitalWrite+0x70>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:154
    uint8_t oldSREG = SREG;
    cli();
     4ea:	f8 94       	cli
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:155
    *out &= ~bit;
     4ec:	ec 91       	ld	r30, X
     4ee:	20 95       	com	r18
     4f0:	2e 23       	and	r18, r30
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:160
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    *out |= bit;
     4f2:	2c 93       	st	X, r18
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:161
    SREG = oldSREG;
     4f4:	8f bf       	out	0x3f, r24	; 63
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:163
  }
}
     4f6:	08 95       	ret
turnOffPWM():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:73
      cbi(TCCR0A, COM0A1);
      //cbi(TCCR0A, COM0A0);
    } else
  #endif
  #if defined(TCCR0A) && defined(COM0B1)
    if( timer == TIMER0B){
     4f8:	32 30       	cpi	r19, 0x02	; 2
     4fa:	19 f4       	brne	.+6      	; 0x502 <digitalWrite+0x58>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:74
      cbi(TCCR0A, COM0B1);
     4fc:	8a b5       	in	r24, 0x2a	; 42
     4fe:	8f 7d       	andi	r24, 0xDF	; 223
     500:	e9 cf       	rjmp	.-46     	; 0x4d4 <digitalWrite+0x2a>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:106
      //cbi(TCCR1C,COM1D0);
    } else
  #else
    // Timer1 for non-x61/x7
    #if defined(TCCR1) && defined(COM1A1) // x5
      if(timer == TIMER1A){
     502:	33 30       	cpi	r19, 0x03	; 3
     504:	21 f4       	brne	.+8      	; 0x50e <digitalWrite+0x64>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:107
        TCCR1 &= ~(1<<COM1A1);
     506:	80 b7       	in	r24, 0x30	; 48
     508:	8f 7d       	andi	r24, 0xDF	; 223
     50a:	80 bf       	out	0x30, r24	; 48
     50c:	e4 cf       	rjmp	.-56     	; 0x4d6 <digitalWrite+0x2c>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:112
        //cbi(TCCR1, COM1A0);
      } else
    #endif
    #if defined(TCCR1) && defined(COM1B1) // x5
      if( timer == TIMER1B){
     50e:	34 30       	cpi	r19, 0x04	; 4
     510:	11 f7       	brne	.-60     	; 0x4d6 <digitalWrite+0x2c>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:113
        GTCCR &= ~(1<<COM1B1);
     512:	8c b5       	in	r24, 0x2c	; 44
     514:	8f 7d       	andi	r24, 0xDF	; 223
     516:	8c bd       	out	0x2c, r24	; 44
     518:	de cf       	rjmp	.-68     	; 0x4d6 <digitalWrite+0x2c>
digitalWrite():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:159
    cli();
    *out &= ~bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
     51a:	f8 94       	cli
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:160
    *out |= bit;
     51c:	ec 91       	ld	r30, X
     51e:	2e 2b       	or	r18, r30
     520:	e8 cf       	rjmp	.-48     	; 0x4f2 <digitalWrite+0x48>

00000522 <pinMode>:
pinMode():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:33
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:35
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t bit = digitalPinToBitMask(pin);
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	fc 01       	movw	r30, r24
     52a:	ea 5c       	subi	r30, 0xCA	; 202
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	24 91       	lpm	r18, Z
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:36
  uint8_t port = digitalPinToPort(pin);
     530:	80 5d       	subi	r24, 0xD0	; 208
     532:	9f 4f       	sbci	r25, 0xFF	; 255
     534:	fc 01       	movw	r30, r24
     536:	84 91       	lpm	r24, Z
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:39
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     538:	88 23       	and	r24, r24
     53a:	c9 f0       	breq	.+50     	; 0x56e <pinMode+0x4c>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:41

  reg = portModeRegister(port);
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	88 0f       	add	r24, r24
     540:	99 1f       	adc	r25, r25
     542:	fc 01       	movw	r30, r24
     544:	e2 5e       	subi	r30, 0xE2	; 226
     546:	ff 4f       	sbci	r31, 0xFF	; 255
     548:	a5 91       	lpm	r26, Z+
     54a:	b4 91       	lpm	r27, Z
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:42
  out = portOutputRegister(port);
     54c:	fc 01       	movw	r30, r24
     54e:	e6 5d       	subi	r30, 0xD6	; 214
     550:	ff 4f       	sbci	r31, 0xFF	; 255
     552:	c5 91       	lpm	r28, Z+
     554:	d4 91       	lpm	r29, Z
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:44

  if (mode == INPUT) {
     556:	61 11       	cpse	r22, r1
     558:	0d c0       	rjmp	.+26     	; 0x574 <pinMode+0x52>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:45
    uint8_t oldSREG = SREG;
     55a:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:46
                cli();
     55c:	f8 94       	cli
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:47
    *reg &= ~bit;
     55e:	8c 91       	ld	r24, X
     560:	20 95       	com	r18
     562:	82 23       	and	r24, r18
     564:	8c 93       	st	X, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:48
    *out &= ~bit;
     566:	88 81       	ld	r24, Y
     568:	28 23       	and	r18, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:54
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
                cli();
    *reg &= ~bit;
    *out |= bit;
     56a:	28 83       	st	Y, r18
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:55
    SREG = oldSREG;
     56c:	9f bf       	out	0x3f, r25	; 63
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:62
    uint8_t oldSREG = SREG;
                cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	08 95       	ret
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:50
    uint8_t oldSREG = SREG;
                cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     574:	62 30       	cpi	r22, 0x02	; 2
     576:	51 f4       	brne	.+20     	; 0x58c <pinMode+0x6a>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:51
    uint8_t oldSREG = SREG;
     578:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:52
                cli();
     57a:	f8 94       	cli
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:53
    *reg &= ~bit;
     57c:	3c 91       	ld	r19, X
     57e:	82 2f       	mov	r24, r18
     580:	80 95       	com	r24
     582:	83 23       	and	r24, r19
     584:	8c 93       	st	X, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:54
    *out |= bit;
     586:	e8 81       	ld	r30, Y
     588:	2e 2b       	or	r18, r30
     58a:	ef cf       	rjmp	.-34     	; 0x56a <pinMode+0x48>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:57
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     58c:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:58
                cli();
     58e:	f8 94       	cli
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:59
    *reg |= bit;
     590:	ec 91       	ld	r30, X
     592:	2e 2b       	or	r18, r30
     594:	2c 93       	st	X, r18
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_digital.c:60
    SREG = oldSREG;
     596:	8f bf       	out	0x3f, r24	; 63
     598:	ea cf       	rjmp	.-44     	; 0x56e <pinMode+0x4c>

0000059a <pulseIn.constprop.20>:
pulseIn():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.c:33
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
     59a:	0f 93       	push	r16
     59c:	1f 93       	push	r17
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.c:46

    // convert the timeout from microseconds to a number of times through
    // the initial loop; it takes approximately 16 clock cycles per iteration
    unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

    unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
     59e:	00 e4       	ldi	r16, 0x40	; 64
     5a0:	12 e4       	ldi	r17, 0x42	; 66
     5a2:	2f e0       	ldi	r18, 0x0F	; 15
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	41 e0       	ldi	r20, 0x01	; 1
     5a8:	61 e0       	ldi	r22, 0x01	; 1
     5aa:	86 e3       	ldi	r24, 0x36	; 54
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	fb d2       	rcall	.+1526   	; 0xba6 <countPulseASM>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.c:49

    // prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
    if (width)
     5b0:	61 15       	cp	r22, r1
     5b2:	71 05       	cpc	r23, r1
     5b4:	81 05       	cpc	r24, r1
     5b6:	91 05       	cpc	r25, r1
     5b8:	29 f0       	breq	.+10     	; 0x5c4 <pulseIn.constprop.20+0x2a>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.c:50
        return clockCyclesToMicroseconds(width * 16 + 16);
     5ba:	6f 5f       	subi	r22, 0xFF	; 255
     5bc:	7f 4f       	sbci	r23, 0xFF	; 255
     5be:	8f 4f       	sbci	r24, 0xFF	; 255
     5c0:	9f 4f       	sbci	r25, 0xFF	; 255
     5c2:	9f 70       	andi	r25, 0x0F	; 15
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.c:53
    else
        return 0;
}
     5c4:	1f 91       	pop	r17
     5c6:	0f 91       	pop	r16
     5c8:	08 95       	ret

000005ca <Print::write(char const*)>:
write():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.h:81

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     5ca:	fb 01       	movw	r30, r22
     5cc:	01 90       	ld	r0, Z+
     5ce:	00 20       	and	r0, r0
     5d0:	e9 f7       	brne	.-6      	; 0x5cc <Print::write(char const*)+0x2>
     5d2:	31 97       	sbiw	r30, 0x01	; 1
     5d4:	af 01       	movw	r20, r30
     5d6:	46 1b       	sub	r20, r22
     5d8:	57 0b       	sbc	r21, r23
     5da:	dc 01       	movw	r26, r24
     5dc:	ed 91       	ld	r30, X+
     5de:	fc 91       	ld	r31, X
     5e0:	02 80       	ldd	r0, Z+2	; 0x02
     5e2:	f3 81       	ldd	r31, Z+3	; 0x03
     5e4:	e0 2d       	mov	r30, r0
     5e6:	09 94       	ijmp

000005e8 <Print::printNumber(unsigned long, unsigned char)>:
printNumber():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:257

#endif

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     5e8:	8f 92       	push	r8
     5ea:	9f 92       	push	r9
     5ec:	af 92       	push	r10
     5ee:	bf 92       	push	r11
     5f0:	cf 92       	push	r12
     5f2:	df 92       	push	r13
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62
     604:	a1 97       	sbiw	r28, 0x21	; 33
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	cd bf       	out	0x3d, r28	; 61
     610:	6c 01       	movw	r12, r24
     612:	14 2f       	mov	r17, r20
     614:	e5 2f       	mov	r30, r21
     616:	cb 01       	movw	r24, r22
     618:	02 2f       	mov	r16, r18
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:261
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     61a:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:264

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     61c:	22 30       	cpi	r18, 0x02	; 2
     61e:	08 f4       	brcc	.+2      	; 0x622 <Print::printNumber(unsigned long, unsigned char)+0x3a>
     620:	0a e0       	ldi	r16, 0x0A	; 10
     622:	7e 01       	movw	r14, r28
     624:	21 e2       	ldi	r18, 0x21	; 33
     626:	e2 0e       	add	r14, r18
     628:	f1 1c       	adc	r15, r1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:268

  do {
    unsigned long m = n;
    n /= base;
     62a:	80 2e       	mov	r8, r16
     62c:	91 2c       	mov	r9, r1
     62e:	b1 2c       	mov	r11, r1
     630:	a1 2c       	mov	r10, r1
     632:	61 2f       	mov	r22, r17
     634:	7e 2f       	mov	r23, r30
     636:	a5 01       	movw	r20, r10
     638:	94 01       	movw	r18, r8
     63a:	2f d9       	rcall	.-3490   	; 0xfffff89a <__eeprom_end+0xff7ef89a>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:269
    char c = m - base * n;
     63c:	80 2f       	mov	r24, r16
     63e:	62 2f       	mov	r22, r18
     640:	76 d8       	rcall	.-3860   	; 0xfffff72e <__eeprom_end+0xff7ef72e>
     642:	18 1b       	sub	r17, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:270
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     644:	1a 30       	cpi	r17, 0x0A	; 10
     646:	0c f5       	brge	.+66     	; 0x68a <Print::printNumber(unsigned long, unsigned char)+0xa2>
     648:	10 5d       	subi	r17, 0xD0	; 208
     64a:	f7 01       	movw	r30, r14
     64c:	12 93       	st	-Z, r17
     64e:	7f 01       	movw	r14, r30
     650:	12 2f       	mov	r17, r18
     652:	e3 2f       	mov	r30, r19
     654:	ca 01       	movw	r24, r20
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:271
  } while(n);
     656:	23 2b       	or	r18, r19
     658:	24 2b       	or	r18, r20
     65a:	25 2b       	or	r18, r21
     65c:	51 f7       	brne	.-44     	; 0x632 <Print::printNumber(unsigned long, unsigned char)+0x4a>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:273

  return write(str);
     65e:	b7 01       	movw	r22, r14
     660:	c6 01       	movw	r24, r12
     662:	b3 df       	rcall	.-154    	; 0x5ca <Print::write(char const*)>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:274
}
     664:	a1 96       	adiw	r28, 0x21	; 33
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	f8 94       	cli
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	cd bf       	out	0x3d, r28	; 61
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	ef 90       	pop	r14
     67c:	df 90       	pop	r13
     67e:	cf 90       	pop	r12
     680:	bf 90       	pop	r11
     682:	af 90       	pop	r10
     684:	9f 90       	pop	r9
     686:	8f 90       	pop	r8
     688:	08 95       	ret
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:270

  do {
    unsigned long m = n;
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     68a:	19 5c       	subi	r17, 0xC9	; 201
     68c:	de cf       	rjmp	.-68     	; 0x64a <Print::printNumber(unsigned long, unsigned char)+0x62>

0000068e <Print::print(long, int) [clone .part.1] [clone .constprop.7]>:
_ZN5Print5printEli.part.1():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:76
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
     68e:	cf 92       	push	r12
     690:	df 92       	push	r13
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	6b 01       	movw	r12, r22
     69c:	7c 01       	movw	r14, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:81
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    int t = 0;
     69e:	d0 e0       	ldi	r29, 0x00	; 0
     6a0:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:82
    if (n < 0) {
     6a2:	f7 fe       	sbrs	r15, 7
     6a4:	0d c0       	rjmp	.+26     	; 0x6c0 <Print::print(long, int) [clone .part.1] [clone .constprop.7]+0x32>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:83
      t = print('-');
     6a6:	6d e2       	ldi	r22, 0x2D	; 45
     6a8:	88 ee       	ldi	r24, 0xE8	; 232
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	6f dd       	rcall	.-1314   	; 0x18c <Print::print(char)>
     6ae:	ec 01       	movw	r28, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:84
      n = -n;
     6b0:	f0 94       	com	r15
     6b2:	e0 94       	com	r14
     6b4:	d0 94       	com	r13
     6b6:	c0 94       	com	r12
     6b8:	c1 1c       	adc	r12, r1
     6ba:	d1 1c       	adc	r13, r1
     6bc:	e1 1c       	adc	r14, r1
     6be:	f1 1c       	adc	r15, r1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:86
    }
    return printNumber(n, 10) + t;
     6c0:	2a e0       	ldi	r18, 0x0A	; 10
     6c2:	b7 01       	movw	r22, r14
     6c4:	a6 01       	movw	r20, r12
     6c6:	88 ee       	ldi	r24, 0xE8	; 232
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	8e df       	rcall	.-228    	; 0x5e8 <Print::printNumber(unsigned long, unsigned char)>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:90
  } else {
    return printNumber(n, base);
  }
}
     6cc:	8c 0f       	add	r24, r28
     6ce:	9d 1f       	adc	r25, r29
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	ff 90       	pop	r15
     6d6:	ef 90       	pop	r14
     6d8:	df 90       	pop	r13
     6da:	cf 90       	pop	r12
     6dc:	08 95       	ret

000006de <Print::println(int, int) [clone .constprop.4]>:
println():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:154
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
print():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:68
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
     6e2:	bc 01       	movw	r22, r24
     6e4:	99 0f       	add	r25, r25
     6e6:	88 0b       	sbc	r24, r24
     6e8:	99 0b       	sbc	r25, r25
     6ea:	d1 df       	rcall	.-94     	; 0x68e <Print::print(long, int) [clone .part.1] [clone .constprop.7]>
     6ec:	ec 01       	movw	r28, r24
println():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:157
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
     6ee:	88 ee       	ldi	r24, 0xE8	; 232
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	53 dd       	rcall	.-1370   	; 0x19a <Print::println()>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:159
  return n;
}
     6f4:	8c 0f       	add	r24, r28
     6f6:	9d 1f       	adc	r25, r29
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	08 95       	ret

000006fe <Print::print(unsigned char, int)>:
print():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:62
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     6fe:	24 2f       	mov	r18, r20
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:63
  return print((unsigned long) b, base);
     700:	46 2f       	mov	r20, r22
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:95
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     708:	6f cf       	rjmp	.-290    	; 0x5e8 <Print::printNumber(unsigned long, unsigned char)>

0000070a <Print::println(char const*)>:
println():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:134
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	ec 01       	movw	r28, r24
print():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:53
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
     714:	5a df       	rcall	.-332    	; 0x5ca <Print::write(char const*)>
     716:	8c 01       	movw	r16, r24
println():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:136
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     718:	ce 01       	movw	r24, r28
     71a:	3f dd       	rcall	.-1410   	; 0x19a <Print::println()>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:138
  return n;
}
     71c:	80 0f       	add	r24, r16
     71e:	91 1f       	adc	r25, r17
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	08 95       	ret

0000072a <Print::print(char const*)>:
print():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:53
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
     72a:	4f cf       	rjmp	.-354    	; 0x5ca <Print::write(char const*)>

0000072c <DFPlayerMini_Fast::sendData() [clone .constprop.31]>:
sendData():
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:904
/**************************************************************************/
 /*!
	 @brief  Send a config/command packet to the MP3 player.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::sendData()
     72c:	af 92       	push	r10
     72e:	bf 92       	push	r11
     730:	cf 92       	push	r12
     732:	df 92       	push	r13
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:906
{
	_serial->write(sendStack.start_byte);
     740:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <myMP3>
     744:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <myMP3+0x1>
     748:	dc 01       	movw	r26, r24
     74a:	ed 91       	ld	r30, X+
     74c:	fc 91       	ld	r31, X
     74e:	01 90       	ld	r0, Z+
     750:	f0 81       	ld	r31, Z
     752:	e0 2d       	mov	r30, r0
     754:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <myMP3+0x2>
     758:	09 95       	icall
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:907
	_serial->write(sendStack.version);
     75a:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <myMP3>
     75e:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <myMP3+0x1>
     762:	dc 01       	movw	r26, r24
     764:	ed 91       	ld	r30, X+
     766:	fc 91       	ld	r31, X
     768:	01 90       	ld	r0, Z+
     76a:	f0 81       	ld	r31, Z
     76c:	e0 2d       	mov	r30, r0
     76e:	60 91 c1 01 	lds	r22, 0x01C1	; 0x8001c1 <myMP3+0x3>
     772:	09 95       	icall
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:908
	_serial->write(sendStack.length);
     774:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <myMP3>
     778:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <myMP3+0x1>
     77c:	dc 01       	movw	r26, r24
     77e:	ed 91       	ld	r30, X+
     780:	fc 91       	ld	r31, X
     782:	01 90       	ld	r0, Z+
     784:	f0 81       	ld	r31, Z
     786:	e0 2d       	mov	r30, r0
     788:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <myMP3+0x4>
     78c:	09 95       	icall
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:909
	_serial->write(sendStack.commandValue);
     78e:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <myMP3>
     792:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <myMP3+0x1>
     796:	dc 01       	movw	r26, r24
     798:	ed 91       	ld	r30, X+
     79a:	fc 91       	ld	r31, X
     79c:	01 90       	ld	r0, Z+
     79e:	f0 81       	ld	r31, Z
     7a0:	e0 2d       	mov	r30, r0
     7a2:	60 91 c3 01 	lds	r22, 0x01C3	; 0x8001c3 <myMP3+0x5>
     7a6:	09 95       	icall
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:910
	_serial->write(sendStack.feedbackValue);
     7a8:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <myMP3>
     7ac:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <myMP3+0x1>
     7b0:	dc 01       	movw	r26, r24
     7b2:	ed 91       	ld	r30, X+
     7b4:	fc 91       	ld	r31, X
     7b6:	01 90       	ld	r0, Z+
     7b8:	f0 81       	ld	r31, Z
     7ba:	e0 2d       	mov	r30, r0
     7bc:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <myMP3+0x6>
     7c0:	09 95       	icall
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:911
	_serial->write(sendStack.paramMSB);
     7c2:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <myMP3>
     7c6:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <myMP3+0x1>
     7ca:	dc 01       	movw	r26, r24
     7cc:	ed 91       	ld	r30, X+
     7ce:	fc 91       	ld	r31, X
     7d0:	01 90       	ld	r0, Z+
     7d2:	f0 81       	ld	r31, Z
     7d4:	e0 2d       	mov	r30, r0
     7d6:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <myMP3+0x7>
     7da:	09 95       	icall
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:912
	_serial->write(sendStack.paramLSB);
     7dc:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <myMP3>
     7e0:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <myMP3+0x1>
     7e4:	dc 01       	movw	r26, r24
     7e6:	ed 91       	ld	r30, X+
     7e8:	fc 91       	ld	r31, X
     7ea:	01 90       	ld	r0, Z+
     7ec:	f0 81       	ld	r31, Z
     7ee:	e0 2d       	mov	r30, r0
     7f0:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <myMP3+0x8>
     7f4:	09 95       	icall
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:913
	_serial->write(sendStack.checksumMSB);
     7f6:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <myMP3>
     7fa:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <myMP3+0x1>
     7fe:	dc 01       	movw	r26, r24
     800:	ed 91       	ld	r30, X+
     802:	fc 91       	ld	r31, X
     804:	01 90       	ld	r0, Z+
     806:	f0 81       	ld	r31, Z
     808:	e0 2d       	mov	r30, r0
     80a:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <myMP3+0x9>
     80e:	09 95       	icall
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:914
	_serial->write(sendStack.checksumLSB);
     810:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <myMP3>
     814:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <myMP3+0x1>
     818:	dc 01       	movw	r26, r24
     81a:	ed 91       	ld	r30, X+
     81c:	fc 91       	ld	r31, X
     81e:	01 90       	ld	r0, Z+
     820:	f0 81       	ld	r31, Z
     822:	e0 2d       	mov	r30, r0
     824:	60 91 c8 01 	lds	r22, 0x01C8	; 0x8001c8 <myMP3+0xa>
     828:	09 95       	icall
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:915
	_serial->write(sendStack.end_byte);
     82a:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <myMP3>
     82e:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <myMP3+0x1>
     832:	dc 01       	movw	r26, r24
     834:	ed 91       	ld	r30, X+
     836:	fc 91       	ld	r31, X
     838:	01 90       	ld	r0, Z+
     83a:	f0 81       	ld	r31, Z
     83c:	e0 2d       	mov	r30, r0
     83e:	60 91 c9 01 	lds	r22, 0x01C9	; 0x8001c9 <myMP3+0xb>
     842:	09 95       	icall
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:917

	if (_debug)
     844:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <myMP3+0x16>
     848:	88 23       	and	r24, r24
     84a:	09 f4       	brne	.+2      	; 0x84e <DFPlayerMini_Fast::sendData() [clone .constprop.31]+0x122>
     84c:	8e c0       	rjmp	.+284    	; 0x96a <DFPlayerMini_Fast::sendData() [clone .constprop.31]+0x23e>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:919
	{
		Serial.print("Sent ");
     84e:	60 e8       	ldi	r22, 0x80	; 128
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	8c ea       	ldi	r24, 0xAC	; 172
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	69 df       	rcall	.-302    	; 0x72a <Print::print(char const*)>
     858:	a0 90 c0 01 	lds	r10, 0x01C0	; 0x8001c0 <myMP3+0x2>
     85c:	b0 90 c1 01 	lds	r11, 0x01C1	; 0x8001c1 <myMP3+0x3>
     860:	c0 90 c2 01 	lds	r12, 0x01C2	; 0x8001c2 <myMP3+0x4>
     864:	d0 90 c3 01 	lds	r13, 0x01C3	; 0x8001c3 <myMP3+0x5>
     868:	e0 90 c4 01 	lds	r14, 0x01C4	; 0x8001c4 <myMP3+0x6>
     86c:	f0 90 c5 01 	lds	r15, 0x01C5	; 0x8001c5 <myMP3+0x7>
     870:	00 91 c6 01 	lds	r16, 0x01C6	; 0x8001c6 <myMP3+0x8>
     874:	10 91 c7 01 	lds	r17, 0x01C7	; 0x8001c7 <myMP3+0x9>
     878:	d0 91 c8 01 	lds	r29, 0x01C8	; 0x8001c8 <myMP3+0xa>
     87c:	c0 91 c9 01 	lds	r28, 0x01C9	; 0x8001c9 <myMP3+0xb>
printStack():
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:1167
			   to print.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::printStack(stack _stack)
{
	Serial.println("Stack:");
     880:	66 e8       	ldi	r22, 0x86	; 134
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	8c ea       	ldi	r24, 0xAC	; 172
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	40 df       	rcall	.-384    	; 0x70a <Print::println(char const*)>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:1168
	Serial.print(_stack.start_byte, HEX);    Serial.print(' ');
     88a:	40 e1       	ldi	r20, 0x10	; 16
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	6a 2d       	mov	r22, r10
     890:	8c ea       	ldi	r24, 0xAC	; 172
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	34 df       	rcall	.-408    	; 0x6fe <Print::print(unsigned char, int)>
     896:	60 e2       	ldi	r22, 0x20	; 32
     898:	8c ea       	ldi	r24, 0xAC	; 172
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	77 dc       	rcall	.-1810   	; 0x18c <Print::print(char)>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:1169
	Serial.print(_stack.version, HEX);       Serial.print(' ');
     89e:	40 e1       	ldi	r20, 0x10	; 16
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	6b 2d       	mov	r22, r11
     8a4:	8c ea       	ldi	r24, 0xAC	; 172
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	2a df       	rcall	.-428    	; 0x6fe <Print::print(unsigned char, int)>
     8aa:	60 e2       	ldi	r22, 0x20	; 32
     8ac:	8c ea       	ldi	r24, 0xAC	; 172
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	6d dc       	rcall	.-1830   	; 0x18c <Print::print(char)>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:1170
	Serial.print(_stack.length, HEX);        Serial.print(' ');
     8b2:	40 e1       	ldi	r20, 0x10	; 16
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	6c 2d       	mov	r22, r12
     8b8:	8c ea       	ldi	r24, 0xAC	; 172
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	20 df       	rcall	.-448    	; 0x6fe <Print::print(unsigned char, int)>
     8be:	60 e2       	ldi	r22, 0x20	; 32
     8c0:	8c ea       	ldi	r24, 0xAC	; 172
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	63 dc       	rcall	.-1850   	; 0x18c <Print::print(char)>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:1171
	Serial.print(_stack.commandValue, HEX);  Serial.print(' ');
     8c6:	40 e1       	ldi	r20, 0x10	; 16
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	6d 2d       	mov	r22, r13
     8cc:	8c ea       	ldi	r24, 0xAC	; 172
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	16 df       	rcall	.-468    	; 0x6fe <Print::print(unsigned char, int)>
     8d2:	60 e2       	ldi	r22, 0x20	; 32
     8d4:	8c ea       	ldi	r24, 0xAC	; 172
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	59 dc       	rcall	.-1870   	; 0x18c <Print::print(char)>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:1172
	Serial.print(_stack.feedbackValue, HEX); Serial.print(' ');
     8da:	40 e1       	ldi	r20, 0x10	; 16
     8dc:	50 e0       	ldi	r21, 0x00	; 0
     8de:	6e 2d       	mov	r22, r14
     8e0:	8c ea       	ldi	r24, 0xAC	; 172
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	0c df       	rcall	.-488    	; 0x6fe <Print::print(unsigned char, int)>
     8e6:	60 e2       	ldi	r22, 0x20	; 32
     8e8:	8c ea       	ldi	r24, 0xAC	; 172
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	4f dc       	rcall	.-1890   	; 0x18c <Print::print(char)>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:1173
	Serial.print(_stack.paramMSB, HEX);      Serial.print(' ');
     8ee:	40 e1       	ldi	r20, 0x10	; 16
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	6f 2d       	mov	r22, r15
     8f4:	8c ea       	ldi	r24, 0xAC	; 172
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	02 df       	rcall	.-508    	; 0x6fe <Print::print(unsigned char, int)>
     8fa:	60 e2       	ldi	r22, 0x20	; 32
     8fc:	8c ea       	ldi	r24, 0xAC	; 172
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	45 dc       	rcall	.-1910   	; 0x18c <Print::print(char)>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:1174
	Serial.print(_stack.paramLSB, HEX);      Serial.print(' ');
     902:	40 e1       	ldi	r20, 0x10	; 16
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	60 2f       	mov	r22, r16
     908:	8c ea       	ldi	r24, 0xAC	; 172
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	f8 de       	rcall	.-528    	; 0x6fe <Print::print(unsigned char, int)>
     90e:	60 e2       	ldi	r22, 0x20	; 32
     910:	8c ea       	ldi	r24, 0xAC	; 172
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	3b dc       	rcall	.-1930   	; 0x18c <Print::print(char)>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:1175
	Serial.print(_stack.checksumMSB, HEX);   Serial.print(' ');
     916:	40 e1       	ldi	r20, 0x10	; 16
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	61 2f       	mov	r22, r17
     91c:	8c ea       	ldi	r24, 0xAC	; 172
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	ee de       	rcall	.-548    	; 0x6fe <Print::print(unsigned char, int)>
     922:	60 e2       	ldi	r22, 0x20	; 32
     924:	8c ea       	ldi	r24, 0xAC	; 172
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	31 dc       	rcall	.-1950   	; 0x18c <Print::print(char)>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:1176
	Serial.print(_stack.checksumLSB, HEX);   Serial.print(' ');
     92a:	40 e1       	ldi	r20, 0x10	; 16
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	6d 2f       	mov	r22, r29
     930:	8c ea       	ldi	r24, 0xAC	; 172
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	e4 de       	rcall	.-568    	; 0x6fe <Print::print(unsigned char, int)>
     936:	60 e2       	ldi	r22, 0x20	; 32
     938:	8c ea       	ldi	r24, 0xAC	; 172
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	27 dc       	rcall	.-1970   	; 0x18c <Print::print(char)>
println():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:149
  return n;
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
     93e:	40 e1       	ldi	r20, 0x10	; 16
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	6c 2f       	mov	r22, r28
     944:	8c ea       	ldi	r24, 0xAC	; 172
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	da de       	rcall	.-588    	; 0x6fe <Print::print(unsigned char, int)>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:150
  n += println();
     94a:	8c ea       	ldi	r24, 0xAC	; 172
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	25 dc       	rcall	.-1974   	; 0x19a <Print::println()>
sendData():
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:921

	if (_debug)
	{
		Serial.print("Sent ");
		printStack(sendStack);
		Serial.println();
     950:	8c ea       	ldi	r24, 0xAC	; 172
     952:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:923
	}
}
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	ff 90       	pop	r15
     95e:	ef 90       	pop	r14
     960:	df 90       	pop	r13
     962:	cf 90       	pop	r12
     964:	bf 90       	pop	r11
     966:	af 90       	pop	r10
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:921

	if (_debug)
	{
		Serial.print("Sent ");
		printStack(sendStack);
		Serial.println();
     968:	18 cc       	rjmp	.-2000   	; 0x19a <Print::println()>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:923
	}
}
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	ef 90       	pop	r14
     976:	df 90       	pop	r13
     978:	cf 90       	pop	r12
     97a:	bf 90       	pop	r11
     97c:	af 90       	pop	r10
     97e:	08 95       	ret

00000980 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
operator=():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\EEPROM/EEPROM.h:61
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    #if  (defined(__AVR_ATtinyX41__) && F_CPU==16000000 && CLOCK_SOURCE==0)
      EERef &operator=( uint8_t in )       { return safe_eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    #else
      EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     980:	c8 c6       	rjmp	.+3472   	; 0x1712 <eeprom_write_byte>

00000982 <__vector_7>:
__vector_7():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:90
//rename the vector so we can use it.
  #define ANALOG_COMP_vect ANA_COMP_vect
#elif !defined (ANALOG_COMP_vect)
  #error Tiny Software Serial cannot find the Analog comparator interrupt vector!
#endif
ISR(ANALOG_COMP_vect){
     982:	1f 92       	push	r1
     984:	0f 92       	push	r0
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	0f 92       	push	r0
     98a:	11 24       	eor	r1, r1
     98c:	2f 93       	push	r18
     98e:	3f 93       	push	r19
     990:	4f 93       	push	r20
     992:	5f 93       	push	r21
     994:	7f 93       	push	r23
     996:	8f 93       	push	r24
     998:	9f 93       	push	r25
     99a:	af 93       	push	r26
     99c:	bf 93       	push	r27
     99e:	ef 93       	push	r30
     9a0:	ff 93       	push	r31
getch():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:70
      [mask] "r" (Serial._rxmask)
    :
      "r23",
      "r24",
      "r25"
    );
     9a2:	40 91 b8 01 	lds	r20, 0x01B8	; 0x8001b8 <Serial+0xc>
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	38 e0       	ldi	r19, 0x08	; 8
     9aa:	35 d0       	rcall	.+106    	; 0xa16 <uartDelay>
     9ac:	34 d0       	rcall	.+104    	; 0xa16 <uartDelay>
     9ae:	33 d0       	rcall	.+102    	; 0xa16 <uartDelay>
     9b0:	32 d0       	rcall	.+100    	; 0xa16 <uartDelay>
     9b2:	31 d0       	rcall	.+98     	; 0xa16 <uartDelay>
     9b4:	88 94       	clc
     9b6:	76 b3       	in	r23, 0x16	; 22
     9b8:	74 23       	and	r23, r20
     9ba:	09 f0       	breq	.+2      	; 0x9be <__vector_7+0x3c>
     9bc:	08 94       	sec
     9be:	27 95       	ror	r18
     9c0:	3a 95       	dec	r19
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <__vector_7+0x44>
     9c4:	f3 cf       	rjmp	.-26     	; 0x9ac <__vector_7+0x2a>
     9c6:	27 d0       	rcall	.+78     	; 0xa16 <uartDelay>
     9c8:	26 d0       	rcall	.+76     	; 0xa16 <uartDelay>
__vector_7():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:92
#elif !defined (ANALOG_COMP_vect)
  #error Tiny Software Serial cannot find the Analog comparator interrupt vector!
#endif
ISR(ANALOG_COMP_vect){
  char ch = getch(); //read in the character softwarily - I know its not a word, but it sounded cool, so you know what: #define softwarily 1
  store_char(ch, Serial._rx_buffer);
     9ca:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <Serial+0xf>
     9ce:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <Serial+0x10>
store_char():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:167
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
}

void store_char(unsigned char c, soft_ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     9d2:	80 a1       	ldd	r24, Z+32	; 0x20
     9d4:	91 a1       	ldd	r25, Z+33	; 0x21
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	8f 71       	andi	r24, 0x1F	; 31
     9da:	99 27       	eor	r25, r25
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:173

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     9dc:	42 a1       	ldd	r20, Z+34	; 0x22
     9de:	53 a1       	ldd	r21, Z+35	; 0x23
     9e0:	84 17       	cp	r24, r20
     9e2:	95 07       	cpc	r25, r21
     9e4:	39 f0       	breq	.+14     	; 0x9f4 <__vector_7+0x72>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:174
    buffer->buffer[buffer->head] = c;
     9e6:	a0 a1       	ldd	r26, Z+32	; 0x20
     9e8:	b1 a1       	ldd	r27, Z+33	; 0x21
     9ea:	ae 0f       	add	r26, r30
     9ec:	bf 1f       	adc	r27, r31
     9ee:	2c 93       	st	X, r18
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:175
    buffer->head = i;
     9f0:	91 a3       	std	Z+33, r25	; 0x21
     9f2:	80 a3       	std	Z+32, r24	; 0x20
__vector_7():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:93
  #error Tiny Software Serial cannot find the Analog comparator interrupt vector!
#endif
ISR(ANALOG_COMP_vect){
  char ch = getch(); //read in the character softwarily - I know its not a word, but it sounded cool, so you know what: #define softwarily 1
  store_char(ch, Serial._rx_buffer);
  sbi(ACSR,ACI); //clear the flag.
     9f4:	44 9a       	sbi	0x08, 4	; 8
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:94
}
     9f6:	ff 91       	pop	r31
     9f8:	ef 91       	pop	r30
     9fa:	bf 91       	pop	r27
     9fc:	af 91       	pop	r26
     9fe:	9f 91       	pop	r25
     a00:	8f 91       	pop	r24
     a02:	7f 91       	pop	r23
     a04:	5f 91       	pop	r21
     a06:	4f 91       	pop	r20
     a08:	3f 91       	pop	r19
     a0a:	2f 91       	pop	r18
     a0c:	0f 90       	pop	r0
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	0f 90       	pop	r0
     a12:	1f 90       	pop	r1
     a14:	18 95       	reti

00000a16 <uartDelay>:
uartDelay():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/TinySoftwareSerial.cpp:81
    "mov r25,%[count]\n"
    "1:dec r25\n"
      "brne 1b\n"
      "ret\n"
    ::[count] "r" ((uint8_t)Serial._delayCount)
  );
     a16:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <Serial+0x11>
     a1a:	98 2f       	mov	r25, r24
     a1c:	9a 95       	dec	r25
     a1e:	f1 f7       	brne	.-4      	; 0xa1c <uartDelay+0x6>
     a20:	08 95       	ret

00000a22 <__vector_5>:
__vector_5():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:308
      #error "cannot find Millis() timer overflow vector"
    #endif
  #else
    #error "Millis() timer not defined!"
  #endif
  {
     a22:	1f 92       	push	r1
     a24:	0f 92       	push	r0
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	0f 92       	push	r0
     a2a:	11 24       	eor	r1, r1
     a2c:	2f 93       	push	r18
     a2e:	3f 93       	push	r19
     a30:	8f 93       	push	r24
     a32:	9f 93       	push	r25
     a34:	af 93       	push	r26
     a36:	bf 93       	push	r27
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:311
    // copy these to local variables so they can be stored in registers
    // (volatile variables must be read from memory on every access)
    unsigned long m = millis_timer_millis;
     a38:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <millis_timer_millis>
     a3c:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <millis_timer_millis+0x1>
     a40:	a0 91 75 01 	lds	r26, 0x0175	; 0x800175 <millis_timer_millis+0x2>
     a44:	b0 91 76 01 	lds	r27, 0x0176	; 0x800176 <millis_timer_millis+0x3>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:312
    unsigned char f = millis_timer_fract;
     a48:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <millis_timer_fract>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:319
    static unsigned char correct_exact = 0;     // rollover intended
    if (++correct_exact < CORRECT_EXACT_MANY) {
      ++f;
    }
#endif
    f += FRACT_INC;
     a4c:	23 e0       	ldi	r18, 0x03	; 3
     a4e:	23 0f       	add	r18, r19
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:321

    if (f >= FRACT_MAX)
     a50:	2d 37       	cpi	r18, 0x7D	; 125
     a52:	68 f1       	brcs	.+90     	; 0xaae <__vector_5+0x8c>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:323
    {
      f -= FRACT_MAX;
     a54:	26 e8       	ldi	r18, 0x86	; 134
     a56:	23 0f       	add	r18, r19
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:324
      m += MILLIS_INC + 1;
     a58:	02 96       	adiw	r24, 0x02	; 2
     a5a:	a1 1d       	adc	r26, r1
     a5c:	b1 1d       	adc	r27, r1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:331
    else
    {
      m += MILLIS_INC;
    }

    millis_timer_fract = f;
     a5e:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <millis_timer_fract>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:332
    millis_timer_millis = m;
     a62:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <millis_timer_millis>
     a66:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <millis_timer_millis+0x1>
     a6a:	a0 93 75 01 	sts	0x0175, r26	; 0x800175 <millis_timer_millis+0x2>
     a6e:	b0 93 76 01 	sts	0x0176, r27	; 0x800176 <millis_timer_millis+0x3>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:334
#ifndef CORRECT_EXACT_MICROS
    millis_timer_overflow_count++;
     a72:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <millis_timer_overflow_count>
     a76:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <millis_timer_overflow_count+0x1>
     a7a:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <millis_timer_overflow_count+0x2>
     a7e:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <millis_timer_overflow_count+0x3>
     a82:	01 96       	adiw	r24, 0x01	; 1
     a84:	a1 1d       	adc	r26, r1
     a86:	b1 1d       	adc	r27, r1
     a88:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <millis_timer_overflow_count>
     a8c:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <millis_timer_overflow_count+0x1>
     a90:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <millis_timer_overflow_count+0x2>
     a94:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <millis_timer_overflow_count+0x3>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:336
#endif
  }
     a98:	bf 91       	pop	r27
     a9a:	af 91       	pop	r26
     a9c:	9f 91       	pop	r25
     a9e:	8f 91       	pop	r24
     aa0:	3f 91       	pop	r19
     aa2:	2f 91       	pop	r18
     aa4:	0f 90       	pop	r0
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	0f 90       	pop	r0
     aaa:	1f 90       	pop	r1
     aac:	18 95       	reti
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:328
      f -= FRACT_MAX;
      m += MILLIS_INC + 1;
    }
    else
    {
      m += MILLIS_INC;
     aae:	01 96       	adiw	r24, 0x01	; 1
     ab0:	a1 1d       	adc	r26, r1
     ab2:	b1 1d       	adc	r27, r1
     ab4:	d4 cf       	rjmp	.-88     	; 0xa5e <__vector_5+0x3c>

00000ab6 <__vector_2>:
__vector_2():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:227
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     ab6:	1f 92       	push	r1
     ab8:	0f 92       	push	r0
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	0f 92       	push	r0
     abe:	11 24       	eor	r1, r1
     ac0:	2f 93       	push	r18
     ac2:	3f 93       	push	r19
     ac4:	4f 93       	push	r20
     ac6:	5f 93       	push	r21
     ac8:	6f 93       	push	r22
     aca:	7f 93       	push	r23
     acc:	8f 93       	push	r24
     ace:	9f 93       	push	r25
     ad0:	af 93       	push	r26
     ad2:	bf 93       	push	r27
     ad4:	ef 93       	push	r30
     ad6:	ff 93       	push	r31
_ZN14SoftwareSerial16handle_interruptEv():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:219
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     ad8:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <SoftwareSerial::active_object>
     adc:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <SoftwareSerial::active_object+0x1>
     ae0:	30 97       	sbiw	r30, 0x00	; 0
     ae2:	49 f0       	breq	.+18     	; 0xaf6 <__vector_2+0x40>
     ae4:	a6 85       	ldd	r26, Z+14	; 0x0e
     ae6:	b7 85       	ldd	r27, Z+15	; 0x0f
     ae8:	85 85       	ldd	r24, Z+13	; 0x0d
recv():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:144

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     aea:	96 8d       	ldd	r25, Z+30	; 0x1e
     aec:	91 ff       	sbrs	r25, 1
     aee:	14 c0       	rjmp	.+40     	; 0xb18 <__vector_2+0x62>
rx_pin_read():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:209
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     af0:	9c 91       	ld	r25, X
     af2:	89 23       	and	r24, r25
recv():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:144

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     af4:	a1 f4       	brne	.+40     	; 0xb1e <__vector_2+0x68>
__vector_2():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:229

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     af6:	ff 91       	pop	r31
     af8:	ef 91       	pop	r30
     afa:	bf 91       	pop	r27
     afc:	af 91       	pop	r26
     afe:	9f 91       	pop	r25
     b00:	8f 91       	pop	r24
     b02:	7f 91       	pop	r23
     b04:	6f 91       	pop	r22
     b06:	5f 91       	pop	r21
     b08:	4f 91       	pop	r20
     b0a:	3f 91       	pop	r19
     b0c:	2f 91       	pop	r18
     b0e:	0f 90       	pop	r0
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	0f 90       	pop	r0
     b14:	1f 90       	pop	r1
     b16:	18 95       	reti
rx_pin_read():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:209
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     b18:	9c 91       	ld	r25, X
     b1a:	89 23       	and	r24, r25
recv():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:144

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     b1c:	61 f7       	brne	.-40     	; 0xaf6 <__vector_2+0x40>
setRxIntMsk():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:380
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     b1e:	a3 89       	ldd	r26, Z+19	; 0x13
     b20:	b4 89       	ldd	r27, Z+20	; 0x14
     b22:	9c 91       	ld	r25, X
     b24:	85 89       	ldd	r24, Z+21	; 0x15
     b26:	80 95       	com	r24
     b28:	89 23       	and	r24, r25
     b2a:	8c 93       	st	X, r24
_delay_loop_2():
c:\users\ian\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     b2c:	86 89       	ldd	r24, Z+22	; 0x16
     b2e:	97 89       	ldd	r25, Z+23	; 0x17
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	f1 f7       	brne	.-4      	; 0xb30 <__vector_2+0x7a>
recv():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:158
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
     b34:	60 8d       	ldd	r22, Z+24	; 0x18
     b36:	71 8d       	ldd	r23, Z+25	; 0x19
rx_pin_read():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:209
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     b38:	a6 85       	ldd	r26, Z+14	; 0x0e
     b3a:	b7 85       	ldd	r27, Z+15	; 0x0f
     b3c:	55 85       	ldd	r21, Z+13	; 0x0d
     b3e:	38 e0       	ldi	r19, 0x08	; 8
__vector_2():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:140
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif

  uint8_t d = 0;
     b40:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
c:\users\ian\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     b42:	cb 01       	movw	r24, r22
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	f1 f7       	brne	.-4      	; 0xb44 <__vector_2+0x8e>
recv():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:159

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
     b48:	82 2f       	mov	r24, r18
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	95 95       	asr	r25
     b4e:	87 95       	ror	r24
     b50:	28 2f       	mov	r18, r24
rx_pin_read():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:209
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     b52:	4c 91       	ld	r20, X
     b54:	45 23       	and	r20, r21
recv():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:161
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
     b56:	09 f0       	breq	.+2      	; 0xb5a <__vector_2+0xa4>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:162
        d |= 0x80;
     b58:	20 68       	ori	r18, 0x80	; 128
     b5a:	31 50       	subi	r19, 0x01	; 1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:156
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     b5c:	91 f7       	brne	.-28     	; 0xb42 <__vector_2+0x8c>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:165
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     b5e:	86 8d       	ldd	r24, Z+30	; 0x1e
     b60:	81 fd       	sbrc	r24, 1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:166
      d = ~d;
     b62:	20 95       	com	r18
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:169

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     b64:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <SoftwareSerial::_receive_buffer_tail>
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	8f 73       	andi	r24, 0x3F	; 63
     b6e:	99 27       	eor	r25, r25
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:170
    if (next != _receive_buffer_head)
     b70:	30 91 6f 01 	lds	r19, 0x016F	; 0x80016f <SoftwareSerial::_receive_buffer_head>
     b74:	38 17       	cp	r19, r24
     b76:	99 f0       	breq	.+38     	; 0xb9e <__vector_2+0xe8>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:173
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     b78:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <SoftwareSerial::_receive_buffer_tail>
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	a6 5d       	subi	r26, 0xD6	; 214
     b80:	be 4f       	sbci	r27, 0xFE	; 254
     b82:	2c 93       	st	X, r18
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:174
      _receive_buffer_tail = next;
     b84:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
c:\users\ian\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     b88:	82 8d       	ldd	r24, Z+26	; 0x1a
     b8a:	93 8d       	ldd	r25, Z+27	; 0x1b
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	f1 f7       	brne	.-4      	; 0xb8c <__vector_2+0xd6>
setRxIntMsk():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:378
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
     b90:	a3 89       	ldd	r26, Z+19	; 0x13
     b92:	b4 89       	ldd	r27, Z+20	; 0x14
     b94:	8c 91       	ld	r24, X
     b96:	95 89       	ldd	r25, Z+21	; 0x15
     b98:	89 2b       	or	r24, r25
     b9a:	8c 93       	st	X, r24
     b9c:	ac cf       	rjmp	.-168    	; 0xaf6 <__vector_2+0x40>
recv():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:179
      _receive_buffer_tail = next;
    }
    else
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
     b9e:	86 8d       	ldd	r24, Z+30	; 0x1e
     ba0:	81 60       	ori	r24, 0x01	; 1
     ba2:	86 8f       	std	Z+30, r24	; 0x1e
     ba4:	f1 cf       	rjmp	.-30     	; 0xb88 <__vector_2+0xd2>

00000ba6 <countPulseASM>:
countPulseASM():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:70

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
     ba6:	cf 92       	push	r12
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:71
    push r13   ;   ;  131 pushqi1/1 [length = 1]
     ba8:	df 92       	push	r13
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:72
    push r14   ;   ;  132 pushqi1/1 [length = 1]
     baa:	ef 92       	push	r14
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:73
    push r15   ;   ;  133 pushqi1/1 [length = 1]
     bac:	ff 92       	push	r15
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:74
    push r16   ;   ;  134 pushqi1/1 [length = 1]
     bae:	0f 93       	push	r16
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:75
    push r17   ;   ;  135 pushqi1/1 [length = 1]
     bb0:	1f 93       	push	r17
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:80
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
     bb2:	e8 2f       	mov	r30, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:81
    mov r31,r25  ;  port, port
     bb4:	f9 2f       	mov	r31, r25
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:87
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
     bb6:	08 c0       	rjmp	.+16     	; 0xbc8 <countPulseASM+0x22>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:91
.L4:
/*         if (--maxloops == 0) */
.LM2:
    rjmp .LM2A ; waste an extra 5 cycles
     bb8:	00 c0       	rjmp	.+0      	; 0xbba <countPulseASM+0x14>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:93
.LM2A:
    rjmp .LM2B ;
     bba:	00 c0       	rjmp	.+0      	; 0xbbc <countPulseASM+0x16>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:95
.LM2B:
    nop ;
     bbc:	00 00       	nop
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:96
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
     bbe:	01 50       	subi	r16, 0x01	; 1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:97
    sbc r17, r1   ;  maxloops
     bc0:	11 09       	sbc	r17, r1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:98
    sbc r18, r1   ;  maxloops
     bc2:	21 09       	sbc	r18, r1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:99
    sbc r19, r1   ;  maxloops
     bc4:	31 09       	sbc	r19, r1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:100
    breq .L13  ; ,   ;  19  branch  [length = 1]
     bc6:	49 f1       	breq	.+82     	; 0xc1a <countPulseASM+0x74>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:104
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
     bc8:	90 81       	ld	r25, Z
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:105
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
     bca:	96 23       	and	r25, r22
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:106
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
     bcc:	94 17       	cp	r25, r20
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:107
    breq .L4   ; ,   ;  26  branch  [length = 1]
     bce:	a1 f3       	breq	.-24     	; 0xbb8 <countPulseASM+0x12>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:108
    rjmp .L6   ;   ;  184 jump  [length = 1]
     bd0:	08 c0       	rjmp	.+16     	; 0xbe2 <countPulseASM+0x3c>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:117
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    rjmp .LM4A ; waste an extra 5 cycles
     bd2:	00 c0       	rjmp	.+0      	; 0xbd4 <countPulseASM+0x2e>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:119
.LM4A:
    rjmp .LM4B ;
     bd4:	00 c0       	rjmp	.+0      	; 0xbd6 <countPulseASM+0x30>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:121
.LM4B:
    nop ;
     bd6:	00 00       	nop
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:122
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
     bd8:	01 50       	subi	r16, 0x01	; 1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:123
    sbc r17, r1   ;  maxloops
     bda:	11 09       	sbc	r17, r1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:124
    sbc r18, r1   ;  maxloops
     bdc:	21 09       	sbc	r18, r1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:125
    sbc r19, r1   ;  maxloops
     bde:	31 09       	sbc	r19, r1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:126
    breq .L13  ; ,   ;  33  branch  [length = 1]
     be0:	e1 f0       	breq	.+56     	; 0xc1a <countPulseASM+0x74>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:130
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
     be2:	90 81       	ld	r25, Z
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:131
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
     be4:	96 23       	and	r25, r22
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:132
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
     be6:	94 13       	cpse	r25, r20
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:133
    rjmp .L7   ;
     be8:	f4 cf       	rjmp	.-24     	; 0xbd2 <countPulseASM+0x2c>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:134
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
     bea:	c1 2c       	mov	r12, r1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:135
    mov r13, r1   ;  width
     bec:	d1 2c       	mov	r13, r1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:136
    mov r14, r1   ;  width
     bee:	e1 2c       	mov	r14, r1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:137
    mov r15, r1   ;  width
     bf0:	f1 2c       	mov	r15, r1
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:138
    rjmp .L9   ;   ;  186 jump  [length = 1]
     bf2:	0a c0       	rjmp	.+20     	; 0xc08 <countPulseASM+0x62>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:147
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
     bf4:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:148
    sub r12,r24  ;  width,
     bf6:	c8 1a       	sub	r12, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:149
    sbc r13,r24  ;  width,
     bf8:	d8 0a       	sbc	r13, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:150
    sbc r14,r24  ;  width,
     bfa:	e8 0a       	sbc	r14, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:151
    sbc r15,r24  ;  width,
     bfc:	f8 0a       	sbc	r15, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:152
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
     bfe:	0c 15       	cp	r16, r12
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:153
    cpc r17,r13  ;  maxloops, width
     c00:	1d 05       	cpc	r17, r13
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:154
    cpc r18,r14  ;  maxloops, width
     c02:	2e 05       	cpc	r18, r14
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:155
    cpc r19,r15  ;  maxloops, width
     c04:	3f 05       	cpc	r19, r15
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:156
    breq .L13  ; ,   ;  52  branch  [length = 1]
     c06:	49 f0       	breq	.+18     	; 0xc1a <countPulseASM+0x74>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:160
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
     c08:	80 81       	ld	r24, Z
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:161
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
     c0a:	86 23       	and	r24, r22
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:162
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
     c0c:	84 17       	cp	r24, r20
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:163
    breq .L10  ; ,   ;  64  branch  [length = 1]
     c0e:	91 f3       	breq	.-28     	; 0xbf4 <countPulseASM+0x4e>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:169
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
     c10:	6c 2d       	mov	r22, r12
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:170
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
     c12:	7d 2d       	mov	r23, r13
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:171
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
     c14:	8e 2d       	mov	r24, r14
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:172
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
     c16:	9f 2d       	mov	r25, r15
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:173
    rjmp .LM11 ;
     c18:	04 c0       	rjmp	.+8      	; 0xc22 <countPulseASM+0x7c>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:177
/* epilogue start */
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
     c1a:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:178
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
     c1c:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:179
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
     c1e:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:180
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
     c20:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:183
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
     c22:	1f 91       	pop	r17
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:184
    pop r16  ;   ;  139 popqi [length = 1]
     c24:	0f 91       	pop	r16
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:185
    pop r15  ;   ;  140 popqi [length = 1]
     c26:	ff 90       	pop	r15
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:186
    pop r14  ;   ;  141 popqi [length = 1]
     c28:	ef 90       	pop	r14
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:187
    pop r13  ;   ;  142 popqi [length = 1]
     c2a:	df 90       	pop	r13
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:188
    pop r12  ;   ;  143 popqi [length = 1]
     c2c:	cf 90       	pop	r12
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring_pulse.S:189
    ret  ;  144 return_from_epilogue  [length = 1]
     c2e:	08 95       	ret

00000c30 <global constructors keyed to 65535_0_RCSounds_V1.0.ino.cpp.o.2270>:
_GLOBAL__I_65535_0_RCSounds_V1.0.ino.cpp.o.2270():
     c30:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <Serial+0x3>
     c34:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <Serial+0x2>
     c38:	88 ee       	ldi	r24, 0xE8	; 232
     c3a:	93 e0       	ldi	r25, 0x03	; 3
     c3c:	a0 e0       	ldi	r26, 0x00	; 0
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <Serial+0x4>
     c44:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <Serial+0x5>
     c48:	a0 93 b2 01 	sts	0x01B2, r26	; 0x8001b2 <Serial+0x6>
     c4c:	b0 93 b3 01 	sts	0x01B3, r27	; 0x8001b3 <Serial+0x7>
     c50:	24 e6       	ldi	r18, 0x64	; 100
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	30 93 ad 01 	sts	0x01AD, r19	; 0x8001ad <Serial+0x1>
     c58:	20 93 ac 01 	sts	0x01AC, r18	; 0x8001ac <Serial>
     c5c:	28 e8       	ldi	r18, 0x88	; 136
     c5e:	31 e0       	ldi	r19, 0x01	; 1
     c60:	30 93 bc 01 	sts	0x01BC, r19	; 0x8001bc <Serial+0x10>
     c64:	20 93 bb 01 	sts	0x01BB, r18	; 0x8001bb <Serial+0xf>
     c68:	22 e0       	ldi	r18, 0x02	; 2
     c6a:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <Serial+0xc>
     c6e:	61 e0       	ldi	r22, 0x01	; 1
     c70:	60 93 b9 01 	sts	0x01B9, r22	; 0x8001b9 <Serial+0xd>
     c74:	2e ef       	ldi	r18, 0xFE	; 254
     c76:	20 93 ba 01 	sts	0x01BA, r18	; 0x8001ba <Serial+0xe>
     c7a:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <Serial+0x11>
     c7e:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <mySerial+0x3>
     c82:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <mySerial+0x2>
     c86:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <mySerial+0x4>
     c8a:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <mySerial+0x5>
     c8e:	a0 93 ee 01 	sts	0x01EE, r26	; 0x8001ee <mySerial+0x6>
     c92:	b0 93 ef 01 	sts	0x01EF, r27	; 0x8001ef <mySerial+0x7>
     c96:	84 e7       	ldi	r24, 0x74	; 116
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <mySerial+0x1>
     c9e:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <mySerial>
     ca2:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <mySerial+0x17>
     ca6:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <mySerial+0x16>
     caa:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <mySerial+0x19>
     cae:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <mySerial+0x18>
     cb2:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <mySerial+0x1b>
     cb6:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <mySerial+0x1a>
     cba:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <mySerial+0x1d>
     cbe:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <mySerial+0x1c>
     cc2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <mySerial+0x1e>
     cc6:	8e 7f       	andi	r24, 0xFE	; 254
     cc8:	8d 7f       	andi	r24, 0xFD	; 253
     cca:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <mySerial+0x1e>
     cce:	86 95       	lsr	r24
     cd0:	81 70       	andi	r24, 0x01	; 1
     cd2:	68 27       	eor	r22, r24
     cd4:	83 e0       	ldi	r24, 0x03	; 3
     cd6:	e9 db       	rcall	.-2094   	; 0x4aa <digitalWrite>
     cd8:	61 e0       	ldi	r22, 0x01	; 1
     cda:	83 e0       	ldi	r24, 0x03	; 3
     cdc:	22 dc       	rcall	.-1980   	; 0x522 <pinMode>
     cde:	88 e0       	ldi	r24, 0x08	; 8
     ce0:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <mySerial+0x10>
     ce4:	88 e3       	ldi	r24, 0x38	; 56
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <mySerial+0x12>
     cec:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <mySerial+0x11>
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	84 e0       	ldi	r24, 0x04	; 4
     cf4:	16 dc       	rcall	.-2004   	; 0x522 <pinMode>
     cf6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <mySerial+0x1e>
     cfa:	81 fd       	sbrc	r24, 1
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <global constructors keyed to 65535_0_RCSounds_V1.0.ino.cpp.o.2270+0xd4>
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	84 e0       	ldi	r24, 0x04	; 4
     d02:	d3 db       	rcall	.-2138   	; 0x4aa <digitalWrite>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <mySerial+0xc>
     d0a:	80 e1       	ldi	r24, 0x10	; 16
     d0c:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <mySerial+0xd>
     d10:	86 e3       	ldi	r24, 0x36	; 54
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <mySerial+0xf>
     d18:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <mySerial+0xe>
     d1c:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <myMP3+0x17>
     d20:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <myMP3+0x18>
     d24:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <myMP3+0x19>
     d28:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <myMP3+0x1a>
     d2c:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <myMP3+0x1b>
     d30:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <myMP3+0x1c>
     d34:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <myMP3+0x1d>
     d38:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <myMP3+0x1e>
     d3c:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <myMP3+0x1f>
     d40:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <myMP3+0x20>
     d44:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <myMP3+0x21>
     d48:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <myMP3+0x22>
     d4c:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <myMP3+0x23>
     d50:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <myMP3+0x29>
     d54:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <myMP3+0x28>
     d58:	08 95       	ret

00000d5a <main>:
init():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:1138
*/

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
    #if defined(WGM01) // if Timer0 has PWM
      TCCR0A = (1<<WGM01) | (1<<WGM00);
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8a bd       	out	0x2a, r24	; 42
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:1141
    #endif
    #if defined(TCCR0B) //The x61 has a wacky Timer0!
      TCCR0B = (MillisTimer_Prescale_Index << CS00);
     d5e:	83 bf       	out	0x33, r24	; 51
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:1162
    TCCR1A = 1<<WGM10;
    TCCR1B = (1<<WGM12) | (MillisTimer_Prescale_Index << CS10);
  #endif

  // this needs to be called before setup() or some functions won't work there
  sei();
     d60:	78 94       	sei
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:1167

  #ifndef DISABLEMILLIS
    // Enable the overflow interrupt (this is the basic system tic-toc for millis)
    #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK, TOIE0);
     d62:	89 b7       	in	r24, 0x39	; 57
     d64:	82 60       	ori	r24, 0x02	; 2
     d66:	89 bf       	out	0x39, r24	; 57
initToneTimerInternal():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:958
    #elif defined(__AVR_ATtiny43__)
      TCCR1A = 3; //WGM 10=1, WGM11=1
      TCCR1B = 3; //prescaler of 64
    #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1) // ATtiny x5
      // Use the Tone Timer for fast PWM as phase correct not supported by this timer
      GTCCR = (1<<PWM1B);
     d68:	80 e4       	ldi	r24, 0x40	; 64
     d6a:	8c bd       	out	0x2c, r24	; 44
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:959
      OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
     d6c:	8f ef       	ldi	r24, 0xFF	; 255
     d6e:	8d bd       	out	0x2d, r24	; 45
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:960
      TCCR1 = (1<<CTC1) | (1<<PWM1A) | (ToneTimer_Prescale_Index << CS10);
     d70:	87 ec       	ldi	r24, 0xC7	; 199
     d72:	80 bf       	out	0x30, r24	; 48
init():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:1214
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
    #if defined(ADCSRA)
      // set a2d prescale factor
      // ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
      // dude, this is being called on startup. We know that ADCSRA is 0! Why add a RMW cycle?!
      ADCSRA = (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
     d74:	87 e8       	ldi	r24, 0x87	; 135
     d76:	86 b9       	out	0x06, r24	; 6
begin():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:304
// Public methods
//

void SoftwareSerial::begin(long speed)
{
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     d78:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <mySerial+0x1b>
     d7c:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <mySerial+0x1a>
     d80:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <mySerial+0x19>
     d84:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <mySerial+0x18>
     d88:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <mySerial+0x17>
     d8c:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <mySerial+0x16>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:314
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
     d90:	8d e9       	ldi	r24, 0x9D	; 157
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <mySerial+0x1d>
     d98:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <mySerial+0x1c>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:317

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
     d9c:	30 91 f4 01 	lds	r19, 0x01F4	; 0x8001f4 <mySerial+0xc>
     da0:	36 30       	cpi	r19, 0x06	; 6
     da2:	20 f5       	brcc	.+72     	; 0xdec <main+0x92>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:332
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     da4:	4d eb       	ldi	r20, 0xBD	; 189
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	50 93 ff 01 	sts	0x01FF, r21	; 0x8001ff <mySerial+0x17>
     dac:	40 93 fe 01 	sts	0x01FE, r20	; 0x8001fe <mySerial+0x16>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:335

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
     db0:	4b e9       	ldi	r20, 0x9B	; 155
     db2:	51 e0       	ldi	r21, 0x01	; 1
     db4:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <mySerial+0x19>
     db8:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <mySerial+0x18>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:344
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     dbc:	4c e2       	ldi	r20, 0x2C	; 44
     dbe:	51 e0       	ldi	r21, 0x01	; 1
     dc0:	50 93 03 02 	sts	0x0203, r21	; 0x800203 <mySerial+0x1b>
     dc4:	40 93 02 02 	sts	0x0202, r20	; 0x800202 <mySerial+0x1a>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:358


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     dc8:	2b b7       	in	r18, 0x3b	; 59
     dca:	20 62       	ori	r18, 0x20	; 32
     dcc:	2b bf       	out	0x3b, r18	; 59
main():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:361
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
     dce:	45 e3       	ldi	r20, 0x35	; 53
     dd0:	50 e0       	ldi	r21, 0x00	; 0
begin():
     dd2:	50 93 fc 01 	sts	0x01FC, r21	; 0x8001fc <mySerial+0x14>
     dd6:	40 93 fb 01 	sts	0x01FB, r20	; 0x8001fb <mySerial+0x13>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:362
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
     dda:	21 e0       	ldi	r18, 0x01	; 1
     ddc:	01 c0       	rjmp	.+2      	; 0xde0 <main+0x86>
     dde:	22 0f       	add	r18, r18
     de0:	3a 95       	dec	r19
     de2:	ea f7       	brpl	.-6      	; 0xdde <main+0x84>
     de4:	20 93 fd 01 	sts	0x01FD, r18	; 0x8001fd <mySerial+0x15>
_delay_loop_2():
c:\users\ian\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <main+0x8e>
listen():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:87

// This function sets the current object as the "listening"
// one and returns true if it replaces another
bool SoftwareSerial::listen()
{
  if (!_rx_delay_stopbit)
     dec:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <mySerial+0x1a>
     df0:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <mySerial+0x1b>
     df4:	89 2b       	or	r24, r25
     df6:	49 f1       	breq	.+82     	; 0xe4a <main+0xf0>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:90
    return false;

  if (active_object != this)
     df8:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <SoftwareSerial::active_object>
     dfc:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <SoftwareSerial::active_object+0x1>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	e8 3e       	cpi	r30, 0xE8	; 232
     e04:	f8 07       	cpc	r31, r24
     e06:	09 f1       	breq	.+66     	; 0xe4a <main+0xf0>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:92
  {
    if (active_object)
     e08:	30 97       	sbiw	r30, 0x00	; 0
     e0a:	39 f0       	breq	.+14     	; 0xe1a <main+0xc0>
setRxIntMsk():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:380
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     e0c:	a3 89       	ldd	r26, Z+19	; 0x13
     e0e:	b4 89       	ldd	r27, Z+20	; 0x14
     e10:	9c 91       	ld	r25, X
     e12:	85 89       	ldd	r24, Z+21	; 0x15
     e14:	80 95       	com	r24
     e16:	89 23       	and	r24, r25
     e18:	8c 93       	st	X, r24
listen():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:95
  if (active_object != this)
  {
    if (active_object)
      active_object->stopListening();

    _buffer_overflow = false;
     e1a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <mySerial+0x1e>
     e1e:	8e 7f       	andi	r24, 0xFE	; 254
     e20:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <mySerial+0x1e>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:96
    _receive_buffer_head = _receive_buffer_tail = 0;
     e24:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <SoftwareSerial::_receive_buffer_tail>
     e28:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <SoftwareSerial::_receive_buffer_head>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:97
    active_object = this;
     e2c:	88 ee       	ldi	r24, 0xE8	; 232
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <SoftwareSerial::active_object+0x1>
     e34:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <SoftwareSerial::active_object>
setRxIntMsk():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:378
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
     e38:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <mySerial+0x13>
     e3c:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <mySerial+0x14>
     e40:	80 81       	ld	r24, Z
     e42:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <mySerial+0x15>
     e46:	89 2b       	or	r24, r25
     e48:	80 83       	st	Z, r24
begin():
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:57
	 @return True.
 */
 /**************************************************************************/
bool DFPlayerMini_Fast::begin(Stream &stream, bool debug, unsigned long threshold)
{
	_threshold = threshold;
     e4a:	84 e6       	ldi	r24, 0x64	; 100
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	a0 e0       	ldi	r26, 0x00	; 0
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <myMP3+0x24>
     e56:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <myMP3+0x25>
     e5a:	a0 93 e4 01 	sts	0x01E4, r26	; 0x8001e4 <myMP3+0x26>
     e5e:	b0 93 e5 01 	sts	0x01E5, r27	; 0x8001e5 <myMP3+0x27>
C:\Users\Ian\Dropbox\Arduino\libraries\FireTimer\src/FireTimer.cpp:24
 -------
  * void
*/
void FireTimer::begin(const ulong &timeout, const bool &micros)
{
	us = micros;
     e62:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <myMP3+0x17>
update():
C:\Users\Ian\Dropbox\Arduino\libraries\FireTimer\src/FireTimer.cpp:48
 -------
  * void
*/
void FireTimer::update(const ulong &timeout)
{
	period = timeout;
     e66:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <myMP3+0x20>
     e6a:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <myMP3+0x21>
     e6e:	a0 93 e0 01 	sts	0x01E0, r26	; 0x8001e0 <myMP3+0x22>
     e72:	b0 93 e1 01 	sts	0x01E1, r27	; 0x8001e1 <myMP3+0x23>
millis():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:341
  }

  unsigned long millis()
  {
    unsigned long m;
    uint8_t oldSREG = SREG;
     e76:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:345

    // disable interrupts while we read millis_timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
    cli();
     e78:	f8 94       	cli
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:346
    m = millis_timer_millis;
     e7a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <millis_timer_millis>
     e7e:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <millis_timer_millis+0x1>
     e82:	a0 91 75 01 	lds	r26, 0x0175	; 0x800175 <millis_timer_millis+0x2>
     e86:	b0 91 76 01 	lds	r27, 0x0176	; 0x800176 <millis_timer_millis+0x3>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:347
    SREG = oldSREG;
     e8a:	2f bf       	out	0x3f, r18	; 63
start():
C:\Users\Ian\Dropbox\Arduino\libraries\FireTimer\src/FireTimer.cpp:75
void FireTimer::start()
{
	if (us)
		timeBench = micros();
	else
		timeBench = millis();
     e8c:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <myMP3+0x1c>
     e90:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <myMP3+0x1d>
     e94:	a0 93 dc 01 	sts	0x01DC, r26	; 0x8001dc <myMP3+0x1e>
     e98:	b0 93 dd 01 	sts	0x01DD, r27	; 0x8001dd <myMP3+0x1f>
begin():
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:60
	timoutTimer.begin(_threshold);

	_serial = &stream;
     e9c:	88 ee       	ldi	r24, 0xE8	; 232
     e9e:	91 e0       	ldi	r25, 0x01	; 1
     ea0:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <myMP3+0x1>
     ea4:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <myMP3>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:62

	_debug = debug;
     ea8:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <myMP3+0x16>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:64

	sendStack.start_byte = dfplayer::SB;
     eac:	2e e7       	ldi	r18, 0x7E	; 126
     eae:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <myMP3+0x2>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:65
	sendStack.version    = dfplayer::VER;
     eb2:	9f ef       	ldi	r25, 0xFF	; 255
     eb4:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <myMP3+0x3>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:66
	sendStack.length     = dfplayer::LEN;
     eb8:	c6 e0       	ldi	r28, 0x06	; 6
     eba:	c0 93 c2 01 	sts	0x01C2, r28	; 0x8001c2 <myMP3+0x4>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:67
	sendStack.end_byte   = dfplayer::EB;
     ebe:	8f ee       	ldi	r24, 0xEF	; 239
     ec0:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <myMP3+0xb>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:69

	recStack.start_byte  = dfplayer::SB;
     ec4:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <myMP3+0xc>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:70
	recStack.version     = dfplayer::VER;
     ec8:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <myMP3+0xd>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:71
	recStack.length      = dfplayer::LEN;
     ecc:	c0 93 cc 01 	sts	0x01CC, r28	; 0x8001cc <myMP3+0xe>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:72
	recStack.end_byte    = dfplayer::EB;
     ed0:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <myMP3+0x15>
setup():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:126
void setup()
{
  unsigned char LimLo, LimHi;
  mySerial.begin(9600);
  myMP3.begin(mySerial);
  delay(1000);
     ed4:	68 ee       	ldi	r22, 0xE8	; 232
     ed6:	73 e0       	ldi	r23, 0x03	; 3
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	be d9       	rcall	.-3204   	; 0x25a <delay>
volume():
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:268
 /**************************************************************************/
void DFPlayerMini_Fast::volume(uint8_t volume)
{
	if (volume <= 30)
	{
		sendStack.commandValue  = dfplayer::VOLUME;
     ede:	c0 93 c3 01 	sts	0x01C3, r28	; 0x8001c3 <myMP3+0x5>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:269
		sendStack.feedbackValue = dfplayer::NO_FEEDBACK;
     ee2:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <myMP3+0x6>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:270
		sendStack.paramMSB = 0;
     ee6:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <myMP3+0x7>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:271
		sendStack.paramLSB = volume;
     eea:	8c e1       	ldi	r24, 0x1C	; 28
     eec:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <myMP3+0x8>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:273

		findChecksum(sendStack);
     ef0:	cd d8       	rcall	.-3686   	; 0x8c <DFPlayerMini_Fast::findChecksum(DFPlayerMini_Fast::stack&) [clone .constprop.30]>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:274
		sendData();
     ef2:	1c dc       	rcall	.-1992   	; 0x72c <DFPlayerMini_Fast::sendData() [clone .constprop.31]>
setup():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:128
  myMP3.volume(28);
  delay(100);
     ef4:	64 e6       	ldi	r22, 0x64	; 100
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	ae d9       	rcall	.-3236   	; 0x25a <delay>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:132
  
  //myMP3.play(1);
  //myMP3.loop(1);
  pinMode(SEL_HORN, INPUT_PULLUP); 
     efe:	62 e0       	ldi	r22, 0x02	; 2
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	0f db       	rcall	.-2530   	; 0x522 <pinMode>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:135

  // See if LED works in setup
  pinMode(LEDPIN,OUTPUT);
     f04:	61 e0       	ldi	r22, 0x01	; 1
     f06:	82 e0       	ldi	r24, 0x02	; 2
     f08:	0c db       	rcall	.-2536   	; 0x522 <pinMode>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:136
  digitalWrite(LEDPIN,LEDON);
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	cd da       	rcall	.-2662   	; 0x4aa <digitalWrite>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:137
  delay(250);
     f10:	6a ef       	ldi	r22, 0xFA	; 250
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	a0 d9       	rcall	.-3264   	; 0x25a <delay>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:138
  digitalWrite(LEDPIN,LEDOFF);
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	c5 da       	rcall	.-2678   	; 0x4aa <digitalWrite>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:139
  delay(250);
     f20:	6a ef       	ldi	r22, 0xFA	; 250
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	98 d9       	rcall	.-3280   	; 0x25a <delay>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:140
  digitalWrite(LEDPIN,LEDON);
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	bd da       	rcall	.-2694   	; 0x4aa <digitalWrite>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:141
  delay(250);
     f30:	6a ef       	ldi	r22, 0xFA	; 250
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	90 d9       	rcall	.-3296   	; 0x25a <delay>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:142
  digitalWrite(LEDPIN,LEDOFF);
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	b5 da       	rcall	.-2710   	; 0x4aa <digitalWrite>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:144

 Scaled_V=AvgADCRead(SELECTION_IN);
     f40:	b6 d9       	rcall	.-3220   	; 0x2ae <AvgADCRead(unsigned char) [clone .constprop.18]>
     f42:	6b 01       	movw	r12, r22
     f44:	7c 01       	movw	r14, r24
     f46:	c0 92 7c 01 	sts	0x017C, r12	; 0x80017c <Scaled_V>
     f4a:	d0 92 7d 01 	sts	0x017D, r13	; 0x80017d <Scaled_V+0x1>
     f4e:	e0 92 7e 01 	sts	0x017E, r14	; 0x80017e <Scaled_V+0x2>
     f52:	f0 92 7f 01 	sts	0x017F, r15	; 0x80017f <Scaled_V+0x3>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:145
  if (Scaled_V>SETUP_LOWER & Scaled_V<SETUP_UPPER)
     f56:	26 e6       	ldi	r18, 0x66	; 102
     f58:	36 e6       	ldi	r19, 0x66	; 102
     f5a:	46 ea       	ldi	r20, 0xA6	; 166
     f5c:	5f e3       	ldi	r21, 0x3F	; 63
     f5e:	86 d4       	rcall	.+2316   	; 0x186c <__gesf2>
     f60:	18 16       	cp	r1, r24
     f62:	0c f0       	brlt	.+2      	; 0xf66 <main+0x20c>
     f64:	91 c0       	rjmp	.+290    	; 0x1088 <main+0x32e>
     f66:	2d ec       	ldi	r18, 0xCD	; 205
     f68:	3c ec       	ldi	r19, 0xCC	; 204
     f6a:	4c ec       	ldi	r20, 0xCC	; 204
     f6c:	5f e3       	ldi	r21, 0x3F	; 63
     f6e:	c7 01       	movw	r24, r14
     f70:	b6 01       	movw	r22, r12
     f72:	a6 d2       	rcall	.+1356   	; 0x14c0 <__cmpsf2>
     f74:	87 ff       	sbrs	r24, 7
     f76:	88 c0       	rjmp	.+272    	; 0x1088 <main+0x32e>
DoOnOffSetup():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:233
    unsigned char Byte1, Byte2;
    unsigned char Dbounce1=0, Dbounce2=0;
    unsigned char LED1=0;
    unsigned char i=0;
    float SetupSWVal=0.0;
    digitalWrite(LEDPIN,LEDON);
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	96 da       	rcall	.-2772   	; 0x4aa <digitalWrite>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:234
    Dbounce1=ReadSetupSwitch();
     f7e:	76 da       	rcall	.-2836   	; 0x46c <ReadSetupSwitch()>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:238
    //Wait for switch release
    do
    {
        delay(150);
     f80:	66 e9       	ldi	r22, 0x96	; 150
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	68 d9       	rcall	.-3376   	; 0x25a <delay>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:239
        Dbounce1=ReadSetupSwitch();
     f8a:	70 da       	rcall	.-2848   	; 0x46c <ReadSetupSwitch()>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:241
        
    }while(Dbounce1!=SWITCHCLOSED);
     f8c:	87 37       	cpi	r24, 0x77	; 119
     f8e:	c1 f7       	brne	.-16     	; 0xf80 <main+0x226>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:243
    
    delay(1000);
     f90:	68 ee       	ldi	r22, 0xE8	; 232
     f92:	73 e0       	ldi	r23, 0x03	; 3
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	60 d9       	rcall	.-3392   	; 0x25a <delay>
main():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:230
int DoOnOffSetup()
{
    unsigned int Pulse1, Pulse2;
    unsigned char Byte1, Byte2;
    unsigned char Dbounce1=0, Dbounce2=0;
    unsigned char LED1=0;
     f9a:	c0 e0       	ldi	r28, 0x00	; 0
     f9c:	d1 e0       	ldi	r29, 0x01	; 1
DoOnOffSetup():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:248
    delay(1000);
    
    // Now we need the off position, wait for user to press button
    do
    {
        Dbounce1=ReadSetupSwitch();
     f9e:	66 da       	rcall	.-2868   	; 0x46c <ReadSetupSwitch()>
     fa0:	18 2f       	mov	r17, r24
     fa2:	cd 27       	eor	r28, r29
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:250
        LED1= !LED1; //Toggle LED1
        digitalWrite(LEDPIN,LED1);
     fa4:	6c 2f       	mov	r22, r28
     fa6:	82 e0       	ldi	r24, 0x02	; 2
     fa8:	80 da       	rcall	.-2816   	; 0x4aa <digitalWrite>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:251
        delay(DEBOUNCETIME);
     faa:	68 ec       	ldi	r22, 0xC8	; 200
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	53 d9       	rcall	.-3418   	; 0x25a <delay>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:252
        Dbounce2=ReadSetupSwitch();        
     fb4:	5b da       	rcall	.-2890   	; 0x46c <ReadSetupSwitch()>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:253
    } while(Dbounce1==SWITCHOPEN && Dbounce2==SWITCHOPEN );
     fb6:	16 36       	cpi	r17, 0x66	; 102
     fb8:	11 f4       	brne	.+4      	; 0xfbe <main+0x264>
     fba:	86 36       	cpi	r24, 0x66	; 102
     fbc:	81 f3       	breq	.-32     	; 0xf9e <main+0x244>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:255

    Pulse1=pulseIn(SEL_HORN, HIGH);
     fbe:	ed da       	rcall	.-2598   	; 0x59a <pulseIn.constprop.20>
     fc0:	d6 2f       	mov	r29, r22
     fc2:	06 2f       	mov	r16, r22
     fc4:	17 2f       	mov	r17, r23
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:257

    digitalWrite(LEDPIN,LEDON);
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	6f da       	rcall	.-2850   	; 0x4aa <digitalWrite>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:258
    delay(1000);
     fcc:	68 ee       	ldi	r22, 0xE8	; 232
     fce:	73 e0       	ldi	r23, 0x03	; 3
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	42 d9       	rcall	.-3452   	; 0x25a <delay>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:259
    digitalWrite(LEDPIN,LEDOFF);
     fd6:	61 e0       	ldi	r22, 0x01	; 1
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	67 da       	rcall	.-2866   	; 0x4aa <digitalWrite>
     fdc:	ff 24       	eor	r15, r15
     fde:	f3 94       	inc	r15
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:264
 
    //Now we need the full extent/on value, let user release switch
    do
    {
        Dbounce1=ReadSetupSwitch();
     fe0:	45 da       	rcall	.-2934   	; 0x46c <ReadSetupSwitch()>
     fe2:	e8 2e       	mov	r14, r24
     fe4:	cf 25       	eor	r28, r15
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:266
        LED1=!LED1;
        digitalWrite(LEDPIN,LED1);
     fe6:	6c 2f       	mov	r22, r28
     fe8:	82 e0       	ldi	r24, 0x02	; 2
     fea:	5f da       	rcall	.-2882   	; 0x4aa <digitalWrite>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:267
        delay(DEBOUNCETIME);
     fec:	68 ec       	ldi	r22, 0xC8	; 200
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	32 d9       	rcall	.-3484   	; 0x25a <delay>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:268
        Dbounce2=ReadSetupSwitch();        
     ff6:	3a da       	rcall	.-2956   	; 0x46c <ReadSetupSwitch()>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:269
    } while(Dbounce1==SWITCHCLOSED && Dbounce2==SWITCHCLOSED );      
     ff8:	97 e7       	ldi	r25, 0x77	; 119
     ffa:	e9 12       	cpse	r14, r25
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <main+0x2a8>
     ffe:	87 37       	cpi	r24, 0x77	; 119
    1000:	79 f3       	breq	.-34     	; 0xfe0 <main+0x286>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:271
    
    digitalWrite(LEDPIN,LEDON);
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	82 e0       	ldi	r24, 0x02	; 2
    1006:	51 da       	rcall	.-2910   	; 0x4aa <digitalWrite>
    1008:	ff 24       	eor	r15, r15
    100a:	f3 94       	inc	r15
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:277
    //Now move to final value and close switch.
    // Now we need the off position, wait for user to press button
    
     do
    {
        Dbounce1=ReadSetupSwitch();
    100c:	2f da       	rcall	.-2978   	; 0x46c <ReadSetupSwitch()>
    100e:	e8 2e       	mov	r14, r24
    1010:	cf 25       	eor	r28, r15
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:279
        LED1=!LED1;
        digitalWrite(LEDPIN,LED1);
    1012:	6c 2f       	mov	r22, r28
    1014:	82 e0       	ldi	r24, 0x02	; 2
    1016:	49 da       	rcall	.-2926   	; 0x4aa <digitalWrite>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:280
        delay(DEBOUNCETIME);
    1018:	68 ec       	ldi	r22, 0xC8	; 200
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	1c d9       	rcall	.-3528   	; 0x25a <delay>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:281
        Dbounce2=ReadSetupSwitch();        
    1022:	24 da       	rcall	.-3000   	; 0x46c <ReadSetupSwitch()>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:282
    } while(Dbounce1==SWITCHOPEN && Dbounce2==SWITCHOPEN );  
    1024:	96 e6       	ldi	r25, 0x66	; 102
    1026:	e9 12       	cpse	r14, r25
    1028:	02 c0       	rjmp	.+4      	; 0x102e <main+0x2d4>
    102a:	86 36       	cpi	r24, 0x66	; 102
    102c:	79 f3       	breq	.-34     	; 0x100c <main+0x2b2>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:285
 
    
     Pulse2 = pulseIn(SEL_HORN, HIGH);   // get the timer value
    102e:	b5 da       	rcall	.-2710   	; 0x59a <pulseIn.constprop.20>
    1030:	6b 01       	movw	r12, r22
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:287

     digitalWrite(LEDPIN,LEDOFF);
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	39 da       	rcall	.-2958   	; 0x4aa <digitalWrite>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:288
    delay(1000);
    1038:	68 ee       	ldi	r22, 0xE8	; 232
    103a:	73 e0       	ldi	r23, 0x03	; 3
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0c d9       	rcall	.-3560   	; 0x25a <delay>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:297
     * so we store pulse2 and GREATERTHAN to EEPROM
     * otherwise if pulse2-pulse1 is negative, we are looking for less than pulse 2 so we store pulse2+TimerAdjustmen
     * and LESSTHAN to EEPROM
     */ 
 
    if(Pulse2>Pulse1)
    1042:	0c 15       	cp	r16, r12
    1044:	1d 05       	cpc	r17, r13
    1046:	08 f0       	brcs	.+2      	; 0x104a <main+0x2f0>
    1048:	8f c1       	rjmp	.+798    	; 0x1368 <main+0x60e>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:299
    {
        Pulse2=Pulse2-TimerAdjustment;
    104a:	89 e0       	ldi	r24, 0x09	; 9
    104c:	c8 1a       	sub	r12, r24
    104e:	d1 08       	sbc	r13, r1
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:302
        Byte1=(unsigned char)(Pulse2>>8);
        Byte2=(unsigned char)(Pulse2&0xFF);
        EEPROM.write(0,Byte1);
    1050:	6d 2d       	mov	r22, r13
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	94 dc       	rcall	.-1752   	; 0x980 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:303
        EEPROM.write(1,Byte2);
    1058:	6c 2d       	mov	r22, r12
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	90 dc       	rcall	.-1760   	; 0x980 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:304
        EEPROM.write(2,GREATERTHAN);
    1060:	63 e3       	ldi	r22, 0x33	; 51
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:320
        Pulse2=Pulse2+TimerAdjustment;
        Byte1=(unsigned char)(Pulse2>>8);
        Byte2=(unsigned char)(Pulse2&0xFF);
        EEPROM.write(0,Byte1);
        EEPROM.write(1,Byte2);
        EEPROM.write(2,LESSTHAN);
    1062:	82 e0       	ldi	r24, 0x02	; 2
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	8c dc       	rcall	.-1768   	; 0x980 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:324
        #ifdef DEBUG
        Byte1=(unsigned char)(Pulse1>>8);
        Byte2=(unsigned char)(Pulse1&0xFF);
        EEPROM.write(3,Byte1);
    1068:	61 2f       	mov	r22, r17
    106a:	83 e0       	ldi	r24, 0x03	; 3
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	88 dc       	rcall	.-1776   	; 0x980 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:325
        EEPROM.write(4,Byte2);
    1070:	6d 2f       	mov	r22, r29
    1072:	84 e0       	ldi	r24, 0x04	; 4
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	84 dc       	rcall	.-1784   	; 0x980 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
main():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:230
int DoOnOffSetup()
{
    unsigned int Pulse1, Pulse2;
    unsigned char Byte1, Byte2;
    unsigned char Dbounce1=0, Dbounce2=0;
    unsigned char LED1=0;
    1078:	d4 e0       	ldi	r29, 0x04	; 4
    107a:	11 e0       	ldi	r17, 0x01	; 1
    107c:	c1 27       	eor	r28, r17
DoOnOffSetup():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:332
    }
    //Now flash LEDs to indicate it is done
    for (i=0;i<4;i++)
    {
        LED1=!LED1;
        digitalWrite(LEDPIN,LED1);
    107e:	6c 2f       	mov	r22, r28
    1080:	82 e0       	ldi	r24, 0x02	; 2
    1082:	13 da       	rcall	.-3034   	; 0x4aa <digitalWrite>
    1084:	d1 50       	subi	r29, 0x01	; 1
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:329
        EEPROM.write(3,Byte1);
        EEPROM.write(4,Byte2);
        #endif
    }
    //Now flash LEDs to indicate it is done
    for (i=0;i<4;i++)
    1086:	d1 f7       	brne	.-12     	; 0x107c <main+0x322>
operator*():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	3a d3       	rcall	.+1652   	; 0x1702 <eeprom_read_byte>
    108e:	d8 2f       	mov	r29, r24
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	36 d3       	rcall	.+1644   	; 0x1702 <eeprom_read_byte>
    1096:	c8 2f       	mov	r28, r24
setup():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:152
    DoOnOffSetup();
  }

 LimLo=EEPROM.read(0);
 LimHi=EEPROM.read(1);
 PulseLimit=LimLo | LimHi <<8;
    1098:	98 2f       	mov	r25, r24
    109a:	8d 2f       	mov	r24, r29
    109c:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <PulseLimit+0x1>
    10a0:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <PulseLimit>
operator*():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\EEPROM/EEPROM.h:53
    10a4:	83 e0       	ldi	r24, 0x03	; 3
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	2c d3       	rcall	.+1624   	; 0x1702 <eeprom_read_byte>
setup():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:153
 GreatOrLessThan=EEPROM.read(3);
    10aa:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <GreatOrLessThan>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:155
 #ifdef DEBUG
 mySerial.print("Limlo: ");
    10ae:	6d e8       	ldi	r22, 0x8D	; 141
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	88 ee       	ldi	r24, 0xE8	; 232
    10b4:	91 e0       	ldi	r25, 0x01	; 1
    10b6:	39 db       	rcall	.-2446   	; 0x72a <Print::print(char const*)>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:156
 mySerial.print(LimLo);
    10b8:	4a e0       	ldi	r20, 0x0A	; 10
    10ba:	50 e0       	ldi	r21, 0x00	; 0
    10bc:	6d 2f       	mov	r22, r29
    10be:	88 ee       	ldi	r24, 0xE8	; 232
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	1d db       	rcall	.-2502   	; 0x6fe <Print::print(unsigned char, int)>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:157
 mySerial.print("\tLimhi: ");
    10c4:	65 e9       	ldi	r22, 0x95	; 149
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	88 ee       	ldi	r24, 0xE8	; 232
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	2e db       	rcall	.-2468   	; 0x72a <Print::print(char const*)>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:158
 mySerial.print(LimHi);
    10ce:	4a e0       	ldi	r20, 0x0A	; 10
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	6c 2f       	mov	r22, r28
    10d4:	88 ee       	ldi	r24, 0xE8	; 232
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	12 db       	rcall	.-2524   	; 0x6fe <Print::print(unsigned char, int)>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:159
 mySerial.print("Pulselimit=");
    10da:	6e e9       	ldi	r22, 0x9E	; 158
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	88 ee       	ldi	r24, 0xE8	; 232
    10e0:	91 e0       	ldi	r25, 0x01	; 1
    10e2:	23 db       	rcall	.-2490   	; 0x72a <Print::print(char const*)>
print():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:73
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    10e4:	40 91 77 01 	lds	r20, 0x0177	; 0x800177 <PulseLimit>
    10e8:	50 91 78 01 	lds	r21, 0x0178	; 0x800178 <PulseLimit+0x1>
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:95
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    10f0:	2a e0       	ldi	r18, 0x0A	; 10
    10f2:	88 ee       	ldi	r24, 0xE8	; 232
    10f4:	91 e0       	ldi	r25, 0x01	; 1
    10f6:	78 da       	rcall	.-2832   	; 0x5e8 <Print::printNumber(unsigned long, unsigned char)>
setup():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:161
 mySerial.print(PulseLimit);
 mySerial.print("\t GreatOrLessThan ");
    10f8:	6a ea       	ldi	r22, 0xAA	; 170
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	88 ee       	ldi	r24, 0xE8	; 232
    10fe:	91 e0       	ldi	r25, 0x01	; 1
    1100:	14 db       	rcall	.-2520   	; 0x72a <Print::print(char const*)>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:163
 #endif
 if(GreatOrLessThan==GREATERTHAN)
    1102:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <GreatOrLessThan>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:165
 {
    mySerial.println("GREATHERTHAN");
    1106:	6d eb       	ldi	r22, 0xBD	; 189
    1108:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:163
 mySerial.print(LimHi);
 mySerial.print("Pulselimit=");
 mySerial.print(PulseLimit);
 mySerial.print("\t GreatOrLessThan ");
 #endif
 if(GreatOrLessThan==GREATERTHAN)
    110a:	83 33       	cpi	r24, 0x33	; 51
    110c:	11 f0       	breq	.+4      	; 0x1112 <main+0x3b8>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:169
 {
    mySerial.println("GREATHERTHAN");
 }
 else
 {
   mySerial.println("LESSTHAN");
    110e:	6a ec       	ldi	r22, 0xCA	; 202
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	88 ee       	ldi	r24, 0xE8	; 232
    1114:	91 e0       	ldi	r25, 0x01	; 1
    1116:	f9 da       	rcall	.-2574   	; 0x70a <Print::println(char const*)>
loop():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:341
}

void loop()
{
  unsigned long duration;
  static unsigned long timer = millis();
    1118:	33 24       	eor	r3, r3
    111a:	33 94       	inc	r3
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:314
			   The track number to play.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::loop(uint16_t trackNum)
{
  sendStack.commandValue  = dfplayer::PLAYBACK_MODE;
    111c:	88 e0       	ldi	r24, 0x08	; 8
    111e:	88 2e       	mov	r8, r24
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:377
  }
  
   else if (Scaled_V>STEAM_LOWER & Scaled_V<STEAM_UPPER& Sounds!=SteamBoat)
  {
      myMP3.loop(3); // 
      Sounds=SteamBoat;
    1120:	c3 e0       	ldi	r28, 0x03	; 3
    1122:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:317
  sendStack.feedbackValue = dfplayer::NO_FEEDBACK;
  sendStack.paramMSB = (trackNum >> 8) & 0xFF;
  sendStack.paramLSB = trackNum & 0xFF;
    1124:	92 e0       	ldi	r25, 0x02	; 2
    1126:	29 2e       	mov	r2, r25
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:367
      #endif
  }
  else if (Scaled_V>TUG_DIESEL_LOWER & Scaled_V<TUG_DIESEL_UPPER & Sounds!=TugDiesel)
  {
      myMP3.loop(2); // 
      Sounds=TugDiesel;
    1128:	02 e0       	ldi	r16, 0x02	; 2
    112a:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:358

// Change the sample if needed
  if (Scaled_V>NAVY_DIESEL_LOWER & Scaled_V<NAVY_DIESEL_UPPER & Sounds!=NavyDiesel)
  {
      myMP3.loop(1); // 
      Sounds=NavyDiesel;
    112c:	aa 24       	eor	r10, r10
    112e:	a3 94       	inc	r10
    1130:	b1 2c       	mov	r11, r1
playAdvertisement():
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:188
			   The track number to play.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::playAdvertisement(uint16_t trackNum)
{
	sendStack.commandValue  = dfplayer::INSERT_ADVERT;
    1132:	33 e1       	ldi	r19, 0x13	; 19
    1134:	93 2e       	mov	r9, r19
loop():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:341
}

void loop()
{
  unsigned long duration;
  static unsigned long timer = millis();
    1136:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <guard variable for loop::timer>
    113a:	81 11       	cpse	r24, r1
    113c:	0d c0       	rjmp	.+26     	; 0x1158 <main+0x3fe>
millis():
  }

  unsigned long millis()
  {
    unsigned long m;
    uint8_t oldSREG = SREG;
    113e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:345

    // disable interrupts while we read millis_timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
    cli();
    1140:	f8 94       	cli
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:346
    m = millis_timer_millis;
    1142:	40 91 73 01 	lds	r20, 0x0173	; 0x800173 <millis_timer_millis>
    1146:	50 91 74 01 	lds	r21, 0x0174	; 0x800174 <millis_timer_millis+0x1>
    114a:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <millis_timer_millis+0x2>
    114e:	70 91 76 01 	lds	r23, 0x0176	; 0x800176 <millis_timer_millis+0x3>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/wiring.c:347
    SREG = oldSREG;
    1152:	8f bf       	out	0x3f, r24	; 63
loop():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:341
    1154:	30 92 80 01 	sts	0x0180, r3	; 0x800180 <guard variable for loop::timer>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:346
  unsigned char SoundTrack, Horntrack;

 //First check the switch input to know what sample to play
  
 Sampled_V=analogRead(SELECTION_IN);
    1158:	b4 d7       	rcall	.+3944   	; 0x20c2 <__TEXT_REGION_LENGTH__+0xc2>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:347
 Scaled_V=(float)Sampled_V*4.88E-3;
    115a:	bc 01       	movw	r22, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	b3 d1       	rcall	.+870    	; 0x14c8 <__floatunsisf>
    1162:	28 e6       	ldi	r18, 0x68	; 104
    1164:	38 ee       	ldi	r19, 0xE8	; 232
    1166:	4f e9       	ldi	r20, 0x9F	; 159
    1168:	5b e3       	ldi	r21, 0x3B	; 59
    116a:	0f d2       	rcall	.+1054   	; 0x158a <__mulsf3>
    116c:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <Scaled_V>
    1170:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <Scaled_V+0x1>
    1174:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <Scaled_V+0x2>
    1178:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <Scaled_V+0x3>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:349
 #ifdef DEBUG
 mySerial.print("Voltage: ");
    117c:	63 ed       	ldi	r22, 0xD3	; 211
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	88 ee       	ldi	r24, 0xE8	; 232
    1182:	91 e0       	ldi	r25, 0x01	; 1
    1184:	d2 da       	rcall	.-2652   	; 0x72a <Print::print(char const*)>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:350
 mySerial.println(Scaled_V);
    1186:	c0 90 7c 01 	lds	r12, 0x017C	; 0x80017c <Scaled_V>
    118a:	d0 90 7d 01 	lds	r13, 0x017D	; 0x80017d <Scaled_V+0x1>
    118e:	e0 90 7e 01 	lds	r14, 0x017E	; 0x80017e <Scaled_V+0x2>
    1192:	f0 90 7f 01 	lds	r15, 0x017F	; 0x80017f <Scaled_V+0x3>
printFloat():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:281
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  // Handle negative numbers
  if (number < 0.0)
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	a9 01       	movw	r20, r18
    119c:	c7 01       	movw	r24, r14
    119e:	b6 01       	movw	r22, r12
    11a0:	8f d1       	rcall	.+798    	; 0x14c0 <__cmpsf2>
    11a2:	87 ff       	sbrs	r24, 7
    11a4:	08 c0       	rjmp	.+16     	; 0x11b6 <main+0x45c>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:283
  {
     n += print('-');
    11a6:	6d e2       	ldi	r22, 0x2D	; 45
    11a8:	88 ee       	ldi	r24, 0xE8	; 232
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	ef d7       	rcall	.+4062   	; 0x218c <__TEXT_REGION_LENGTH__+0x18c>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:284
     number = -number;
    11ae:	f7 fa       	bst	r15, 7
    11b0:	f0 94       	com	r15
    11b2:	f7 f8       	bld	r15, 7
    11b4:	f0 94       	com	r15
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:292
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;

  number += rounding;
    11b6:	2a e0       	ldi	r18, 0x0A	; 10
    11b8:	37 ed       	ldi	r19, 0xD7	; 215
    11ba:	43 ea       	ldi	r20, 0xA3	; 163
    11bc:	5b e3       	ldi	r21, 0x3B	; 59
    11be:	c7 01       	movw	r24, r14
    11c0:	b6 01       	movw	r22, r12
    11c2:	bf d2       	rcall	.+1406   	; 0x1742 <__addsf3>
    11c4:	2b 01       	movw	r4, r22
    11c6:	3c 01       	movw	r6, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:295

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    11c8:	25 d3       	rcall	.+1610   	; 0x1814 <__fixunssfsi>
    11ca:	6b 01       	movw	r12, r22
    11cc:	7c 01       	movw	r14, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:296
  double remainder = number - (double)int_part;
    11ce:	7c d1       	rcall	.+760    	; 0x14c8 <__floatunsisf>
    11d0:	9b 01       	movw	r18, r22
    11d2:	ac 01       	movw	r20, r24
    11d4:	c3 01       	movw	r24, r6
    11d6:	b2 01       	movw	r22, r4
    11d8:	b3 d2       	rcall	.+1382   	; 0x1740 <__subsf3>
    11da:	2b 01       	movw	r4, r22
    11dc:	3c 01       	movw	r6, r24
print():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:95
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    11de:	2a e0       	ldi	r18, 0x0A	; 10
    11e0:	b7 01       	movw	r22, r14
    11e2:	a6 01       	movw	r20, r12
    11e4:	88 ee       	ldi	r24, 0xE8	; 232
    11e6:	91 e0       	ldi	r25, 0x01	; 1
    11e8:	ff d9       	rcall	.-3074   	; 0x5e8 <Print::printNumber(unsigned long, unsigned char)>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:53
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    11ea:	6d ed       	ldi	r22, 0xDD	; 221
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	88 ee       	ldi	r24, 0xE8	; 232
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	eb d9       	rcall	.-3114   	; 0x5ca <Print::write(char const*)>
printFloat():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:307
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e2       	ldi	r20, 0x20	; 32
    11fa:	51 e4       	ldi	r21, 0x41	; 65
    11fc:	c3 01       	movw	r24, r6
    11fe:	b2 01       	movw	r22, r4
    1200:	c4 d1       	rcall	.+904    	; 0x158a <__mulsf3>
    1202:	2b 01       	movw	r4, r22
    1204:	3c 01       	movw	r6, r24
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:308
    int toPrint = int(remainder);
    1206:	01 d3       	rcall	.+1538   	; 0x180a <__fixsfsi>
print():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:68
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1208:	6b 01       	movw	r12, r22
    120a:	77 0f       	add	r23, r23
    120c:	ee 08       	sbc	r14, r14
    120e:	ff 08       	sbc	r15, r15
    1210:	c7 01       	movw	r24, r14
    1212:	b6 01       	movw	r22, r12
    1214:	3c da       	rcall	.-2952   	; 0x68e <Print::print(long, int) [clone .part.1] [clone .constprop.7]>
printFloat():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:310
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
    1216:	c7 01       	movw	r24, r14
    1218:	b6 01       	movw	r22, r12
    121a:	58 d1       	rcall	.+688    	; 0x14cc <__floatsisf>
    121c:	9b 01       	movw	r18, r22
    121e:	ac 01       	movw	r20, r24
    1220:	c3 01       	movw	r24, r6
    1222:	b2 01       	movw	r22, r4
    1224:	8d d2       	rcall	.+1306   	; 0x1740 <__subsf3>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:307
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	40 e2       	ldi	r20, 0x20	; 32
    122c:	51 e4       	ldi	r21, 0x41	; 65
    122e:	ad d1       	rcall	.+858    	; 0x158a <__mulsf3>
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:308
    int toPrint = int(remainder);
    1230:	ec d2       	rcall	.+1496   	; 0x180a <__fixsfsi>
print():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:68
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1232:	07 2e       	mov	r0, r23
    1234:	00 0c       	add	r0, r0
    1236:	88 0b       	sbc	r24, r24
    1238:	99 0b       	sbc	r25, r25
    123a:	29 da       	rcall	.-2990   	; 0x68e <Print::print(long, int) [clone .part.1] [clone .constprop.7]>
println():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:192
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    123c:	88 ee       	ldi	r24, 0xE8	; 232
    123e:	91 e0       	ldi	r25, 0x01	; 1
    1240:	ac d7       	rcall	.+3928   	; 0x219a <__TEXT_REGION_LENGTH__+0x19a>
loop():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:352
 #endif
 delay(1000);
    1242:	68 ee       	ldi	r22, 0xE8	; 232
    1244:	73 e0       	ldi	r23, 0x03	; 3
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	07 d8       	rcall	.-4082   	; 0x25a <delay>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:355

// Change the sample if needed
  if (Scaled_V>NAVY_DIESEL_LOWER & Scaled_V<NAVY_DIESEL_UPPER & Sounds!=NavyDiesel)
    124c:	40 90 7c 01 	lds	r4, 0x017C	; 0x80017c <Scaled_V>
    1250:	50 90 7d 01 	lds	r5, 0x017D	; 0x80017d <Scaled_V+0x1>
    1254:	60 90 7e 01 	lds	r6, 0x017E	; 0x80017e <Scaled_V+0x2>
    1258:	70 90 7f 01 	lds	r7, 0x017F	; 0x80017f <Scaled_V+0x3>
    125c:	e0 90 7a 01 	lds	r14, 0x017A	; 0x80017a <Sounds>
    1260:	f0 90 7b 01 	lds	r15, 0x017B	; 0x80017b <Sounds+0x1>
    1264:	dd 24       	eor	r13, r13
    1266:	d3 94       	inc	r13
    1268:	2a e0       	ldi	r18, 0x0A	; 10
    126a:	37 ed       	ldi	r19, 0xD7	; 215
    126c:	43 e8       	ldi	r20, 0x83	; 131
    126e:	50 e4       	ldi	r21, 0x40	; 64
    1270:	c3 01       	movw	r24, r6
    1272:	b2 01       	movw	r22, r4
    1274:	fb d2       	rcall	.+1526   	; 0x186c <__gesf2>
    1276:	18 16       	cp	r1, r24
    1278:	0c f0       	brlt	.+2      	; 0x127c <main+0x522>
    127a:	d1 2c       	mov	r13, r1
    127c:	2a e9       	ldi	r18, 0x9A	; 154
    127e:	39 e9       	ldi	r19, 0x99	; 153
    1280:	49 e8       	ldi	r20, 0x89	; 137
    1282:	50 e4       	ldi	r21, 0x40	; 64
    1284:	c3 01       	movw	r24, r6
    1286:	b2 01       	movw	r22, r4
    1288:	1b d1       	rcall	.+566    	; 0x14c0 <__cmpsf2>
    128a:	88 1f       	adc	r24, r24
    128c:	88 27       	eor	r24, r24
    128e:	88 1f       	adc	r24, r24
    1290:	d8 22       	and	r13, r24
    1292:	09 f4       	brne	.+2      	; 0x1296 <main+0x53c>
    1294:	7a c0       	rjmp	.+244    	; 0x138a <main+0x630>
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	e8 16       	cp	r14, r24
    129a:	f1 04       	cpc	r15, r1
    129c:	09 f4       	brne	.+2      	; 0x12a0 <main+0x546>
    129e:	75 c0       	rjmp	.+234    	; 0x138a <main+0x630>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:314
			   The track number to play.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::loop(uint16_t trackNum)
{
  sendStack.commandValue  = dfplayer::PLAYBACK_MODE;
    12a0:	80 92 c3 01 	sts	0x01C3, r8	; 0x8001c3 <myMP3+0x5>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:315
  sendStack.feedbackValue = dfplayer::NO_FEEDBACK;
    12a4:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <myMP3+0x6>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:316
  sendStack.paramMSB = (trackNum >> 8) & 0xFF;
    12a8:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <myMP3+0x7>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:317
  sendStack.paramLSB = trackNum & 0xFF;
    12ac:	30 92 c6 01 	sts	0x01C6, r3	; 0x8001c6 <myMP3+0x8>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:319
  
  findChecksum(sendStack);
    12b0:	ed d6       	rcall	.+3546   	; 0x208c <__TEXT_REGION_LENGTH__+0x8c>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:320
  sendData();
    12b2:	3c da       	rcall	.-2952   	; 0x72c <DFPlayerMini_Fast::sendData() [clone .constprop.31]>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:358
  {
      myMP3.loop(1); // 
      Sounds=NavyDiesel;
    12b4:	b0 92 7b 01 	sts	0x017B, r11	; 0x80017b <Sounds+0x1>
    12b8:	a0 92 7a 01 	sts	0x017A, r10	; 0x80017a <Sounds>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:360
      #ifdef DEBUG
      mySerial.print("Navy Diesel, sounds=");
    12bc:	6f ed       	ldi	r22, 0xDF	; 223
    12be:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:369
  else if (Scaled_V>TUG_DIESEL_LOWER & Scaled_V<TUG_DIESEL_UPPER & Sounds!=TugDiesel)
  {
      myMP3.loop(2); // 
      Sounds=TugDiesel;
      #ifdef DEBUG
      mySerial.print("Tug Diesel sounds= ");
    12c0:	88 ee       	ldi	r24, 0xE8	; 232
    12c2:	91 e0       	ldi	r25, 0x01	; 1
    12c4:	32 da       	rcall	.-2972   	; 0x72a <Print::print(char const*)>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:380
  {
      myMP3.loop(3); // 
      Sounds=SteamBoat;
      #ifdef DEBUG
      mySerial.println("Steam Engine, sounds= ");
      mySerial.println(Sounds);
    12c6:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <Sounds>
    12ca:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <Sounds+0x1>
    12ce:	07 da       	rcall	.-3058   	; 0x6de <Print::println(int, int) [clone .constprop.4]>
PlayHorn():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:92
{
  unsigned char HornTime;
  unsigned int PWMTime;

  // Use the servo PWM input
    PWMTime = pulseIn(SEL_HORN, HIGH);
    12d0:	64 d9       	rcall	.-3384   	; 0x59a <pulseIn.constprop.20>
    12d2:	2b 01       	movw	r4, r22
    12d4:	3c 01       	movw	r6, r24
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:94
   #ifdef DEBUG
    mySerial.print("PWMTime: ");
    12d6:	6f e1       	ldi	r22, 0x1F	; 31
    12d8:	71 e0       	ldi	r23, 0x01	; 1
    12da:	88 ee       	ldi	r24, 0xE8	; 232
    12dc:	91 e0       	ldi	r25, 0x01	; 1
    12de:	25 da       	rcall	.-2998   	; 0x72a <Print::print(char const*)>
print():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\cores\tiny/Print.cpp:95
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    12e0:	b3 01       	movw	r22, r6
    12e2:	a2 01       	movw	r20, r4
    12e4:	66 27       	eor	r22, r22
    12e6:	77 27       	eor	r23, r23
    12e8:	2a e0       	ldi	r18, 0x0A	; 10
    12ea:	88 ee       	ldi	r24, 0xE8	; 232
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	7c d9       	rcall	.-3336   	; 0x5e8 <Print::printNumber(unsigned long, unsigned char)>
PlayHorn():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:98
    mySerial.print(PWMTime);
    #endif
    
    if((GreatOrLessThan==GREATERTHAN && PWMTime > PulseLimit) || (GreatOrLessThan==LESSTHAN && PWMTime < PulseLimit))
    12f0:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <GreatOrLessThan>
    12f4:	83 33       	cpi	r24, 0x33	; 51
    12f6:	09 f0       	breq	.+2      	; 0x12fa <main+0x5a0>
    12f8:	a8 c0       	rjmp	.+336    	; 0x144a <main+0x6f0>
    12fa:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <PulseLimit>
    12fe:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <PulseLimit+0x1>
    1302:	84 15       	cp	r24, r4
    1304:	95 05       	cpc	r25, r5
    1306:	08 f0       	brcs	.+2      	; 0x130a <main+0x5b0>
    1308:	16 cf       	rjmp	.-468    	; 0x1136 <main+0x3dc>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:100
    {
        switch(Sounds){
    130a:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <Sounds>
    130e:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <Sounds+0x1>
    1312:	82 30       	cpi	r24, 0x02	; 2
    1314:	91 05       	cpc	r25, r1
    1316:	09 f4       	brne	.+2      	; 0x131a <main+0x5c0>
    1318:	a4 c0       	rjmp	.+328    	; 0x1462 <main+0x708>
    131a:	83 30       	cpi	r24, 0x03	; 3
    131c:	91 05       	cpc	r25, r1
    131e:	09 f4       	brne	.+2      	; 0x1322 <main+0x5c8>
    1320:	a9 c0       	rjmp	.+338    	; 0x1474 <main+0x71a>
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	51 f4       	brne	.+20     	; 0x133a <main+0x5e0>
playAdvertisement():
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:188
			   The track number to play.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::playAdvertisement(uint16_t trackNum)
{
	sendStack.commandValue  = dfplayer::INSERT_ADVERT;
    1326:	90 92 c3 01 	sts	0x01C3, r9	; 0x8001c3 <myMP3+0x5>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:189
	sendStack.feedbackValue = dfplayer::NO_FEEDBACK;
    132a:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <myMP3+0x6>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:190
	sendStack.paramMSB = (trackNum >> 8) & 0xFF;
    132e:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <myMP3+0x7>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:191
	sendStack.paramLSB = trackNum & 0xFF;
    1332:	30 92 c6 01 	sts	0x01C6, r3	; 0x8001c6 <myMP3+0x8>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:193

	findChecksum(sendStack);
    1336:	aa d6       	rcall	.+3412   	; 0x208c <__TEXT_REGION_LENGTH__+0x8c>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:194
	sendData();
    1338:	f9 d9       	rcall	.-3086   	; 0x72c <DFPlayerMini_Fast::sendData() [clone .constprop.31]>
PlayHorn():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:113
            case SteamBoat:
            myMP3.playAdvertisement(3);
            break;
          }
        // Now switch the LED on to indicate we have detected a valid input.
      digitalWrite(LEDPIN,LEDON);
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	b5 d8       	rcall	.-3734   	; 0x4aa <digitalWrite>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:114
      delay(9000);
    1340:	68 e2       	ldi	r22, 0x28	; 40
    1342:	73 e2       	ldi	r23, 0x23	; 35
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	88 d7       	rcall	.+3856   	; 0x225a <__TEXT_REGION_LENGTH__+0x25a>
stopAdvertisement():
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:207
	 @brief  Stop the interrupting track.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::stopAdvertisement()
{
	sendStack.commandValue  = dfplayer::STOP_ADVERT;
    134a:	95 e1       	ldi	r25, 0x15	; 21
    134c:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <myMP3+0x5>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:208
	sendStack.feedbackValue = dfplayer::NO_FEEDBACK;
    1350:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <myMP3+0x6>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:209
	sendStack.paramMSB = 0;
    1354:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <myMP3+0x7>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:210
	sendStack.paramLSB = 0;
    1358:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <myMP3+0x8>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:212

	findChecksum(sendStack);
    135c:	97 d6       	rcall	.+3374   	; 0x208c <__TEXT_REGION_LENGTH__+0x8c>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:213
	sendData();
    135e:	e6 d9       	rcall	.-3124   	; 0x72c <DFPlayerMini_Fast::sendData() [clone .constprop.31]>
PlayHorn():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:117

      myMP3.stopAdvertisement();
      digitalWrite(LEDPIN,LEDOFF);
    1360:	61 e0       	ldi	r22, 0x01	; 1
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	a2 d8       	rcall	.-3772   	; 0x4aa <digitalWrite>
    1366:	e7 ce       	rjmp	.-562    	; 0x1136 <main+0x3dc>
DoOnOffSetup():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:313
        Byte2=(unsigned char)(Pulse1&0xFF);
        EEPROM.write(3,Byte1);
        EEPROM.write(4,Byte2);
        #endif
    }
    else if (Pulse1>Pulse2)
    1368:	c0 16       	cp	r12, r16
    136a:	d1 06       	cpc	r13, r17
    136c:	08 f0       	brcs	.+2      	; 0x1370 <main+0x616>
    136e:	84 ce       	rjmp	.-760    	; 0x1078 <main+0x31e>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:315
    {
        Pulse2=Pulse2+TimerAdjustment;
    1370:	99 e0       	ldi	r25, 0x09	; 9
    1372:	c9 0e       	add	r12, r25
    1374:	d1 1c       	adc	r13, r1
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:318
        Byte1=(unsigned char)(Pulse2>>8);
        Byte2=(unsigned char)(Pulse2&0xFF);
        EEPROM.write(0,Byte1);
    1376:	6d 2d       	mov	r22, r13
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	01 db       	rcall	.-2558   	; 0x980 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:319
        EEPROM.write(1,Byte2);
    137e:	6c 2d       	mov	r22, r12
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	fd da       	rcall	.-2566   	; 0x980 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:320
        EEPROM.write(2,LESSTHAN);
    1386:	62 e2       	ldi	r22, 0x22	; 34
    1388:	6c ce       	rjmp	.-808    	; 0x1062 <main+0x308>
loop():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:364
      #ifdef DEBUG
      mySerial.print("Navy Diesel, sounds=");
      mySerial.println(Sounds);
      #endif
  }
  else if (Scaled_V>TUG_DIESEL_LOWER & Scaled_V<TUG_DIESEL_UPPER & Sounds!=TugDiesel)
    138a:	dd 24       	eor	r13, r13
    138c:	d3 94       	inc	r13
    138e:	2d ec       	ldi	r18, 0xCD	; 205
    1390:	3c ec       	ldi	r19, 0xCC	; 204
    1392:	4c e7       	ldi	r20, 0x7C	; 124
    1394:	50 e4       	ldi	r21, 0x40	; 64
    1396:	c3 01       	movw	r24, r6
    1398:	b2 01       	movw	r22, r4
    139a:	68 d2       	rcall	.+1232   	; 0x186c <__gesf2>
    139c:	18 16       	cp	r1, r24
    139e:	0c f0       	brlt	.+2      	; 0x13a2 <main+0x648>
    13a0:	d1 2c       	mov	r13, r1
    13a2:	28 e4       	ldi	r18, 0x48	; 72
    13a4:	31 ee       	ldi	r19, 0xE1	; 225
    13a6:	42 e8       	ldi	r20, 0x82	; 130
    13a8:	50 e4       	ldi	r21, 0x40	; 64
    13aa:	c3 01       	movw	r24, r6
    13ac:	b2 01       	movw	r22, r4
    13ae:	88 d0       	rcall	.+272    	; 0x14c0 <__cmpsf2>
    13b0:	88 1f       	adc	r24, r24
    13b2:	88 27       	eor	r24, r24
    13b4:	88 1f       	adc	r24, r24
    13b6:	d8 22       	and	r13, r24
    13b8:	a9 f0       	breq	.+42     	; 0x13e4 <main+0x68a>
    13ba:	92 e0       	ldi	r25, 0x02	; 2
    13bc:	e9 16       	cp	r14, r25
    13be:	f1 04       	cpc	r15, r1
    13c0:	89 f0       	breq	.+34     	; 0x13e4 <main+0x68a>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:314
			   The track number to play.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::loop(uint16_t trackNum)
{
  sendStack.commandValue  = dfplayer::PLAYBACK_MODE;
    13c2:	80 92 c3 01 	sts	0x01C3, r8	; 0x8001c3 <myMP3+0x5>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:315
  sendStack.feedbackValue = dfplayer::NO_FEEDBACK;
    13c6:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <myMP3+0x6>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:316
  sendStack.paramMSB = (trackNum >> 8) & 0xFF;
    13ca:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <myMP3+0x7>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:317
  sendStack.paramLSB = trackNum & 0xFF;
    13ce:	20 92 c6 01 	sts	0x01C6, r2	; 0x8001c6 <myMP3+0x8>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:319
  
  findChecksum(sendStack);
    13d2:	5c d6       	rcall	.+3256   	; 0x208c <__TEXT_REGION_LENGTH__+0x8c>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:320
  sendData();
    13d4:	ab d9       	rcall	.-3242   	; 0x72c <DFPlayerMini_Fast::sendData() [clone .constprop.31]>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:367
  {
      myMP3.loop(2); // 
      Sounds=TugDiesel;
    13d6:	10 93 7b 01 	sts	0x017B, r17	; 0x80017b <Sounds+0x1>
    13da:	00 93 7a 01 	sts	0x017A, r16	; 0x80017a <Sounds>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:369
      #ifdef DEBUG
      mySerial.print("Tug Diesel sounds= ");
    13de:	64 ef       	ldi	r22, 0xF4	; 244
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	6e cf       	rjmp	.-292    	; 0x12c0 <main+0x566>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:374
      mySerial.println(Sounds);
      #endif
  }
  
   else if (Scaled_V>STEAM_LOWER & Scaled_V<STEAM_UPPER& Sounds!=SteamBoat)
    13e4:	dd 24       	eor	r13, r13
    13e6:	d3 94       	inc	r13
    13e8:	26 e6       	ldi	r18, 0x66	; 102
    13ea:	36 e6       	ldi	r19, 0x66	; 102
    13ec:	46 e6       	ldi	r20, 0x66	; 102
    13ee:	50 e4       	ldi	r21, 0x40	; 64
    13f0:	c3 01       	movw	r24, r6
    13f2:	b2 01       	movw	r22, r4
    13f4:	3b d2       	rcall	.+1142   	; 0x186c <__gesf2>
    13f6:	18 16       	cp	r1, r24
    13f8:	0c f0       	brlt	.+2      	; 0x13fc <main+0x6a2>
    13fa:	d1 2c       	mov	r13, r1
    13fc:	2a e9       	ldi	r18, 0x9A	; 154
    13fe:	39 e9       	ldi	r19, 0x99	; 153
    1400:	49 e7       	ldi	r20, 0x79	; 121
    1402:	50 e4       	ldi	r21, 0x40	; 64
    1404:	c3 01       	movw	r24, r6
    1406:	b2 01       	movw	r22, r4
    1408:	5b d0       	rcall	.+182    	; 0x14c0 <__cmpsf2>
    140a:	88 1f       	adc	r24, r24
    140c:	88 27       	eor	r24, r24
    140e:	88 1f       	adc	r24, r24
    1410:	d8 22       	and	r13, r24
    1412:	09 f4       	brne	.+2      	; 0x1416 <main+0x6bc>
    1414:	5d cf       	rjmp	.-326    	; 0x12d0 <main+0x576>
    1416:	83 e0       	ldi	r24, 0x03	; 3
    1418:	e8 16       	cp	r14, r24
    141a:	f1 04       	cpc	r15, r1
    141c:	09 f4       	brne	.+2      	; 0x1420 <main+0x6c6>
    141e:	58 cf       	rjmp	.-336    	; 0x12d0 <main+0x576>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:314
			   The track number to play.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::loop(uint16_t trackNum)
{
  sendStack.commandValue  = dfplayer::PLAYBACK_MODE;
    1420:	80 92 c3 01 	sts	0x01C3, r8	; 0x8001c3 <myMP3+0x5>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:315
  sendStack.feedbackValue = dfplayer::NO_FEEDBACK;
    1424:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <myMP3+0x6>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:316
  sendStack.paramMSB = (trackNum >> 8) & 0xFF;
    1428:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <myMP3+0x7>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:317
  sendStack.paramLSB = trackNum & 0xFF;
    142c:	93 e0       	ldi	r25, 0x03	; 3
    142e:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <myMP3+0x8>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:319
  
  findChecksum(sendStack);
    1432:	2c d6       	rcall	.+3160   	; 0x208c <__TEXT_REGION_LENGTH__+0x8c>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:320
  sendData();
    1434:	7b d9       	rcall	.-3338   	; 0x72c <DFPlayerMini_Fast::sendData() [clone .constprop.31]>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:377
  {
      myMP3.loop(3); // 
      Sounds=SteamBoat;
    1436:	d0 93 7b 01 	sts	0x017B, r29	; 0x80017b <Sounds+0x1>
    143a:	c0 93 7a 01 	sts	0x017A, r28	; 0x80017a <Sounds>
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:379
      #ifdef DEBUG
      mySerial.println("Steam Engine, sounds= ");
    143e:	68 e0       	ldi	r22, 0x08	; 8
    1440:	71 e0       	ldi	r23, 0x01	; 1
    1442:	88 ee       	ldi	r24, 0xE8	; 232
    1444:	91 e0       	ldi	r25, 0x01	; 1
    1446:	61 d9       	rcall	.-3390   	; 0x70a <Print::println(char const*)>
    1448:	3e cf       	rjmp	.-388    	; 0x12c6 <main+0x56c>
PlayHorn():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:98
   #ifdef DEBUG
    mySerial.print("PWMTime: ");
    mySerial.print(PWMTime);
    #endif
    
    if((GreatOrLessThan==GREATERTHAN && PWMTime > PulseLimit) || (GreatOrLessThan==LESSTHAN && PWMTime < PulseLimit))
    144a:	82 32       	cpi	r24, 0x22	; 34
    144c:	09 f0       	breq	.+2      	; 0x1450 <main+0x6f6>
    144e:	73 ce       	rjmp	.-794    	; 0x1136 <main+0x3dc>
    1450:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <PulseLimit>
    1454:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <PulseLimit+0x1>
    1458:	48 16       	cp	r4, r24
    145a:	59 06       	cpc	r5, r25
    145c:	08 f4       	brcc	.+2      	; 0x1460 <main+0x706>
    145e:	55 cf       	rjmp	.-342    	; 0x130a <main+0x5b0>
    1460:	6a ce       	rjmp	.-812    	; 0x1136 <main+0x3dc>
playAdvertisement():
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:188
			   The track number to play.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::playAdvertisement(uint16_t trackNum)
{
	sendStack.commandValue  = dfplayer::INSERT_ADVERT;
    1462:	90 92 c3 01 	sts	0x01C3, r9	; 0x8001c3 <myMP3+0x5>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:189
	sendStack.feedbackValue = dfplayer::NO_FEEDBACK;
    1466:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <myMP3+0x6>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:190
	sendStack.paramMSB = (trackNum >> 8) & 0xFF;
    146a:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <myMP3+0x7>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:191
	sendStack.paramLSB = trackNum & 0xFF;
    146e:	20 92 c6 01 	sts	0x01C6, r2	; 0x8001c6 <myMP3+0x8>
    1472:	61 cf       	rjmp	.-318    	; 0x1336 <main+0x5dc>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:188
			   The track number to play.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::playAdvertisement(uint16_t trackNum)
{
	sendStack.commandValue  = dfplayer::INSERT_ADVERT;
    1474:	90 92 c3 01 	sts	0x01C3, r9	; 0x8001c3 <myMP3+0x5>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:189
	sendStack.feedbackValue = dfplayer::NO_FEEDBACK;
    1478:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <myMP3+0x6>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:190
	sendStack.paramMSB = (trackNum >> 8) & 0xFF;
    147c:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <myMP3+0x7>
C:\Users\Ian\Dropbox\Arduino\libraries\arduino_773253\src/DFPlayerMini_Fast.cpp:191
	sendStack.paramLSB = trackNum & 0xFF;
    1480:	83 e0       	ldi	r24, 0x03	; 3
    1482:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <myMP3+0x8>
    1486:	57 cf       	rjmp	.-338    	; 0x1336 <main+0x5dc>

00001488 <_GLOBAL__sub_D_mySerial>:
__base_dtor ():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:262
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    1488:	84 e7       	ldi	r24, 0x74	; 116
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <mySerial+0x1>
    1490:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <mySerial>
stopListening():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:109
}

// Stop listening. Returns true if we were actually listening.
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
    1494:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <SoftwareSerial::active_object>
    1498:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <SoftwareSerial::active_object+0x1>
    149c:	88 5e       	subi	r24, 0xE8	; 232
    149e:	91 40       	sbci	r25, 0x01	; 1
    14a0:	71 f4       	brne	.+28     	; 0x14be <_GLOBAL__sub_D_mySerial+0x36>
setRxIntMsk():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:380
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    14a2:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <mySerial+0x13>
    14a6:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <mySerial+0x14>
    14aa:	90 81       	ld	r25, Z
    14ac:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <mySerial+0x15>
    14b0:	80 95       	com	r24
    14b2:	89 23       	and	r24, r25
    14b4:	80 83       	st	Z, r24
stopListening():
C:\Users\Ian\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.0\libraries\SoftwareSerial/SoftwareSerial.cpp:112
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
  {
    setRxIntMsk(false);
    active_object = NULL;
    14b6:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <SoftwareSerial::active_object+0x1>
    14ba:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <SoftwareSerial::active_object>
_GLOBAL__sub_D_mySerial():
C:\Users\Ian\Dropbox\Arduino\RCSounds_V1.0/RCSounds_V1.0.ino:385
      mySerial.println(Sounds);
      #endif
  }
    PlayHorn();   // See if we need to change to a horn sound effect.

}
    14be:	08 95       	ret

000014c0 <__cmpsf2>:
__cmpsf2():
    14c0:	40 d0       	rcall	.+128    	; 0x1542 <__fp_cmp>
    14c2:	08 f4       	brcc	.+2      	; 0x14c6 <__cmpsf2+0x6>
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	08 95       	ret

000014c8 <__floatunsisf>:
__floatunsisf():
    14c8:	e8 94       	clt
    14ca:	09 c0       	rjmp	.+18     	; 0x14de <__floatsisf+0x12>

000014cc <__floatsisf>:
    14cc:	97 fb       	bst	r25, 7
    14ce:	3e f4       	brtc	.+14     	; 0x14de <__floatsisf+0x12>
    14d0:	90 95       	com	r25
    14d2:	80 95       	com	r24
    14d4:	70 95       	com	r23
    14d6:	61 95       	neg	r22
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255
    14da:	8f 4f       	sbci	r24, 0xFF	; 255
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	99 23       	and	r25, r25
    14e0:	a9 f0       	breq	.+42     	; 0x150c <__floatsisf+0x40>
    14e2:	f9 2f       	mov	r31, r25
    14e4:	96 e9       	ldi	r25, 0x96	; 150
    14e6:	bb 27       	eor	r27, r27
    14e8:	93 95       	inc	r25
    14ea:	f6 95       	lsr	r31
    14ec:	87 95       	ror	r24
    14ee:	77 95       	ror	r23
    14f0:	67 95       	ror	r22
    14f2:	b7 95       	ror	r27
    14f4:	f1 11       	cpse	r31, r1
    14f6:	f8 cf       	rjmp	.-16     	; 0x14e8 <__floatsisf+0x1c>
    14f8:	fa f4       	brpl	.+62     	; 0x1538 <__floatsisf+0x6c>
    14fa:	bb 0f       	add	r27, r27
    14fc:	11 f4       	brne	.+4      	; 0x1502 <__floatsisf+0x36>
    14fe:	60 ff       	sbrs	r22, 0
    1500:	1b c0       	rjmp	.+54     	; 0x1538 <__floatsisf+0x6c>
    1502:	6f 5f       	subi	r22, 0xFF	; 255
    1504:	7f 4f       	sbci	r23, 0xFF	; 255
    1506:	8f 4f       	sbci	r24, 0xFF	; 255
    1508:	9f 4f       	sbci	r25, 0xFF	; 255
    150a:	16 c0       	rjmp	.+44     	; 0x1538 <__floatsisf+0x6c>
    150c:	88 23       	and	r24, r24
    150e:	11 f0       	breq	.+4      	; 0x1514 <__floatsisf+0x48>
    1510:	96 e9       	ldi	r25, 0x96	; 150
    1512:	11 c0       	rjmp	.+34     	; 0x1536 <__floatsisf+0x6a>
    1514:	77 23       	and	r23, r23
    1516:	21 f0       	breq	.+8      	; 0x1520 <__floatsisf+0x54>
    1518:	9e e8       	ldi	r25, 0x8E	; 142
    151a:	87 2f       	mov	r24, r23
    151c:	76 2f       	mov	r23, r22
    151e:	05 c0       	rjmp	.+10     	; 0x152a <__floatsisf+0x5e>
    1520:	66 23       	and	r22, r22
    1522:	71 f0       	breq	.+28     	; 0x1540 <__floatsisf+0x74>
    1524:	96 e8       	ldi	r25, 0x86	; 134
    1526:	86 2f       	mov	r24, r22
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	2a f0       	brmi	.+10     	; 0x1538 <__floatsisf+0x6c>
    152e:	9a 95       	dec	r25
    1530:	66 0f       	add	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	88 1f       	adc	r24, r24
    1536:	da f7       	brpl	.-10     	; 0x152e <__floatsisf+0x62>
    1538:	88 0f       	add	r24, r24
    153a:	96 95       	lsr	r25
    153c:	87 95       	ror	r24
    153e:	97 f9       	bld	r25, 7
    1540:	08 95       	ret

00001542 <__fp_cmp>:
__fp_cmp():
    1542:	99 0f       	add	r25, r25
    1544:	00 08       	sbc	r0, r0
    1546:	55 0f       	add	r21, r21
    1548:	aa 0b       	sbc	r26, r26
    154a:	e0 e8       	ldi	r30, 0x80	; 128
    154c:	fe ef       	ldi	r31, 0xFE	; 254
    154e:	16 16       	cp	r1, r22
    1550:	17 06       	cpc	r1, r23
    1552:	e8 07       	cpc	r30, r24
    1554:	f9 07       	cpc	r31, r25
    1556:	c0 f0       	brcs	.+48     	; 0x1588 <__fp_cmp+0x46>
    1558:	12 16       	cp	r1, r18
    155a:	13 06       	cpc	r1, r19
    155c:	e4 07       	cpc	r30, r20
    155e:	f5 07       	cpc	r31, r21
    1560:	98 f0       	brcs	.+38     	; 0x1588 <__fp_cmp+0x46>
    1562:	62 1b       	sub	r22, r18
    1564:	73 0b       	sbc	r23, r19
    1566:	84 0b       	sbc	r24, r20
    1568:	95 0b       	sbc	r25, r21
    156a:	39 f4       	brne	.+14     	; 0x157a <__fp_cmp+0x38>
    156c:	0a 26       	eor	r0, r26
    156e:	61 f0       	breq	.+24     	; 0x1588 <__fp_cmp+0x46>
    1570:	23 2b       	or	r18, r19
    1572:	24 2b       	or	r18, r20
    1574:	25 2b       	or	r18, r21
    1576:	21 f4       	brne	.+8      	; 0x1580 <__fp_cmp+0x3e>
    1578:	08 95       	ret
    157a:	0a 26       	eor	r0, r26
    157c:	09 f4       	brne	.+2      	; 0x1580 <__fp_cmp+0x3e>
    157e:	a1 40       	sbci	r26, 0x01	; 1
    1580:	a6 95       	lsr	r26
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	81 1d       	adc	r24, r1
    1586:	81 1d       	adc	r24, r1
    1588:	08 95       	ret

0000158a <__mulsf3>:
__mulsf3():
    158a:	0a d0       	rcall	.+20     	; 0x15a0 <__mulsf3x>
    158c:	80 c0       	rjmp	.+256    	; 0x168e <__fp_round>
    158e:	71 d0       	rcall	.+226    	; 0x1672 <__fp_pscA>
    1590:	28 f0       	brcs	.+10     	; 0x159c <__mulsf3+0x12>
    1592:	76 d0       	rcall	.+236    	; 0x1680 <__fp_pscB>
    1594:	18 f0       	brcs	.+6      	; 0x159c <__mulsf3+0x12>
    1596:	95 23       	and	r25, r21
    1598:	09 f0       	breq	.+2      	; 0x159c <__mulsf3+0x12>
    159a:	62 c0       	rjmp	.+196    	; 0x1660 <__fp_inf>
    159c:	67 c0       	rjmp	.+206    	; 0x166c <__fp_nan>
    159e:	ab c0       	rjmp	.+342    	; 0x16f6 <__fp_szero>

000015a0 <__mulsf3x>:
__mulsf3x():
    15a0:	87 d0       	rcall	.+270    	; 0x16b0 <__fp_split3>
    15a2:	a8 f3       	brcs	.-22     	; 0x158e <__mulsf3+0x4>

000015a4 <__mulsf3_pse>:
    15a4:	99 23       	and	r25, r25
    15a6:	d9 f3       	breq	.-10     	; 0x159e <__mulsf3+0x14>
    15a8:	55 23       	and	r21, r21
    15aa:	c9 f3       	breq	.-14     	; 0x159e <__mulsf3+0x14>
    15ac:	95 0f       	add	r25, r21
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	55 1f       	adc	r21, r21
    15b2:	aa 27       	eor	r26, r26
    15b4:	ee 27       	eor	r30, r30
    15b6:	ff 27       	eor	r31, r31
    15b8:	bb 27       	eor	r27, r27
    15ba:	00 24       	eor	r0, r0
    15bc:	08 94       	sec
    15be:	67 95       	ror	r22
    15c0:	20 f4       	brcc	.+8      	; 0x15ca <__mulsf3_pse+0x26>
    15c2:	e2 0f       	add	r30, r18
    15c4:	f3 1f       	adc	r31, r19
    15c6:	b4 1f       	adc	r27, r20
    15c8:	0a 1e       	adc	r0, r26
    15ca:	22 0f       	add	r18, r18
    15cc:	33 1f       	adc	r19, r19
    15ce:	44 1f       	adc	r20, r20
    15d0:	aa 1f       	adc	r26, r26
    15d2:	66 95       	lsr	r22
    15d4:	a9 f7       	brne	.-22     	; 0x15c0 <__mulsf3_pse+0x1c>
    15d6:	77 95       	ror	r23
    15d8:	30 f4       	brcc	.+12     	; 0x15e6 <__mulsf3_pse+0x42>
    15da:	f3 0f       	add	r31, r19
    15dc:	b4 1f       	adc	r27, r20
    15de:	0a 1e       	adc	r0, r26
    15e0:	12 1e       	adc	r1, r18
    15e2:	08 f4       	brcc	.+2      	; 0x15e6 <__mulsf3_pse+0x42>
    15e4:	63 95       	inc	r22
    15e6:	33 0f       	add	r19, r19
    15e8:	44 1f       	adc	r20, r20
    15ea:	aa 1f       	adc	r26, r26
    15ec:	22 1f       	adc	r18, r18
    15ee:	76 95       	lsr	r23
    15f0:	99 f7       	brne	.-26     	; 0x15d8 <__mulsf3_pse+0x34>
    15f2:	87 95       	ror	r24
    15f4:	20 f4       	brcc	.+8      	; 0x15fe <__mulsf3_pse+0x5a>
    15f6:	b4 0f       	add	r27, r20
    15f8:	0a 1e       	adc	r0, r26
    15fa:	12 1e       	adc	r1, r18
    15fc:	63 1f       	adc	r22, r19
    15fe:	44 0f       	add	r20, r20
    1600:	aa 1f       	adc	r26, r26
    1602:	22 1f       	adc	r18, r18
    1604:	33 1f       	adc	r19, r19
    1606:	86 95       	lsr	r24
    1608:	a9 f7       	brne	.-22     	; 0x15f4 <__mulsf3_pse+0x50>
    160a:	86 2f       	mov	r24, r22
    160c:	71 2d       	mov	r23, r1
    160e:	60 2d       	mov	r22, r0
    1610:	11 24       	eor	r1, r1
    1612:	9f 57       	subi	r25, 0x7F	; 127
    1614:	50 40       	sbci	r21, 0x00	; 0
    1616:	8a f0       	brmi	.+34     	; 0x163a <__mulsf3_pse+0x96>
    1618:	e1 f0       	breq	.+56     	; 0x1652 <__mulsf3_pse+0xae>
    161a:	88 23       	and	r24, r24
    161c:	4a f0       	brmi	.+18     	; 0x1630 <__mulsf3_pse+0x8c>
    161e:	ee 0f       	add	r30, r30
    1620:	ff 1f       	adc	r31, r31
    1622:	bb 1f       	adc	r27, r27
    1624:	66 1f       	adc	r22, r22
    1626:	77 1f       	adc	r23, r23
    1628:	88 1f       	adc	r24, r24
    162a:	91 50       	subi	r25, 0x01	; 1
    162c:	50 40       	sbci	r21, 0x00	; 0
    162e:	a9 f7       	brne	.-22     	; 0x161a <__mulsf3_pse+0x76>
    1630:	9e 3f       	cpi	r25, 0xFE	; 254
    1632:	51 05       	cpc	r21, r1
    1634:	70 f0       	brcs	.+28     	; 0x1652 <__mulsf3_pse+0xae>
    1636:	14 c0       	rjmp	.+40     	; 0x1660 <__fp_inf>
    1638:	5e c0       	rjmp	.+188    	; 0x16f6 <__fp_szero>
    163a:	5f 3f       	cpi	r21, 0xFF	; 255
    163c:	ec f3       	brlt	.-6      	; 0x1638 <__mulsf3_pse+0x94>
    163e:	98 3e       	cpi	r25, 0xE8	; 232
    1640:	dc f3       	brlt	.-10     	; 0x1638 <__mulsf3_pse+0x94>
    1642:	86 95       	lsr	r24
    1644:	77 95       	ror	r23
    1646:	67 95       	ror	r22
    1648:	b7 95       	ror	r27
    164a:	f7 95       	ror	r31
    164c:	e7 95       	ror	r30
    164e:	9f 5f       	subi	r25, 0xFF	; 255
    1650:	c1 f7       	brne	.-16     	; 0x1642 <__mulsf3_pse+0x9e>
    1652:	fe 2b       	or	r31, r30
    1654:	88 0f       	add	r24, r24
    1656:	91 1d       	adc	r25, r1
    1658:	96 95       	lsr	r25
    165a:	87 95       	ror	r24
    165c:	97 f9       	bld	r25, 7
    165e:	08 95       	ret

00001660 <__fp_inf>:
    1660:	97 f9       	bld	r25, 7
    1662:	9f 67       	ori	r25, 0x7F	; 127
    1664:	80 e8       	ldi	r24, 0x80	; 128
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	08 95       	ret

0000166c <__fp_nan>:
    166c:	9f ef       	ldi	r25, 0xFF	; 255
    166e:	80 ec       	ldi	r24, 0xC0	; 192
    1670:	08 95       	ret

00001672 <__fp_pscA>:
__fp_pscA():
    1672:	00 24       	eor	r0, r0
    1674:	0a 94       	dec	r0
    1676:	16 16       	cp	r1, r22
    1678:	17 06       	cpc	r1, r23
    167a:	18 06       	cpc	r1, r24
    167c:	09 06       	cpc	r0, r25
    167e:	08 95       	ret

00001680 <__fp_pscB>:
__fp_pscB():
    1680:	00 24       	eor	r0, r0
    1682:	0a 94       	dec	r0
    1684:	12 16       	cp	r1, r18
    1686:	13 06       	cpc	r1, r19
    1688:	14 06       	cpc	r1, r20
    168a:	05 06       	cpc	r0, r21
    168c:	08 95       	ret

0000168e <__fp_round>:
__fp_round():
    168e:	09 2e       	mov	r0, r25
    1690:	03 94       	inc	r0
    1692:	00 0c       	add	r0, r0
    1694:	11 f4       	brne	.+4      	; 0x169a <__fp_round+0xc>
    1696:	88 23       	and	r24, r24
    1698:	52 f0       	brmi	.+20     	; 0x16ae <__fp_round+0x20>
    169a:	bb 0f       	add	r27, r27
    169c:	40 f4       	brcc	.+16     	; 0x16ae <__fp_round+0x20>
    169e:	bf 2b       	or	r27, r31
    16a0:	11 f4       	brne	.+4      	; 0x16a6 <__fp_round+0x18>
    16a2:	60 ff       	sbrs	r22, 0
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <__fp_round+0x20>
    16a6:	6f 5f       	subi	r22, 0xFF	; 255
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	8f 4f       	sbci	r24, 0xFF	; 255
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	08 95       	ret

000016b0 <__fp_split3>:
__fp_split3():
    16b0:	57 fd       	sbrc	r21, 7
    16b2:	90 58       	subi	r25, 0x80	; 128
    16b4:	44 0f       	add	r20, r20
    16b6:	55 1f       	adc	r21, r21
    16b8:	59 f0       	breq	.+22     	; 0x16d0 <__fp_splitA+0x10>
    16ba:	5f 3f       	cpi	r21, 0xFF	; 255
    16bc:	71 f0       	breq	.+28     	; 0x16da <__fp_splitA+0x1a>
    16be:	47 95       	ror	r20

000016c0 <__fp_splitA>:
    16c0:	88 0f       	add	r24, r24
    16c2:	97 fb       	bst	r25, 7
    16c4:	99 1f       	adc	r25, r25
    16c6:	61 f0       	breq	.+24     	; 0x16e0 <__fp_splitA+0x20>
    16c8:	9f 3f       	cpi	r25, 0xFF	; 255
    16ca:	79 f0       	breq	.+30     	; 0x16ea <__fp_splitA+0x2a>
    16cc:	87 95       	ror	r24
    16ce:	08 95       	ret
    16d0:	12 16       	cp	r1, r18
    16d2:	13 06       	cpc	r1, r19
    16d4:	14 06       	cpc	r1, r20
    16d6:	55 1f       	adc	r21, r21
    16d8:	f2 cf       	rjmp	.-28     	; 0x16be <__fp_split3+0xe>
    16da:	46 95       	lsr	r20
    16dc:	f1 df       	rcall	.-30     	; 0x16c0 <__fp_splitA>
    16de:	08 c0       	rjmp	.+16     	; 0x16f0 <__fp_splitA+0x30>
    16e0:	16 16       	cp	r1, r22
    16e2:	17 06       	cpc	r1, r23
    16e4:	18 06       	cpc	r1, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	f1 cf       	rjmp	.-30     	; 0x16cc <__fp_splitA+0xc>
    16ea:	86 95       	lsr	r24
    16ec:	71 05       	cpc	r23, r1
    16ee:	61 05       	cpc	r22, r1
    16f0:	08 94       	sec
    16f2:	08 95       	ret

000016f4 <__fp_zero>:
__fp_zero():
    16f4:	e8 94       	clt

000016f6 <__fp_szero>:
    16f6:	bb 27       	eor	r27, r27
    16f8:	66 27       	eor	r22, r22
    16fa:	77 27       	eor	r23, r23
    16fc:	cb 01       	movw	r24, r22
    16fe:	97 f9       	bld	r25, 7
    1700:	08 95       	ret

00001702 <eeprom_read_byte>:
eeprom_read_byte():
    1702:	e1 99       	sbic	0x1c, 1	; 28
    1704:	fe cf       	rjmp	.-4      	; 0x1702 <eeprom_read_byte>
    1706:	9f bb       	out	0x1f, r25	; 31
    1708:	8e bb       	out	0x1e, r24	; 30
    170a:	e0 9a       	sbi	0x1c, 0	; 28
    170c:	99 27       	eor	r25, r25
    170e:	8d b3       	in	r24, 0x1d	; 29
    1710:	08 95       	ret

00001712 <eeprom_write_byte>:
eeprom_write_byte():
    1712:	26 2f       	mov	r18, r22

00001714 <eeprom_write_r18>:
    1714:	e1 99       	sbic	0x1c, 1	; 28
    1716:	fe cf       	rjmp	.-4      	; 0x1714 <eeprom_write_r18>
    1718:	1c ba       	out	0x1c, r1	; 28
    171a:	9f bb       	out	0x1f, r25	; 31
    171c:	8e bb       	out	0x1e, r24	; 30
    171e:	2d bb       	out	0x1d, r18	; 29
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	e2 9a       	sbi	0x1c, 2	; 28
    1726:	e1 9a       	sbi	0x1c, 1	; 28
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	01 96       	adiw	r24, 0x01	; 1
    172c:	08 95       	ret

0000172e <__mulqi3>:
__mulqi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:224
    172e:	00 24       	eor	r0, r0

00001730 <__mulqi3_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:226
    1730:	80 fd       	sbrc	r24, 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:227
    1732:	06 0e       	add	r0, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:228
    1734:	66 0f       	add	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:229
    1736:	11 f0       	breq	.+4      	; 0x173c <__mulqi3_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:230
    1738:	86 95       	lsr	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:231
    173a:	d1 f7       	brne	.-12     	; 0x1730 <__mulqi3_loop>

0000173c <__mulqi3_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:233
    173c:	80 2d       	mov	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:234
    173e:	08 95       	ret

00001740 <__subsf3>:
__subsf3():
    1740:	50 58       	subi	r21, 0x80	; 128

00001742 <__addsf3>:
    1742:	bb 27       	eor	r27, r27
    1744:	aa 27       	eor	r26, r26
    1746:	0e d0       	rcall	.+28     	; 0x1764 <__addsf3x>
    1748:	a2 cf       	rjmp	.-188    	; 0x168e <__fp_round>
__addsf3():
    174a:	93 df       	rcall	.-218    	; 0x1672 <__fp_pscA>
    174c:	30 f0       	brcs	.+12     	; 0x175a <__addsf3+0x18>
    174e:	98 df       	rcall	.-208    	; 0x1680 <__fp_pscB>
    1750:	20 f0       	brcs	.+8      	; 0x175a <__addsf3+0x18>
    1752:	31 f4       	brne	.+12     	; 0x1760 <__addsf3+0x1e>
    1754:	9f 3f       	cpi	r25, 0xFF	; 255
    1756:	11 f4       	brne	.+4      	; 0x175c <__addsf3+0x1a>
    1758:	1e f4       	brtc	.+6      	; 0x1760 <__addsf3+0x1e>
    175a:	88 cf       	rjmp	.-240    	; 0x166c <__fp_nan>
    175c:	0e f4       	brtc	.+2      	; 0x1760 <__addsf3+0x1e>
    175e:	e0 95       	com	r30
    1760:	e7 fb       	bst	r30, 7
    1762:	7e cf       	rjmp	.-260    	; 0x1660 <__fp_inf>

00001764 <__addsf3x>:
__addsf3x():
    1764:	e9 2f       	mov	r30, r25
    1766:	a4 df       	rcall	.-184    	; 0x16b0 <__fp_split3>
    1768:	80 f3       	brcs	.-32     	; 0x174a <__addsf3+0x8>
    176a:	ba 17       	cp	r27, r26
    176c:	62 07       	cpc	r22, r18
    176e:	73 07       	cpc	r23, r19
    1770:	84 07       	cpc	r24, r20
    1772:	95 07       	cpc	r25, r21
    1774:	18 f0       	brcs	.+6      	; 0x177c <__addsf3x+0x18>
    1776:	71 f4       	brne	.+28     	; 0x1794 <__addsf3x+0x30>
    1778:	9e f5       	brtc	.+102    	; 0x17e0 <__addsf3x+0x7c>
    177a:	bc cf       	rjmp	.-136    	; 0x16f4 <__fp_zero>
    177c:	0e f4       	brtc	.+2      	; 0x1780 <__addsf3x+0x1c>
    177e:	e0 95       	com	r30
    1780:	0b 2e       	mov	r0, r27
    1782:	ba 2f       	mov	r27, r26
    1784:	a0 2d       	mov	r26, r0
    1786:	0b 01       	movw	r0, r22
    1788:	b9 01       	movw	r22, r18
    178a:	90 01       	movw	r18, r0
    178c:	0c 01       	movw	r0, r24
    178e:	ca 01       	movw	r24, r20
    1790:	a0 01       	movw	r20, r0
    1792:	11 24       	eor	r1, r1
    1794:	ff 27       	eor	r31, r31
    1796:	59 1b       	sub	r21, r25
    1798:	99 f0       	breq	.+38     	; 0x17c0 <__addsf3x+0x5c>
    179a:	59 3f       	cpi	r21, 0xF9	; 249
    179c:	50 f4       	brcc	.+20     	; 0x17b2 <__addsf3x+0x4e>
    179e:	50 3e       	cpi	r21, 0xE0	; 224
    17a0:	68 f1       	brcs	.+90     	; 0x17fc <__addsf3x+0x98>
    17a2:	1a 16       	cp	r1, r26
    17a4:	f0 40       	sbci	r31, 0x00	; 0
    17a6:	a2 2f       	mov	r26, r18
    17a8:	23 2f       	mov	r18, r19
    17aa:	34 2f       	mov	r19, r20
    17ac:	44 27       	eor	r20, r20
    17ae:	58 5f       	subi	r21, 0xF8	; 248
    17b0:	f3 cf       	rjmp	.-26     	; 0x1798 <__addsf3x+0x34>
    17b2:	46 95       	lsr	r20
    17b4:	37 95       	ror	r19
    17b6:	27 95       	ror	r18
    17b8:	a7 95       	ror	r26
    17ba:	f0 40       	sbci	r31, 0x00	; 0
    17bc:	53 95       	inc	r21
    17be:	c9 f7       	brne	.-14     	; 0x17b2 <__addsf3x+0x4e>
    17c0:	7e f4       	brtc	.+30     	; 0x17e0 <__addsf3x+0x7c>
    17c2:	1f 16       	cp	r1, r31
    17c4:	ba 0b       	sbc	r27, r26
    17c6:	62 0b       	sbc	r22, r18
    17c8:	73 0b       	sbc	r23, r19
    17ca:	84 0b       	sbc	r24, r20
    17cc:	ba f0       	brmi	.+46     	; 0x17fc <__addsf3x+0x98>
    17ce:	91 50       	subi	r25, 0x01	; 1
    17d0:	a1 f0       	breq	.+40     	; 0x17fa <__addsf3x+0x96>
    17d2:	ff 0f       	add	r31, r31
    17d4:	bb 1f       	adc	r27, r27
    17d6:	66 1f       	adc	r22, r22
    17d8:	77 1f       	adc	r23, r23
    17da:	88 1f       	adc	r24, r24
    17dc:	c2 f7       	brpl	.-16     	; 0x17ce <__addsf3x+0x6a>
    17de:	0e c0       	rjmp	.+28     	; 0x17fc <__addsf3x+0x98>
    17e0:	ba 0f       	add	r27, r26
    17e2:	62 1f       	adc	r22, r18
    17e4:	73 1f       	adc	r23, r19
    17e6:	84 1f       	adc	r24, r20
    17e8:	48 f4       	brcc	.+18     	; 0x17fc <__addsf3x+0x98>
    17ea:	87 95       	ror	r24
    17ec:	77 95       	ror	r23
    17ee:	67 95       	ror	r22
    17f0:	b7 95       	ror	r27
    17f2:	f7 95       	ror	r31
    17f4:	9e 3f       	cpi	r25, 0xFE	; 254
    17f6:	08 f0       	brcs	.+2      	; 0x17fa <__addsf3x+0x96>
    17f8:	b3 cf       	rjmp	.-154    	; 0x1760 <__addsf3+0x1e>
    17fa:	93 95       	inc	r25
    17fc:	88 0f       	add	r24, r24
    17fe:	08 f0       	brcs	.+2      	; 0x1802 <__addsf3x+0x9e>
    1800:	99 27       	eor	r25, r25
    1802:	ee 0f       	add	r30, r30
    1804:	97 95       	ror	r25
    1806:	87 95       	ror	r24
    1808:	08 95       	ret

0000180a <__fixsfsi>:
    180a:	04 d0       	rcall	.+8      	; 0x1814 <__fixunssfsi>
    180c:	68 94       	set
    180e:	b1 11       	cpse	r27, r1
    1810:	72 cf       	rjmp	.-284    	; 0x16f6 <__fp_szero>
    1812:	08 95       	ret

00001814 <__fixunssfsi>:
    1814:	55 df       	rcall	.-342    	; 0x16c0 <__fp_splitA>
    1816:	88 f0       	brcs	.+34     	; 0x183a <__fixunssfsi+0x26>
    1818:	9f 57       	subi	r25, 0x7F	; 127
    181a:	90 f0       	brcs	.+36     	; 0x1840 <__fixunssfsi+0x2c>
    181c:	b9 2f       	mov	r27, r25
    181e:	99 27       	eor	r25, r25
    1820:	b7 51       	subi	r27, 0x17	; 23
    1822:	a0 f0       	brcs	.+40     	; 0x184c <__fixunssfsi+0x38>
__fixunssfsi():
    1824:	d1 f0       	breq	.+52     	; 0x185a <__fixunssfsi+0x46>
    1826:	66 0f       	add	r22, r22
    1828:	77 1f       	adc	r23, r23
    182a:	88 1f       	adc	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	1a f0       	brmi	.+6      	; 0x1836 <__fixunssfsi+0x22>
    1830:	ba 95       	dec	r27
    1832:	c9 f7       	brne	.-14     	; 0x1826 <__fixunssfsi+0x12>
    1834:	12 c0       	rjmp	.+36     	; 0x185a <__fixunssfsi+0x46>
    1836:	b1 30       	cpi	r27, 0x01	; 1
    1838:	81 f0       	breq	.+32     	; 0x185a <__fixunssfsi+0x46>
    183a:	5c df       	rcall	.-328    	; 0x16f4 <__fp_zero>
    183c:	b1 e0       	ldi	r27, 0x01	; 1
    183e:	08 95       	ret
    1840:	59 cf       	rjmp	.-334    	; 0x16f4 <__fp_zero>
    1842:	67 2f       	mov	r22, r23
    1844:	78 2f       	mov	r23, r24
    1846:	88 27       	eor	r24, r24
    1848:	b8 5f       	subi	r27, 0xF8	; 248
    184a:	39 f0       	breq	.+14     	; 0x185a <__fixunssfsi+0x46>
    184c:	b9 3f       	cpi	r27, 0xF9	; 249
    184e:	cc f3       	brlt	.-14     	; 0x1842 <__fixunssfsi+0x2e>
    1850:	86 95       	lsr	r24
    1852:	77 95       	ror	r23
    1854:	67 95       	ror	r22
    1856:	b3 95       	inc	r27
    1858:	d9 f7       	brne	.-10     	; 0x1850 <__fixunssfsi+0x3c>
    185a:	3e f4       	brtc	.+14     	; 0x186a <__fixunssfsi+0x56>
    185c:	90 95       	com	r25
    185e:	80 95       	com	r24
    1860:	70 95       	com	r23
    1862:	61 95       	neg	r22
    1864:	7f 4f       	sbci	r23, 0xFF	; 255
    1866:	8f 4f       	sbci	r24, 0xFF	; 255
    1868:	9f 4f       	sbci	r25, 0xFF	; 255
    186a:	08 95       	ret

0000186c <__gesf2>:
__gesf2():
    186c:	6a de       	rcall	.-812    	; 0x1542 <__fp_cmp>
    186e:	08 f4       	brcc	.+2      	; 0x1872 <__gesf2+0x6>
    1870:	8f ef       	ldi	r24, 0xFF	; 255
    1872:	08 95       	ret

00001874 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    1874:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    1876:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    1878:	16 f4       	brtc	.+4      	; 0x187e <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    187a:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    187c:	06 d0       	rcall	.+12     	; 0x188a <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    187e:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    1880:	08 d0       	rcall	.+16     	; 0x1892 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    1882:	2d d0       	rcall	.+90     	; 0x18de <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    1884:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    1886:	05 d0       	rcall	.+10     	; 0x1892 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    1888:	3e f4       	brtc	.+14     	; 0x1898 <__divmodhi4_exit>

0000188a <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    188a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    188c:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    188e:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    1890:	08 95       	ret

00001892 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    1892:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    1894:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    1896:	7f 4f       	sbci	r23, 0xFF	; 255

00001898 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    1898:	08 95       	ret

0000189a <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    189a:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    189c:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    189e:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    18a0:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    18a2:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    18a4:	0d c0       	rjmp	.+26     	; 0x18c0 <__udivmodsi4_ep>

000018a6 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    18a6:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    18a8:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    18aa:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    18ac:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    18ae:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    18b0:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    18b2:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    18b4:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    18b6:	20 f0       	brcs	.+8      	; 0x18c0 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    18b8:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    18ba:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    18bc:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    18be:	f5 0b       	sbc	r31, r21

000018c0 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    18c0:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    18c2:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    18c4:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    18c6:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    18c8:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    18ca:	69 f7       	brne	.-38     	; 0x18a6 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    18cc:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    18ce:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    18d0:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    18d2:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    18d4:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    18d6:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    18d8:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    18da:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    18dc:	08 95       	ret

000018de <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    18de:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    18e0:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    18e2:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    18e4:	07 c0       	rjmp	.+14     	; 0x18f4 <__udivmodhi4_ep>

000018e6 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    18e6:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    18e8:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    18ea:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    18ec:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    18ee:	10 f0       	brcs	.+4      	; 0x18f4 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    18f0:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    18f2:	b7 0b       	sbc	r27, r23

000018f4 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    18f4:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    18f6:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    18f8:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    18fa:	a9 f7       	brne	.-22     	; 0x18e6 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    18fc:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    18fe:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    1900:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    1902:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    1904:	08 95       	ret

00001906 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1906:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1908:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    190a:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    190c:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    190e:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1910:	09 94       	ijmp

00001912 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    1912:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    1914:	cf e1       	ldi	r28, 0x1F	; 31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    1916:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    1918:	03 c0       	rjmp	.+6      	; 0x1920 <__do_global_dtors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    191a:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    191c:	f4 df       	rcall	.-24     	; 0x1906 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    191e:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    1920:	c0 32       	cpi	r28, 0x20	; 32
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    1922:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    1924:	d1 f7       	brne	.-12     	; 0x191a <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1926:	f8 94       	cli

00001928 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1928:	ff cf       	rjmp	.-2      	; 0x1928 <__stop_program>
