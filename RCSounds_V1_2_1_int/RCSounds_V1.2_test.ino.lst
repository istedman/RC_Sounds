
C:\temp\arduino_build_962576/RCSounds_V1.2_test.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	e2 c0       	rjmp	.+452    	; 0x1c6 <__dtors_end>
       2:	06 c1       	rjmp	.+524    	; 0x210 <__bad_interrupt>
       4:	d4 c8       	rjmp	.-3672   	; 0xfffff1ae <__eeprom_end+0xff7ef1ae>
       6:	04 c1       	rjmp	.+520    	; 0x210 <__bad_interrupt>
       8:	03 c1       	rjmp	.+518    	; 0x210 <__bad_interrupt>
       a:	87 c8       	rjmp	.-3826   	; 0xfffff11a <__eeprom_end+0xff7ef11a>
       c:	01 c1       	rjmp	.+514    	; 0x210 <__bad_interrupt>
       e:	35 c8       	rjmp	.-3990   	; 0xfffff07a <__eeprom_end+0xff7ef07a>
      10:	ff c0       	rjmp	.+510    	; 0x210 <__bad_interrupt>
      12:	fe c0       	rjmp	.+508    	; 0x210 <__bad_interrupt>
      14:	fd c0       	rjmp	.+506    	; 0x210 <__bad_interrupt>
      16:	fc c0       	rjmp	.+504    	; 0x210 <__bad_interrupt>
      18:	fb c0       	rjmp	.+502    	; 0x210 <__bad_interrupt>
      1a:	fa c0       	rjmp	.+500    	; 0x210 <__bad_interrupt>
      1c:	f9 c0       	rjmp	.+498    	; 0x210 <__bad_interrupt>

0000001e <__trampolines_end>:
__trampolines_start():
      1e:	00 00       	nop
      20:	00 00       	nop
      22:	37 00       	.word	0x0037	; ????

00000024 <digital_pin_to_timer_PGM>:
      24:	01 03 00 00 04 00                                   ......

0000002a <table>:
      2a:	00 c2 01 00 00 00 0e 00 0e 00 0c 00 00 e1 00 00     ................
      3a:	05 00 22 00 22 00 20 00 00 96 00 00 0f 00 36 00     ..".". .......6.
      4a:	36 00 34 00 12 7a 00 00 17 00 43 00 43 00 41 00     6.4..z....C.C.A.
      5a:	80 70 00 00 1a 00 4a 00 4a 00 48 00 00 4b 00 00     .p....J.J.H..K..
      6a:	2c 00 71 00 71 00 70 00 40 38 00 00 4a 00 9c 00     ,.q.q.p.@8..J...
      7a:	99 00 99 00 80 25 00 00 72 00 ea 00 ea 00 e9 00     .....%..r.......
      8a:	c0 12 00 00 e9 00 da 01 da 01 d7 01 60 09 00 00     ............`...
      9a:	d7 01 ac 03 ac 03 b1 03 b0 04 00 00 b3 03 6e 07     ..............n.
      aa:	6e 07 67 07 2c 01 00 00 dc 0e c1 1d c1 1d be 1d     n.g.,...........

000000ba <_ZZ5setupE3__c__15_>:
      ba:	4e 6f 20 50 57 4d 20 66 6f 75 6e 64 00              No PWM found.

000000c7 <_ZZ5setupE3__c__14_>:
      c7:	43 75 72 72 65 6e 74 20 74 68 72 6f 74 74 6c 65     Current throttle
      d7:	20 00                                                .

000000d9 <_ZZ5setupE3__c__13_>:
      d9:	54 68 72 6f 74 74 6c 65 20 4f 4b 20 00              Throttle OK .

000000e6 <_ZZ5setupE3__c__12_>:
      e6:	43 75 72 72 65 6e 74 20 68 6f 72 6e 20 00           Current horn .

000000f4 <_ZZ5setupE3__c__11_>:
      f4:	48 6f 72 6e 20 4f 4b 20 00                          Horn OK .

000000fd <_ZZ5setupE3__c__10_>:
      fd:	50 57 4d 20 64 65 74 65 63 74 65 64 3a 00           PWM detected:.

0000010b <setup::__c>:
     10b:	20 3c 20 74 6f 20 6f 70 65 72 61 74 65 00            < to operate.

00000119 <setup::__c>:
     119:	20 3e 20 74 6f 20 6f 70 65 72 61 74 65 2e 00         > to operate..

00000128 <setup::__c>:
     128:	2c 20 6d 75 73 74 20 62 65 20 00                    , must be .

00000133 <setup::__c>:
     133:	48 6f 72 6e 20 6c 69 6d 69 74 20 00                 Horn limit .

0000013f <setup::__c>:
     13f:	72 65 76 65 72 73 65 64 2e 00                       reversed..

00000149 <setup::__c>:
     149:	6e 6f 72 6d 61 6c 2e 00                             normal..

00000151 <setup::__c>:
     151:	54 68 72 6f 74 74 6c 65 20 69 73 20 00              Throttle is .

0000015e <setup::__c>:
     15e:	52 65 76 65 72 73 65 20 54 68 72 6f 74 74 6c 65     Reverse Throttle
     16e:	20 6c 69 6d 69 74 20 00                              limit .

00000176 <setup::__c>:
     176:	4e 65 75 74 72 61 6c 20 00                          Neutral .

0000017f <setup::__c>:
     17f:	46 6f 72 77 61 72 64 20 54 68 72 6f 74 74 6c 65     Forward Throttle
     18f:	20 6c 69 6d 69 74 20 00                              limit .

00000197 <setup::__c>:
     197:	0a 45 45 50 52 4f 4d 20 53 65 74 74 69 6e 67 73     .EEPROM Settings
     1a7:	3a 00                                               :.

000001a9 <port_to_output_PGM>:
     1a9:	00 00 00 00 38 00                                   ....8.

000001af <port_to_input_PGM>:
     1af:	00 00 00 00 36 00                                   ....6.

000001b5 <digital_pin_to_port_PGM>:
     1b5:	02 02 02 02 02 02                                   ......

000001bb <digital_pin_to_bit_mask_PGM>:
     1bb:	01 02 04 08 10 20 00                                ..... .

000001c2 <__ctors_start>:
__ctors_start():
     1c2:	61 09       	sbc	r22, r1

000001c4 <__ctors_end>:
__dtors_start():
     1c4:	b0 0d       	add	r27, r0

000001c6 <__dtors_end>:
__dtors_end():
     1c6:	11 24       	eor	r1, r1
     1c8:	1f be       	out	0x3f, r1	; 63
     1ca:	cf e5       	ldi	r28, 0x5F	; 95
     1cc:	d2 e0       	ldi	r29, 0x02	; 2
     1ce:	de bf       	out	0x3e, r29	; 62
     1d0:	cd bf       	out	0x3d, r28	; 61

000001d2 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     1d2:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     1d4:	a4 ea       	ldi	r26, 0xA4	; 164
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     1d8:	01 c0       	rjmp	.+2      	; 0x1dc <.do_clear_bss_start>

000001da <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     1da:	1d 92       	st	X+, r1

000001dc <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     1dc:	a5 3a       	cpi	r26, 0xA5	; 165
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     1de:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     1e0:	e1 f7       	brne	.-8      	; 0x1da <.do_clear_bss_loop>

000001e2 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     1e2:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     1e4:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     1e8:	ea ee       	ldi	r30, 0xEA	; 234
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     1ea:	fe e1       	ldi	r31, 0x1E	; 30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     1ee:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     1f0:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     1f2:	a4 3a       	cpi	r26, 0xA4	; 164
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     1f4:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     1f6:	d9 f7       	brne	.-10     	; 0x1ee <__do_copy_data+0xc>

000001f8 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     1f8:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     1fa:	c2 ee       	ldi	r28, 0xE2	; 226
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     1fc:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     1fe:	03 c0       	rjmp	.+6      	; 0x206 <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     200:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     202:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     204:	60 de       	rcall	.-832    	; 0xfffffec6 <__eeprom_end+0xff7efec6>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     206:	c1 3e       	cpi	r28, 0xE1	; 225
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     208:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     20a:	d1 f7       	brne	.-12     	; 0x200 <__do_global_ctors+0x8>
     20c:	16 d9       	rcall	.-3540   	; 0xfffff43a <__eeprom_end+0xff7ef43a>
     20e:	61 ce       	rjmp	.-830    	; 0xfffffed2 <__eeprom_end+0xff7efed2>

00000210 <__bad_interrupt>:
__vector_1():
     210:	f7 ce       	rjmp	.-530    	; 0x0 <__vectors>

00000212 <DFPlayerMini_Fast::findChecksum(DFPlayerMini_Fast::stack&) [clone .constprop.18]>:
findChecksum():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:910
			   to calculate the checksum over.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::findChecksum(stack& _stack)
{
	int16_t checksum = 0 - (_stack.version + _stack.length + _stack.commandValue + _stack.feedbackValue + _stack.paramMSB + _stack.paramLSB);
     212:	ef e5       	ldi	r30, 0x5F	; 95
     214:	f1 e0       	ldi	r31, 0x01	; 1
     216:	83 81       	ldd	r24, Z+3	; 0x03
     218:	94 81       	ldd	r25, Z+4	; 0x04
     21a:	89 0f       	add	r24, r25
     21c:	99 27       	eor	r25, r25
     21e:	99 1f       	adc	r25, r25
     220:	25 81       	ldd	r18, Z+5	; 0x05
     222:	82 0f       	add	r24, r18
     224:	91 1d       	adc	r25, r1
     226:	26 81       	ldd	r18, Z+6	; 0x06
     228:	28 0f       	add	r18, r24
     22a:	39 2f       	mov	r19, r25
     22c:	31 1d       	adc	r19, r1
     22e:	87 81       	ldd	r24, Z+7	; 0x07
     230:	28 0f       	add	r18, r24
     232:	31 1d       	adc	r19, r1
     234:	80 85       	ldd	r24, Z+8	; 0x08
     236:	82 0f       	add	r24, r18
     238:	93 2f       	mov	r25, r19
     23a:	91 1d       	adc	r25, r1
     23c:	91 95       	neg	r25
     23e:	81 95       	neg	r24
     240:	91 09       	sbc	r25, r1
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:912

	_stack.checksumMSB = checksum >> 8;
     242:	91 87       	std	Z+9, r25	; 0x09
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:913
	_stack.checksumLSB = checksum & 0x00FF;
     244:	82 87       	std	Z+10, r24	; 0x0a
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:914
}
     246:	08 95       	ret

00000248 <TinySoftwareSerial::flush()>:
flush():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:242
}

void TinySoftwareSerial::flush()
{

}
     248:	08 95       	ret

0000024a <TinySoftwareSerial::write(unsigned char)>:
write():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:202
  }
}

size_t TinySoftwareSerial::write(uint8_t ch)
{
  uint8_t oldSREG = SREG;
     24a:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:203
  cli(); //Prevent interrupts from breaking the transmission. Note: TinySoftwareSerial is half duplex.
     24c:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:234
      [uartMask] "r" (_txmask),
      [uartUnmask] "r" (_txunmask)
    : "r23",
      "r24",
      "r25"
  );
     24e:	fc 01       	movw	r30, r24
     250:	45 85       	ldd	r20, Z+13	; 0x0d
     252:	56 85       	ldd	r21, Z+14	; 0x0e
     254:	3a e0       	ldi	r19, 0x0A	; 10
     256:	60 95       	com	r22
     258:	08 94       	sec
     25a:	20 f4       	brcc	.+8      	; 0x264 <__stack+0x5>
     25c:	78 b3       	in	r23, 0x18	; 24
     25e:	75 23       	and	r23, r21
     260:	78 bb       	out	0x18, r23	; 24
     262:	04 c0       	rjmp	.+8      	; 0x26c <__stack+0xd>
     264:	78 b3       	in	r23, 0x18	; 24
     266:	74 2b       	or	r23, r20
     268:	78 bb       	out	0x18, r23	; 24
     26a:	00 00       	nop
     26c:	50 d7       	rcall	.+3744   	; 0x110e <uartDelay>
     26e:	4f d7       	rcall	.+3742   	; 0x110e <uartDelay>
     270:	4e d7       	rcall	.+3740   	; 0x110e <uartDelay>
     272:	4d d7       	rcall	.+3738   	; 0x110e <uartDelay>
     274:	66 95       	lsr	r22
     276:	3a 95       	dec	r19
     278:	81 f7       	brne	.-32     	; 0x25a <TinySoftwareSerial::write(unsigned char)+0x10>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:235
  SREG = oldSREG;
     27a:	2f bf       	out	0x3f, r18	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:237
  return 1;
}
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	08 95       	ret

00000282 <TinySoftwareSerial::read()>:
read():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:191
}

int TinySoftwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     282:	dc 01       	movw	r26, r24
     284:	1f 96       	adiw	r26, 0x0f	; 15
     286:	ed 91       	ld	r30, X+
     288:	fc 91       	ld	r31, X
     28a:	20 a1       	ldd	r18, Z+32	; 0x20
     28c:	31 a1       	ldd	r19, Z+33	; 0x21
     28e:	82 a1       	ldd	r24, Z+34	; 0x22
     290:	93 a1       	ldd	r25, Z+35	; 0x23
     292:	28 17       	cp	r18, r24
     294:	39 07       	cpc	r19, r25
     296:	79 f0       	breq	.+30     	; 0x2b6 <TinySoftwareSerial::read()+0x34>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:194
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     298:	a2 a1       	ldd	r26, Z+34	; 0x22
     29a:	b3 a1       	ldd	r27, Z+35	; 0x23
     29c:	ae 0f       	add	r26, r30
     29e:	bf 1f       	adc	r27, r31
     2a0:	8c 91       	ld	r24, X
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:195
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     2a2:	22 a1       	ldd	r18, Z+34	; 0x22
     2a4:	33 a1       	ldd	r19, Z+35	; 0x23
     2a6:	2f 5f       	subi	r18, 0xFF	; 255
     2a8:	3f 4f       	sbci	r19, 0xFF	; 255
     2aa:	2f 71       	andi	r18, 0x1F	; 31
     2ac:	33 27       	eor	r19, r19
     2ae:	33 a3       	std	Z+35, r19	; 0x23
     2b0:	22 a3       	std	Z+34, r18	; 0x22
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:196
    return c;
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	08 95       	ret
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:192

int TinySoftwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     2b6:	8f ef       	ldi	r24, 0xFF	; 255
     2b8:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:198
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
     2ba:	08 95       	ret

000002bc <TinySoftwareSerial::peek()>:
peek():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:181
  }
}

int TinySoftwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     2bc:	dc 01       	movw	r26, r24
     2be:	1f 96       	adiw	r26, 0x0f	; 15
     2c0:	ed 91       	ld	r30, X+
     2c2:	fc 91       	ld	r31, X
     2c4:	20 a1       	ldd	r18, Z+32	; 0x20
     2c6:	31 a1       	ldd	r19, Z+33	; 0x21
     2c8:	82 a1       	ldd	r24, Z+34	; 0x22
     2ca:	93 a1       	ldd	r25, Z+35	; 0x23
     2cc:	28 17       	cp	r18, r24
     2ce:	39 07       	cpc	r19, r25
     2d0:	39 f0       	breq	.+14     	; 0x2e0 <TinySoftwareSerial::peek()+0x24>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:184
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     2d2:	82 a1       	ldd	r24, Z+34	; 0x22
     2d4:	93 a1       	ldd	r25, Z+35	; 0x23
     2d6:	e8 0f       	add	r30, r24
     2d8:	f9 1f       	adc	r31, r25
     2da:	80 81       	ld	r24, Z
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	08 95       	ret
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:182
}

int TinySoftwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     2e0:	8f ef       	ldi	r24, 0xFF	; 255
     2e2:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:186
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     2e4:	08 95       	ret

000002e6 <TinySoftwareSerial::available()>:
available():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:162
  _rx_buffer->head = _rx_buffer->tail;
}

int TinySoftwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     2e6:	dc 01       	movw	r26, r24
     2e8:	1f 96       	adiw	r26, 0x0f	; 15
     2ea:	ed 91       	ld	r30, X+
     2ec:	fc 91       	ld	r31, X
     2ee:	80 a1       	ldd	r24, Z+32	; 0x20
     2f0:	91 a1       	ldd	r25, Z+33	; 0x21
     2f2:	22 a1       	ldd	r18, Z+34	; 0x22
     2f4:	33 a1       	ldd	r19, Z+35	; 0x23
     2f6:	82 1b       	sub	r24, r18
     2f8:	93 0b       	sbc	r25, r19
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:163
}
     2fa:	8f 71       	andi	r24, 0x1F	; 31
     2fc:	99 27       	eor	r25, r25
     2fe:	08 95       	ret

00000300 <Print::print(char)>:
print():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:58
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     300:	dc 01       	movw	r26, r24
     302:	ed 91       	ld	r30, X+
     304:	fc 91       	ld	r31, X
     306:	01 90       	ld	r0, Z+
     308:	f0 81       	ld	r31, Z
     30a:	e0 2d       	mov	r30, r0
     30c:	09 94       	ijmp

0000030e <Print::println()>:
println():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:120
  }
  return( n );
}

size_t Print::println(void)
{
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	ec 01       	movw	r28, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:121
  size_t n = print('\r');
     318:	6d e0       	ldi	r22, 0x0D	; 13
     31a:	f2 df       	rcall	.-28     	; 0x300 <Print::print(char)>
     31c:	8c 01       	movw	r16, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:122
  n += print('\n');
     31e:	6a e0       	ldi	r22, 0x0A	; 10
     320:	ce 01       	movw	r24, r28
     322:	ee df       	rcall	.-36     	; 0x300 <Print::print(char)>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:124
  return n;
}
     324:	80 0f       	add	r24, r16
     326:	91 1f       	adc	r25, r17
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	08 95       	ret

00000332 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:34

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     332:	cf 92       	push	r12
     334:	df 92       	push	r13
     336:	ef 92       	push	r14
     338:	ff 92       	push	r15
     33a:	0f 93       	push	r16
     33c:	1f 93       	push	r17
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	6c 01       	movw	r12, r24
     344:	eb 01       	movw	r28, r22
     346:	7b 01       	movw	r14, r22
     348:	e4 0e       	add	r14, r20
     34a:	f5 1e       	adc	r15, r21
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:35
  size_t n = 0;
     34c:	10 e0       	ldi	r17, 0x00	; 0
     34e:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:36
  while (size--) {
     350:	ce 15       	cp	r28, r14
     352:	df 05       	cpc	r29, r15
     354:	61 f0       	breq	.+24     	; 0x36e <Print::write(unsigned char const*, unsigned int)+0x3c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:37
    n += write(*buffer++);
     356:	69 91       	ld	r22, Y+
     358:	d6 01       	movw	r26, r12
     35a:	ed 91       	ld	r30, X+
     35c:	fc 91       	ld	r31, X
     35e:	01 90       	ld	r0, Z+
     360:	f0 81       	ld	r31, Z
     362:	e0 2d       	mov	r30, r0
     364:	c6 01       	movw	r24, r12
     366:	09 95       	icall
     368:	08 0f       	add	r16, r24
     36a:	19 1f       	adc	r17, r25
     36c:	f1 cf       	rjmp	.-30     	; 0x350 <Print::write(unsigned char const*, unsigned int)+0x1e>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:40
  }
  return n;
}
     36e:	c8 01       	movw	r24, r16
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	df 90       	pop	r13
     37e:	cf 90       	pop	r12
     380:	08 95       	ret

00000382 <micros>:
micros():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:360
    unsigned int r; // needed for some frequencies, optimized away otherwise
    unsigned char f; // temporary storage for millis fraction counter
    unsigned char q = 0; // record whether an overflow is flagged
#endif
    unsigned long m;
    uint8_t t, oldSREG = SREG;
     382:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:362

    cli();
     384:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:367
#ifdef CORRECT_EXACT_MICROS
    m = millis_timer_millis;
    f = millis_timer_fract;
#else
    m = millis_timer_overflow_count;
     386:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <millis_timer_overflow_count>
     38a:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <millis_timer_overflow_count+0x1>
     38e:	a0 91 eb 00 	lds	r26, 0x00EB	; 0x8000eb <millis_timer_overflow_count+0x2>
     392:	b0 91 ec 00 	lds	r27, 0x00EC	; 0x8000ec <millis_timer_overflow_count+0x3>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:370
#endif
  #if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
    t = TCNT0;
     396:	22 b7       	in	r18, 0x32	; 50
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:389
      m++;
    #else
      q = 1;
    #endif
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR & _BV(TOV0)) && (t < 255))
     398:	08 b6       	in	r0, 0x38	; 56
     39a:	01 fe       	sbrs	r0, 1
     39c:	05 c0       	rjmp	.+10     	; 0x3a8 <micros+0x26>
     39e:	2f 3f       	cpi	r18, 0xFF	; 255
     3a0:	19 f0       	breq	.+6      	; 0x3a8 <micros+0x26>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:391
    #ifndef CORRECT_EXACT_MICROS
      m++;
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	a1 1d       	adc	r26, r1
     3a6:	b1 1d       	adc	r27, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:411
    #else
      q = 1;
    #endif
  #endif

    SREG = oldSREG;
     3a8:	3f bf       	out	0x3f, r19	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:453
  #else
  #if F_CPU < 1000000L
    return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
  #else
    #if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 && (F_CPU % 1000000 == 0 )) // Can we just do it the naive way? If so great!
      return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
     3aa:	ba 2f       	mov	r27, r26
     3ac:	a9 2f       	mov	r26, r25
     3ae:	98 2f       	mov	r25, r24
     3b0:	88 27       	eor	r24, r24
     3b2:	bc 01       	movw	r22, r24
     3b4:	cd 01       	movw	r24, r26
     3b6:	62 0f       	add	r22, r18
     3b8:	71 1d       	adc	r23, r1
     3ba:	81 1d       	adc	r24, r1
     3bc:	91 1d       	adc	r25, r1
     3be:	42 e0       	ldi	r20, 0x02	; 2
     3c0:	66 0f       	add	r22, r22
     3c2:	77 1f       	adc	r23, r23
     3c4:	88 1f       	adc	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	4a 95       	dec	r20
     3ca:	d1 f7       	brne	.-12     	; 0x3c0 <micros+0x3e>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:508
      //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
      return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
    #endif
  #endif
  #endif // !CORRECT_EXACT_MICROS
  }
     3cc:	08 95       	ret

000003ce <delay>:
delay():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:516
    // Empty
  }
  void yield(void) __attribute__ ((weak, alias("__empty")));

  void delay(unsigned long ms)
  {
     3ce:	cf 92       	push	r12
     3d0:	df 92       	push	r13
     3d2:	ef 92       	push	r14
     3d4:	ff 92       	push	r15
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	6b 01       	movw	r12, r22
     3dc:	7c 01       	movw	r14, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:518
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();
     3de:	d1 df       	rcall	.-94     	; 0x382 <micros>
     3e0:	eb 01       	movw	r28, r22
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:520

    while (ms > 0) {
     3e2:	c1 14       	cp	r12, r1
     3e4:	d1 04       	cpc	r13, r1
     3e6:	e1 04       	cpc	r14, r1
     3e8:	f1 04       	cpc	r15, r1
     3ea:	41 f4       	brne	.+16     	; 0x3fc <delay+0x2e>
     3ec:	12 c0       	rjmp	.+36     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:523
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
        ms--;
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	c8 1a       	sub	r12, r24
     3f2:	d1 08       	sbc	r13, r1
     3f4:	e1 08       	sbc	r14, r1
     3f6:	f1 08       	sbc	r15, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:524
        start += 1000;
     3f8:	c8 51       	subi	r28, 0x18	; 24
     3fa:	dc 4f       	sbci	r29, 0xFC	; 252
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:522
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();

    while (ms > 0) {
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
     3fc:	c2 df       	rcall	.-124    	; 0x382 <micros>
     3fe:	6c 1b       	sub	r22, r28
     400:	7d 0b       	sbc	r23, r29
     402:	68 3e       	cpi	r22, 0xE8	; 232
     404:	73 40       	sbci	r23, 0x03	; 3
     406:	68 f3       	brcs	.-38     	; 0x3e2 <delay+0x14>
     408:	c1 14       	cp	r12, r1
     40a:	d1 04       	cpc	r13, r1
     40c:	e1 04       	cpc	r14, r1
     40e:	f1 04       	cpc	r15, r1
     410:	71 f7       	brne	.-36     	; 0x3ee <delay+0x20>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:532
    #else
    uint32_t start = millis();
    while((millis() - start) < ms)  /* NOP */yield();
    return;
    #endif
  }
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	ff 90       	pop	r15
     418:	ef 90       	pop	r14
     41a:	df 90       	pop	r13
     41c:	cf 90       	pop	r12
     41e:	08 95       	ret

00000420 <AvgADCRead(unsigned char) [clone .constprop.15]>:
AvgADCRead():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:280
/*
 * Function to take 4 readings from the specified ADC channel, average them, convert to a voltage
 * and return it to the calling function.
 */

float AvgADCRead(byte ADCInput)
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	14 e0       	ldi	r17, 0x04	; 4
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:282
{
  unsigned int AvgADC=0;
     428:	d0 e0       	ldi	r29, 0x00	; 0
     42a:	c0 e0       	ldi	r28, 0x00	; 0
analogRead():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:72
  #ifndef ADCSRA
  return digitalRead(analogInputToDigitalPin(pin)) ? 1023 : 0; //No ADC, so read as a digital pin instead.
  #endif

  #if defined(ADMUX)
  ADMUX = ((analog_reference & ADMUX_REFS_MASK) << REFS0) | ((pin & ADMUX_MUX_MASK) << MUX0); //select the channel and reference
     42c:	17 b8       	out	0x07, r1	; 7
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:74
  #if defined(REFS2)
  ADMUX |= (((analog_reference & 0x04) >> 2) << REFS2); //some have an extra reference bit in a weird position.
     42e:	87 b1       	in	r24, 0x07	; 7
     430:	87 b9       	out	0x07, r24	; 7
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:79
  #endif
  #endif

  #if defined(HAVE_ADC) && HAVE_ADC
  sbi(ADCSRA, ADSC); //Start conversion
     432:	36 9a       	sbi	0x06, 6	; 6
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:81

  while(ADCSRA & (1<<ADSC)); //Wait for conversion to complete.
     434:	36 99       	sbic	0x06, 6	; 6
     436:	fe cf       	rjmp	.-4      	; 0x434 <AvgADCRead(unsigned char) [clone .constprop.15]+0x14>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:83

  uint8_t low = ADCL;
     438:	94 b1       	in	r25, 0x04	; 4
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:84
  uint8_t high = ADCH;
     43a:	85 b1       	in	r24, 0x05	; 5
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:85
  return (high << 8) | low;
     43c:	89 27       	eor	r24, r25
     43e:	98 27       	eor	r25, r24
     440:	89 27       	eor	r24, r25
AvgADCRead():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:288
  byte loopCNT=0;
  float AvgADCVal=0.0;
  
  for(loopCNT=0;loopCNT<4;loopCNT++)
  {
    AvgADC=AvgADC+analogRead(ADCInput);
     442:	c8 0f       	add	r28, r24
     444:	d9 1f       	adc	r29, r25
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:289
    delay(2);   // ADC settle time
     446:	62 e0       	ldi	r22, 0x02	; 2
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	bf df       	rcall	.-130    	; 0x3ce <delay>
     450:	11 50       	subi	r17, 0x01	; 1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:286
{
  unsigned int AvgADC=0;
  byte loopCNT=0;
  float AvgADCVal=0.0;
  
  for(loopCNT=0;loopCNT<4;loopCNT++)
     452:	61 f7       	brne	.-40     	; 0x42c <AvgADCRead(unsigned char) [clone .constprop.15]+0xc>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:291
  {
    AvgADC=AvgADC+analogRead(ADCInput);
    delay(2);   // ADC settle time
  }
  AvgADCVal= (float)((AvgADC*4.88E-3)/4);   // Calculate average of 4 readings
     454:	be 01       	movw	r22, r28
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	9b db       	rcall	.-2250   	; 0xfffffb92 <__eeprom_end+0xff7efb92>
     45c:	28 e6       	ldi	r18, 0x68	; 104
     45e:	38 ee       	ldi	r19, 0xE8	; 232
     460:	4f e9       	ldi	r20, 0x9F	; 159
     462:	5b e3       	ldi	r21, 0x3B	; 59
     464:	f7 db       	rcall	.-2066   	; 0xfffffc54 <__eeprom_end+0xff7efc54>
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	40 e8       	ldi	r20, 0x80	; 128
     46c:	5e e3       	ldi	r21, 0x3E	; 62
     46e:	f2 db       	rcall	.-2076   	; 0xfffffc54 <__eeprom_end+0xff7efc54>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:293
  return(AvgADCVal);
}
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	08 95       	ret

00000478 <millis>:
millis():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:341
  }

  unsigned long millis()
  {
    unsigned long m;
    uint8_t oldSREG = SREG;
     478:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:345

    // disable interrupts while we read millis_timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
    cli();
     47a:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:346
    m = millis_timer_millis;
     47c:	60 91 e5 00 	lds	r22, 0x00E5	; 0x8000e5 <millis_timer_millis>
     480:	70 91 e6 00 	lds	r23, 0x00E6	; 0x8000e6 <millis_timer_millis+0x1>
     484:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <millis_timer_millis+0x2>
     488:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <millis_timer_millis+0x3>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:347
    SREG = oldSREG;
     48c:	2f bf       	out	0x3f, r18	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:350

    return m;
  }
     48e:	08 95       	ret

00000490 <SoftSerial::tx_pin_write(unsigned char) [clone .part.4]>:
_ZN10SoftSerial12tx_pin_writeEh.part.4():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:317
    "pop r18 \n\t"
    ::);
#endif
}

void SoftSerial::tx_pin_write(uint8_t pin_state)
     490:	dc 01       	movw	r26, r24
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:320
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
     492:	51 96       	adiw	r26, 0x11	; 17
     494:	ed 91       	ld	r30, X+
     496:	fc 91       	ld	r31, X
     498:	52 97       	sbiw	r26, 0x12	; 18
     49a:	90 81       	ld	r25, Z
     49c:	50 96       	adiw	r26, 0x10	; 16
     49e:	8c 91       	ld	r24, X
     4a0:	80 95       	com	r24
     4a2:	89 23       	and	r24, r25
     4a4:	80 83       	st	Z, r24
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:323
  else
    *_transmitPortRegister |= _transmitBitMask;
}
     4a6:	08 95       	ret

000004a8 <SoftSerial::peek()>:
peek():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:553
  SREG = oldSREG;
}

int SoftSerial::peek()
{
  if (!isListening())
     4a8:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <SoftSerial::active_object>
     4ac:	30 91 f0 00 	lds	r19, 0x00F0	; 0x8000f0 <SoftSerial::active_object+0x1>
     4b0:	28 17       	cp	r18, r24
     4b2:	39 07       	cpc	r19, r25
     4b4:	81 f4       	brne	.+32     	; 0x4d6 <SoftSerial::peek()+0x2e>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:557
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     4b6:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <SoftSerial::_receive_buffer_head>
     4ba:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <SoftSerial::_receive_buffer_tail>
     4be:	98 17       	cp	r25, r24
     4c0:	51 f0       	breq	.+20     	; 0x4d6 <SoftSerial::peek()+0x2e>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:561
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     4c2:	e0 91 ed 00 	lds	r30, 0x00ED	; 0x8000ed <SoftSerial::_receive_buffer_head>
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	ec 55       	subi	r30, 0x5C	; 92
     4ca:	ff 4f       	sbci	r31, 0xFF	; 255
     4cc:	80 81       	ld	r24, Z
     4ce:	08 2e       	mov	r0, r24
     4d0:	00 0c       	add	r0, r0
     4d2:	99 0b       	sbc	r25, r25
     4d4:	08 95       	ret
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:554
}

int SoftSerial::peek()
{
  if (!isListening())
    return -1;
     4d6:	8f ef       	ldi	r24, 0xFF	; 255
     4d8:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:562
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
     4da:	08 95       	ret

000004dc <SoftSerial::flush()>:
flush():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:542
  return 1;
}

void SoftSerial::flush()
{
  if (!isListening())
     4dc:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <SoftSerial::active_object>
     4e0:	30 91 f0 00 	lds	r19, 0x00F0	; 0x8000f0 <SoftSerial::active_object+0x1>
     4e4:	28 17       	cp	r18, r24
     4e6:	39 07       	cpc	r19, r25
     4e8:	39 f4       	brne	.+14     	; 0x4f8 <SoftSerial::flush()+0x1c>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:545
    return;

  uint8_t oldSREG = SREG;
     4ea:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:546
  cli();
     4ec:	f8 94       	cli
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:547
  _receive_buffer_head = _receive_buffer_tail = 0;
     4ee:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <SoftSerial::_receive_buffer_tail>
     4f2:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <SoftSerial::_receive_buffer_head>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:548
  SREG = oldSREG;
     4f6:	8f bf       	out	0x3f, r24	; 63
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:549
}
     4f8:	08 95       	ret

000004fa <SoftSerial::available()>:
available():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:484
  return d;
}

int SoftSerial::available()
{
  if (!isListening())
     4fa:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <SoftSerial::active_object>
     4fe:	30 91 f0 00 	lds	r19, 0x00F0	; 0x8000f0 <SoftSerial::active_object+0x1>
     502:	28 17       	cp	r18, r24
     504:	39 07       	cpc	r19, r25
     506:	69 f4       	brne	.+26     	; 0x522 <SoftSerial::available()+0x28>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:487
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     508:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <SoftSerial::_receive_buffer_tail>
     50c:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <SoftSerial::_receive_buffer_head>
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	80 5c       	subi	r24, 0xC0	; 192
     514:	9f 4f       	sbci	r25, 0xFF	; 255
     516:	82 1b       	sub	r24, r18
     518:	91 09       	sbc	r25, r1
     51a:	60 e4       	ldi	r22, 0x40	; 64
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	8a dc       	rcall	.-1772   	; 0xfffffe34 <__eeprom_end+0xff7efe34>
     520:	08 95       	ret
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:485
}

int SoftSerial::available()
{
  if (!isListening())
    return 0;
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:488

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
     526:	08 95       	ret

00000528 <SoftSerial::read()>:
read():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:469


// Read data from buffer
int SoftSerial::read()
{
  if (!isListening())
     528:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <SoftSerial::active_object>
     52c:	30 91 f0 00 	lds	r19, 0x00F0	; 0x8000f0 <SoftSerial::active_object+0x1>
     530:	28 17       	cp	r18, r24
     532:	39 07       	cpc	r19, r25
     534:	b9 f4       	brne	.+46     	; 0x564 <SoftSerial::read()+0x3c>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:473
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     536:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <SoftSerial::_receive_buffer_head>
     53a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <SoftSerial::_receive_buffer_tail>
     53e:	98 17       	cp	r25, r24
     540:	89 f0       	breq	.+34     	; 0x564 <SoftSerial::read()+0x3c>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:477
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     542:	e0 91 ed 00 	lds	r30, 0x00ED	; 0x8000ed <SoftSerial::_receive_buffer_head>
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	ec 55       	subi	r30, 0x5C	; 92
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	80 81       	ld	r24, Z
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:478
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     54e:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <SoftSerial::_receive_buffer_head>
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	2f 5f       	subi	r18, 0xFF	; 255
     556:	3f 4f       	sbci	r19, 0xFF	; 255
     558:	2f 73       	andi	r18, 0x3F	; 63
     55a:	33 27       	eor	r19, r19
     55c:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <SoftSerial::_receive_buffer_head>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:479
  return d;
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	08 95       	ret
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:470

// Read data from buffer
int SoftSerial::read()
{
  if (!isListening())
    return -1;
     564:	8f ef       	ldi	r24, 0xFF	; 255
     566:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:480

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
     568:	08 95       	ret

0000056a <SoftSerial::tunedDelay(unsigned int)>:
tunedDelay():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:213
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	01 97       	sbiw	r24, 0x01	; 1
     56e:	2f ef       	ldi	r18, 0xFF	; 255
     570:	8f 3f       	cpi	r24, 0xFF	; 255
     572:	92 07       	cpc	r25, r18
     574:	d9 f7       	brne	.-10     	; 0x56c <SoftSerial::tunedDelay(unsigned int)+0x2>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:214
}
     576:	08 95       	ret

00000578 <SoftSerial::handle_interrupt()>:
handle_interrupt():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:336
// Interrupt handling
//

/* static */
inline void SoftSerial::handle_interrupt()
{
     578:	ef 92       	push	r14
     57a:	ff 92       	push	r15
     57c:	0f 93       	push	r16
     57e:	1f 93       	push	r17
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:337
  if (active_object)
     584:	c0 91 ef 00 	lds	r28, 0x00EF	; 0x8000ef <SoftSerial::active_object>
     588:	d0 91 f0 00 	lds	r29, 0x00F0	; 0x8000f0 <SoftSerial::active_object+0x1>
     58c:	20 97       	sbiw	r28, 0x00	; 0
     58e:	49 f0       	breq	.+18     	; 0x5a2 <SoftSerial::handle_interrupt()+0x2a>
     590:	ee 85       	ldd	r30, Y+14	; 0x0e
     592:	ff 85       	ldd	r31, Y+15	; 0x0f
     594:	9d 85       	ldd	r25, Y+13	; 0x0d
recv():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:260

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     596:	8b 8d       	ldd	r24, Y+27	; 0x1b
     598:	81 ff       	sbrs	r24, 1
     59a:	0a c0       	rjmp	.+20     	; 0x5b0 <SoftSerial::handle_interrupt()+0x38>
rx_pin_read():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:327
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     59c:	80 81       	ld	r24, Z
     59e:	89 23       	and	r24, r25
recv():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:260

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     5a0:	51 f4       	brne	.+20     	; 0x5b6 <SoftSerial::handle_interrupt()+0x3e>
handle_interrupt():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:341
{
  if (active_object)
  {
    active_object->recv();
  }
}
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	08 95       	ret
rx_pin_read():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:327
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     5b0:	80 81       	ld	r24, Z
     5b2:	89 23       	and	r24, r25
recv():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:260

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     5b4:	b1 f7       	brne	.-20     	; 0x5a2 <SoftSerial::handle_interrupt()+0x2a>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:263
  {
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     5b6:	8b 89       	ldd	r24, Y+19	; 0x13
     5b8:	9c 89       	ldd	r25, Y+20	; 0x14
     5ba:	d7 df       	rcall	.-82     	; 0x56a <SoftSerial::tunedDelay(unsigned int)>
     5bc:	88 e0       	ldi	r24, 0x08	; 8
     5be:	e8 2e       	mov	r14, r24
     5c0:	f1 2c       	mov	r15, r1
handle_interrupt():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:256
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     5c2:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:267
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
     5c4:	01 e0       	ldi	r16, 0x01	; 1
recv():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:269
    {
      tunedDelay(_rx_delay_intrabit);
     5c6:	8d 89       	ldd	r24, Y+21	; 0x15
     5c8:	9e 89       	ldd	r25, Y+22	; 0x16
     5ca:	cf df       	rcall	.-98     	; 0x56a <SoftSerial::tunedDelay(unsigned int)>
rx_pin_read():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:327
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     5cc:	ee 85       	ldd	r30, Y+14	; 0x0e
     5ce:	ff 85       	ldd	r31, Y+15	; 0x0f
     5d0:	80 81       	ld	r24, Z
     5d2:	9d 85       	ldd	r25, Y+13	; 0x0d
     5d4:	89 23       	and	r24, r25
recv():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:272
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
      DebugPulse(_DEBUG_PIN2, 1);
      uint8_t noti = ~i;
      if (rx_pin_read())
     5d6:	31 f1       	breq	.+76     	; 0x624 <SoftSerial::handle_interrupt()+0xac>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:273
        d |= i;
     5d8:	10 2b       	or	r17, r16
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:267
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
     5da:	00 0f       	add	r16, r16
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	e8 1a       	sub	r14, r24
     5e0:	f1 08       	sbc	r15, r1
     5e2:	89 f7       	brne	.-30     	; 0x5c6 <SoftSerial::handle_interrupt()+0x4e>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:279
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     5e4:	8f 89       	ldd	r24, Y+23	; 0x17
     5e6:	98 8d       	ldd	r25, Y+24	; 0x18
     5e8:	c0 df       	rcall	.-128    	; 0x56a <SoftSerial::tunedDelay(unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:282
    DebugPulse(_DEBUG_PIN2, 1);

    if (_inverse_logic)
     5ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5ec:	81 fd       	sbrc	r24, 1
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:283
      d = ~d;
     5ee:	10 95       	com	r17
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:286

    // if buffer full, set the overflow flag and return
    if ((_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF != _receive_buffer_head) 
     5f0:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <SoftSerial::_receive_buffer_tail>
     5f4:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <SoftSerial::_receive_buffer_head>
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	01 96       	adiw	r24, 0x01	; 1
     5fc:	8f 73       	andi	r24, 0x3F	; 63
     5fe:	99 27       	eor	r25, r25
     600:	28 17       	cp	r18, r24
     602:	19 06       	cpc	r1, r25
     604:	99 f0       	breq	.+38     	; 0x62c <SoftSerial::handle_interrupt()+0xb4>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:289
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     606:	e0 91 ee 00 	lds	r30, 0x00EE	; 0x8000ee <SoftSerial::_receive_buffer_tail>
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	ec 55       	subi	r30, 0x5C	; 92
     60e:	ff 4f       	sbci	r31, 0xFF	; 255
     610:	10 83       	st	Z, r17
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:290
      _receive_buffer_tail = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     612:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <SoftSerial::_receive_buffer_tail>
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	8f 73       	andi	r24, 0x3F	; 63
     61c:	99 27       	eor	r25, r25
     61e:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <SoftSerial::_receive_buffer_tail>
     622:	bf cf       	rjmp	.-130    	; 0x5a2 <SoftSerial::handle_interrupt()+0x2a>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:271
    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
      DebugPulse(_DEBUG_PIN2, 1);
      uint8_t noti = ~i;
     624:	80 2f       	mov	r24, r16
     626:	80 95       	com	r24
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:275
      if (rx_pin_read())
        d |= i;
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
     628:	18 23       	and	r17, r24
     62a:	d7 cf       	rjmp	.-82     	; 0x5da <SoftSerial::handle_interrupt()+0x62>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:297
    else 
    {
#if _DEBUG // for scope: pulse pin as overflow indictator
      DebugPulse(_DEBUG_PIN1, 1);
#endif
      _buffer_overflow = true;
     62c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     62e:	81 60       	ori	r24, 0x01	; 1
     630:	8b 8f       	std	Y+27, r24	; 0x1b
     632:	b7 cf       	rjmp	.-146    	; 0x5a2 <SoftSerial::handle_interrupt()+0x2a>

00000634 <ReadSetupSwitch()>:
ReadSetupSwitch():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:301
 * Function to read the analogue input and see if the voltage matches the expected range of the setup switch.
 * Will return SWITCHPRESSED or SWITCHOPEN in response
 */

byte ReadSetupSwitch()
{
     634:	cf 92       	push	r12
     636:	df 92       	push	r13
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:303
  float ADCReading;
  ADCReading=AvgADCRead(SELECTION_IN);
     63c:	f1 de       	rcall	.-542    	; 0x420 <AvgADCRead(unsigned char) [clone .constprop.15]>
     63e:	6b 01       	movw	r12, r22
     640:	7c 01       	movw	r14, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:304
  if (ADCReading >SETUP_LOWER && ADCReading < SETUP_UPPER)
     642:	26 e6       	ldi	r18, 0x66	; 102
     644:	36 e6       	ldi	r19, 0x66	; 102
     646:	46 e3       	ldi	r20, 0x36	; 54
     648:	50 e4       	ldi	r21, 0x40	; 64
     64a:	df db       	rcall	.-2114   	; 0xfffffe0a <__eeprom_end+0xff7efe0a>
     64c:	18 16       	cp	r1, r24
     64e:	7c f4       	brge	.+30     	; 0x66e <ReadSetupSwitch()+0x3a>
     650:	2a e9       	ldi	r18, 0x9A	; 154
     652:	39 e9       	ldi	r19, 0x99	; 153
     654:	49 e4       	ldi	r20, 0x49	; 73
     656:	50 e4       	ldi	r21, 0x40	; 64
     658:	c7 01       	movw	r24, r14
     65a:	b6 01       	movw	r22, r12
     65c:	96 da       	rcall	.-2772   	; 0xfffffb8a <__eeprom_end+0xff7efb8a>
     65e:	87 ff       	sbrs	r24, 7
     660:	06 c0       	rjmp	.+12     	; 0x66e <ReadSetupSwitch()+0x3a>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:306
  {
    return(SWITCHCLOSED);
     662:	87 e7       	ldi	r24, 0x77	; 119
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:312
  }
  else
  {
    return(SWITCHOPEN);
  }
}
     664:	ff 90       	pop	r15
     666:	ef 90       	pop	r14
     668:	df 90       	pop	r13
     66a:	cf 90       	pop	r12
     66c:	08 95       	ret
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:310
  {
    return(SWITCHCLOSED);
  }
  else
  {
    return(SWITCHOPEN);
     66e:	86 e6       	ldi	r24, 0x66	; 102
     670:	f9 cf       	rjmp	.-14     	; 0x664 <ReadSetupSwitch()+0x30>

00000672 <CalculateGears()>:
CalculateGears():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:145
}

byte CalculateGears(void)
{
   unsigned int GearCalc=0;
   if(ThrotNormReverse==NORMAL_THROT)
     672:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <ThrotNormReverse>
     676:	84 33       	cpi	r24, 0x34	; 52
     678:	19 f5       	brne	.+70     	; 0x6c0 <CalculateGears()+0x4e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:147
      {
          GearCalc=(ForwardThrot-NeutralThrot)/4;    // Get the difference and divide by 4
     67a:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <NeutralThrot>
     67e:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <NeutralThrot+0x1>
     682:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <ForwardThrot>
     686:	30 91 f2 00 	lds	r19, 0x00F2	; 0x8000f2 <ForwardThrot+0x1>
     68a:	28 1b       	sub	r18, r24
     68c:	39 0b       	sbc	r19, r25
     68e:	36 95       	lsr	r19
     690:	27 95       	ror	r18
     692:	36 95       	lsr	r19
     694:	27 95       	ror	r18
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:148
          FirstGear=NeutralThrot+GearCalc; 
     696:	82 0f       	add	r24, r18
     698:	93 1f       	adc	r25, r19
     69a:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <FirstGear+0x1>
     69e:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <FirstGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:149
          SecondGear=FirstGear+GearCalc;      
     6a2:	82 0f       	add	r24, r18
     6a4:	93 1f       	adc	r25, r19
     6a6:	90 93 f8 00 	sts	0x00F8, r25	; 0x8000f8 <SecondGear+0x1>
     6aa:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <SecondGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:150
          ThirdGear=SecondGear+GearCalc;
     6ae:	82 0f       	add	r24, r18
     6b0:	93 1f       	adc	r25, r19
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:158
      else if (ThrotNormReverse==REVERSE_THROT)
      {
          GearCalc=(NeutralThrot-ForwardThrot)/4;    // Get the difference and divide by 4
          FirstGear=NeutralThrot-GearCalc; 
          SecondGear=FirstGear-GearCalc;      
          ThirdGear=SecondGear-GearCalc;
     6b2:	90 93 f6 00 	sts	0x00F6, r25	; 0x8000f6 <ThirdGear+0x1>
     6b6:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <ThirdGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:177
      mySerial.print(F(" Neutral: "));
      mySerial.print(NeutralThrot);
      mySerial.print(F(" Reverse: "));
      mySerial.println(ReverseThrot);
      #endif
      CurrentGear=0; // For initialisation to be sure in case PWM count is way off.
     6ba:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <CurrentGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:178
}
     6be:	08 95       	ret
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:153
          FirstGear=NeutralThrot+GearCalc; 
          SecondGear=FirstGear+GearCalc;      
          ThirdGear=SecondGear+GearCalc;
          FourthGear=ThirdGear+GearCalc;
      }
      else if (ThrotNormReverse==REVERSE_THROT)
     6c0:	83 32       	cpi	r24, 0x23	; 35
     6c2:	d9 f7       	brne	.-10     	; 0x6ba <CalculateGears()+0x48>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:155
      {
          GearCalc=(NeutralThrot-ForwardThrot)/4;    // Get the difference and divide by 4
     6c4:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <NeutralThrot>
     6c8:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <NeutralThrot+0x1>
     6cc:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <ForwardThrot>
     6d0:	30 91 f2 00 	lds	r19, 0x00F2	; 0x8000f2 <ForwardThrot+0x1>
     6d4:	ac 01       	movw	r20, r24
     6d6:	42 1b       	sub	r20, r18
     6d8:	53 0b       	sbc	r21, r19
     6da:	9a 01       	movw	r18, r20
     6dc:	36 95       	lsr	r19
     6de:	27 95       	ror	r18
     6e0:	36 95       	lsr	r19
     6e2:	27 95       	ror	r18
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:156
          FirstGear=NeutralThrot-GearCalc; 
     6e4:	82 1b       	sub	r24, r18
     6e6:	93 0b       	sbc	r25, r19
     6e8:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <FirstGear+0x1>
     6ec:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <FirstGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:157
          SecondGear=FirstGear-GearCalc;      
     6f0:	82 1b       	sub	r24, r18
     6f2:	93 0b       	sbc	r25, r19
     6f4:	90 93 f8 00 	sts	0x00F8, r25	; 0x8000f8 <SecondGear+0x1>
     6f8:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <SecondGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:158
          ThirdGear=SecondGear-GearCalc;
     6fc:	82 1b       	sub	r24, r18
     6fe:	93 0b       	sbc	r25, r19
     700:	d8 cf       	rjmp	.-80     	; 0x6b2 <CalculateGears()+0x40>

00000702 <SoftSerial::write(unsigned char)>:
write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:491

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftSerial::write(uint8_t b)
{
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	ec 01       	movw	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:492
  if (_tx_delay == 0) {
     712:	89 8d       	ldd	r24, Y+25	; 0x19
     714:	9a 8d       	ldd	r25, Y+26	; 0x1a
     716:	89 2b       	or	r24, r25
     718:	71 f4       	brne	.+28     	; 0x736 <SoftSerial::write(unsigned char)+0x34>
_ZN5Print13setWriteErrorEi():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.h:73
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	9b 83       	std	Y+3, r25	; 0x03
     720:	8a 83       	std	Y+2, r24	; 0x02
write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:494
    setWriteError();
    return 0;
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:538

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	df 90       	pop	r13
     734:	08 95       	ret
     736:	16 2f       	mov	r17, r22
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:497
  if (_tx_delay == 0) {
    setWriteError();
    return 0;
  }

  uint8_t oldSREG = SREG;
     738:	df b6       	in	r13, 0x3f	; 63
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:498
  cli();  // turn off interrupts for a clean txmit
     73a:	f8 94       	cli
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:501

  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
     73c:	8b 8d       	ldd	r24, Y+27	; 0x1b
tx_pin_write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:319
#endif
}

void SoftSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
     73e:	81 fd       	sbrc	r24, 1
     740:	22 c0       	rjmp	.+68     	; 0x786 <SoftSerial::write(unsigned char)+0x84>
     742:	ce 01       	movw	r24, r28
     744:	a5 de       	rcall	.-694    	; 0x490 <SoftSerial::tx_pin_write(unsigned char) [clone .part.4]>
write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:502
  uint8_t oldSREG = SREG;
  cli();  // turn off interrupts for a clean txmit

  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);
     746:	89 8d       	ldd	r24, Y+25	; 0x19
     748:	9a 8d       	ldd	r25, Y+26	; 0x1a
     74a:	0f df       	rcall	.-482    	; 0x56a <SoftSerial::tunedDelay(unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:505

  // Write each of the 8 bits
  if (_inverse_logic)
     74c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     74e:	98 e0       	ldi	r25, 0x08	; 8
     750:	e9 2e       	mov	r14, r25
     752:	f1 2c       	mov	r15, r1
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:507
  {
    for (byte mask = 0x01; mask; mask <<= 1)
     754:	01 e0       	ldi	r16, 0x01	; 1
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:505
  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);

  // Write each of the 8 bits
  if (_inverse_logic)
     756:	81 ff       	sbrs	r24, 1
     758:	24 c0       	rjmp	.+72     	; 0x7a2 <SoftSerial::write(unsigned char)+0xa0>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:509
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     75a:	81 2f       	mov	r24, r17
     75c:	80 23       	and	r24, r16
     75e:	d1 f0       	breq	.+52     	; 0x794 <SoftSerial::write(unsigned char)+0x92>
tx_pin_write():
     760:	ce 01       	movw	r24, r28
     762:	96 de       	rcall	.-724    	; 0x490 <SoftSerial::tx_pin_write(unsigned char) [clone .part.4]>
write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:514
        tx_pin_write(LOW); // send 1
      else
        tx_pin_write(HIGH); // send 0
    
      tunedDelay(_tx_delay);
     764:	89 8d       	ldd	r24, Y+25	; 0x19
     766:	9a 8d       	ldd	r25, Y+26	; 0x1a
     768:	00 df       	rcall	.-512    	; 0x56a <SoftSerial::tunedDelay(unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:507
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);

  // Write each of the 8 bits
  if (_inverse_logic)
  {
    for (byte mask = 0x01; mask; mask <<= 1)
     76a:	00 0f       	add	r16, r16
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	e8 1a       	sub	r14, r24
     770:	f1 08       	sbc	r15, r1
     772:	99 f7       	brne	.-26     	; 0x75a <SoftSerial::write(unsigned char)+0x58>
tx_pin_write():
     774:	ce 01       	movw	r24, r28
     776:	8c de       	rcall	.-744    	; 0x490 <SoftSerial::tx_pin_write(unsigned char) [clone .part.4]>
write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:534
    }

    tx_pin_write(HIGH); // restore pin to natural state
  }

  SREG = oldSREG; // turn interrupts back on
     778:	df be       	out	0x3f, r13	; 63
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:535
  tunedDelay(_tx_delay);
     77a:	89 8d       	ldd	r24, Y+25	; 0x19
     77c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     77e:	f5 de       	rcall	.-534    	; 0x56a <SoftSerial::tunedDelay(unsigned int)>
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	d0 cf       	rjmp	.-96     	; 0x726 <SoftSerial::write(unsigned char)+0x24>
tx_pin_write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:322
void SoftSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
     786:	e9 89       	ldd	r30, Y+17	; 0x11
     788:	fa 89       	ldd	r31, Y+18	; 0x12
     78a:	80 81       	ld	r24, Z
     78c:	98 89       	ldd	r25, Y+16	; 0x10
     78e:	89 2b       	or	r24, r25
     790:	80 83       	st	Z, r24
     792:	d9 cf       	rjmp	.-78     	; 0x746 <SoftSerial::write(unsigned char)+0x44>
     794:	e9 89       	ldd	r30, Y+17	; 0x11
     796:	fa 89       	ldd	r31, Y+18	; 0x12
     798:	80 81       	ld	r24, Z
     79a:	98 89       	ldd	r25, Y+16	; 0x10
     79c:	89 2b       	or	r24, r25
     79e:	80 83       	st	Z, r24
     7a0:	e1 cf       	rjmp	.-62     	; 0x764 <SoftSerial::write(unsigned char)+0x62>
write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:523
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     7a2:	81 2f       	mov	r24, r17
     7a4:	80 23       	and	r24, r16
     7a6:	a9 f0       	breq	.+42     	; 0x7d2 <SoftSerial::write(unsigned char)+0xd0>
tx_pin_write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:322
void SoftSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
     7a8:	e9 89       	ldd	r30, Y+17	; 0x11
     7aa:	fa 89       	ldd	r31, Y+18	; 0x12
     7ac:	80 81       	ld	r24, Z
     7ae:	98 89       	ldd	r25, Y+16	; 0x10
     7b0:	89 2b       	or	r24, r25
     7b2:	80 83       	st	Z, r24
write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:528
      if (b & mask) // choose bit
        tx_pin_write(HIGH); // send 1
      else
        tx_pin_write(LOW); // send 0
    
      tunedDelay(_tx_delay);
     7b4:	89 8d       	ldd	r24, Y+25	; 0x19
     7b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7b8:	d8 de       	rcall	.-592    	; 0x56a <SoftSerial::tunedDelay(unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:521

    tx_pin_write(LOW); // restore pin to natural state
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
     7ba:	00 0f       	add	r16, r16
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	e8 1a       	sub	r14, r24
     7c0:	f1 08       	sbc	r15, r1
     7c2:	79 f7       	brne	.-34     	; 0x7a2 <SoftSerial::write(unsigned char)+0xa0>
tx_pin_write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:322
void SoftSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
     7c4:	e9 89       	ldd	r30, Y+17	; 0x11
     7c6:	fa 89       	ldd	r31, Y+18	; 0x12
     7c8:	80 81       	ld	r24, Z
     7ca:	98 89       	ldd	r25, Y+16	; 0x10
     7cc:	89 2b       	or	r24, r25
     7ce:	80 83       	st	Z, r24
     7d0:	d3 cf       	rjmp	.-90     	; 0x778 <SoftSerial::write(unsigned char)+0x76>
     7d2:	ce 01       	movw	r24, r28
     7d4:	5d de       	rcall	.-838    	; 0x490 <SoftSerial::tx_pin_write(unsigned char) [clone .part.4]>
     7d6:	ee cf       	rjmp	.-36     	; 0x7b4 <SoftSerial::write(unsigned char)+0xb2>

000007d8 <Print::print(__FlashStringHelper const*) [clone .constprop.13]>:
print():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:222
  return vfprintf(&f, ifsh, ap);
}

#ifdef FLASHSTRING_SUPPORT

size_t Print::print(const __FlashStringHelper *ifsh)
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	8c 01       	movw	r16, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:225
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     7e2:	d0 e0       	ldi	r29, 0x00	; 0
     7e4:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:227
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     7e6:	f8 01       	movw	r30, r16
     7e8:	ec 0f       	add	r30, r28
     7ea:	fd 1f       	adc	r31, r29
     7ec:	64 91       	lpm	r22, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:228
    if (c == 0) break;
     7ee:	66 23       	and	r22, r22
     7f0:	39 f0       	breq	.+14     	; 0x800 <Print::print(__FlashStringHelper const*) [clone .constprop.13]+0x28>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:229
    if (write(c)) n++;
     7f2:	89 e8       	ldi	r24, 0x89	; 137
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	85 df       	rcall	.-246    	; 0x702 <SoftSerial::write(unsigned char)>
     7f8:	89 2b       	or	r24, r25
     7fa:	11 f0       	breq	.+4      	; 0x800 <Print::print(__FlashStringHelper const*) [clone .constprop.13]+0x28>
     7fc:	21 96       	adiw	r28, 0x01	; 1
     7fe:	f3 cf       	rjmp	.-26     	; 0x7e6 <Print::print(__FlashStringHelper const*) [clone .constprop.13]+0xe>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:233
    else break;
  }
  return n;
}
     800:	ce 01       	movw	r24, r28
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	08 95       	ret

0000080c <Print::println(__FlashStringHelper const*) [clone .constprop.12]>:
println():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:235

size_t Print::println(const __FlashStringHelper *ifsh)
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:237
{
  size_t n = print(ifsh);
     810:	e3 df       	rcall	.-58     	; 0x7d8 <Print::print(__FlashStringHelper const*) [clone .constprop.13]>
     812:	ec 01       	movw	r28, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:238
  n += println();
     814:	89 e8       	ldi	r24, 0x89	; 137
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	7a dd       	rcall	.-1292   	; 0x30e <Print::println()>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:240
  return n;
}
     81a:	8c 0f       	add	r24, r28
     81c:	9d 1f       	adc	r25, r29
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	08 95       	ret

00000824 <digitalWrite>:
digitalWrite():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:139
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	fc 01       	movw	r30, r24
     828:	ec 5d       	subi	r30, 0xDC	; 220
     82a:	ff 4f       	sbci	r31, 0xFF	; 255
     82c:	34 91       	lpm	r19, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:140
  uint8_t bit = digitalPinToBitMask(pin);
     82e:	fc 01       	movw	r30, r24
     830:	e5 54       	subi	r30, 0x45	; 69
     832:	fe 4f       	sbci	r31, 0xFE	; 254
     834:	24 91       	lpm	r18, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:141
  uint8_t port = digitalPinToPort(pin);
     836:	fc 01       	movw	r30, r24
     838:	eb 54       	subi	r30, 0x4B	; 75
     83a:	fe 4f       	sbci	r31, 0xFE	; 254
     83c:	e4 91       	lpm	r30, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:144
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     83e:	ee 23       	and	r30, r30
     840:	b9 f0       	breq	.+46     	; 0x870 <digitalWrite+0x4c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:148

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     842:	33 23       	and	r19, r19
     844:	29 f0       	breq	.+10     	; 0x850 <digitalWrite+0x2c>
turnOffPWM():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:67
}

static void turnOffPWM(uint8_t timer)
{
  #if defined(TCCR0A) && defined(COM0A1)
    if( timer == TIMER0A){
     846:	31 30       	cpi	r19, 0x01	; 1
     848:	a1 f4       	brne	.+40     	; 0x872 <digitalWrite+0x4e>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:68
      cbi(TCCR0A, COM0A1);
     84a:	8a b5       	in	r24, 0x2a	; 42
     84c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:74
      //cbi(TCCR0A, COM0A0);
    } else
  #endif
  #if defined(TCCR0A) && defined(COM0B1)
    if( timer == TIMER0B){
      cbi(TCCR0A, COM0B1);
     84e:	8a bd       	out	0x2a, r24	; 42
digitalWrite():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:150

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	ee 0f       	add	r30, r30
     854:	ff 1f       	adc	r31, r31
     856:	e7 55       	subi	r30, 0x57	; 87
     858:	fe 4f       	sbci	r31, 0xFE	; 254
     85a:	a5 91       	lpm	r26, Z+
     85c:	b4 91       	lpm	r27, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:153

  if (val == LOW) {
    uint8_t oldSREG = SREG;
     85e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:152
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);

  if (val == LOW) {
     860:	61 11       	cpse	r22, r1
     862:	18 c0       	rjmp	.+48     	; 0x894 <digitalWrite+0x70>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:154
    uint8_t oldSREG = SREG;
    cli();
     864:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:155
    *out &= ~bit;
     866:	ec 91       	ld	r30, X
     868:	20 95       	com	r18
     86a:	2e 23       	and	r18, r30
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:160
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    *out |= bit;
     86c:	2c 93       	st	X, r18
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:161
    SREG = oldSREG;
     86e:	8f bf       	out	0x3f, r24	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:163
  }
}
     870:	08 95       	ret
turnOffPWM():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:73
      cbi(TCCR0A, COM0A1);
      //cbi(TCCR0A, COM0A0);
    } else
  #endif
  #if defined(TCCR0A) && defined(COM0B1)
    if( timer == TIMER0B){
     872:	32 30       	cpi	r19, 0x02	; 2
     874:	19 f4       	brne	.+6      	; 0x87c <digitalWrite+0x58>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:74
      cbi(TCCR0A, COM0B1);
     876:	8a b5       	in	r24, 0x2a	; 42
     878:	8f 7d       	andi	r24, 0xDF	; 223
     87a:	e9 cf       	rjmp	.-46     	; 0x84e <digitalWrite+0x2a>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:106
      //cbi(TCCR1C,COM1D0);
    } else
  #else
    // Timer1 for non-x61/x7
    #if defined(TCCR1) && defined(COM1A1) // x5
      if(timer == TIMER1A){
     87c:	33 30       	cpi	r19, 0x03	; 3
     87e:	21 f4       	brne	.+8      	; 0x888 <digitalWrite+0x64>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:107
        TCCR1 &= ~(1<<COM1A1);
     880:	80 b7       	in	r24, 0x30	; 48
     882:	8f 7d       	andi	r24, 0xDF	; 223
     884:	80 bf       	out	0x30, r24	; 48
     886:	e4 cf       	rjmp	.-56     	; 0x850 <digitalWrite+0x2c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:112
        //cbi(TCCR1, COM1A0);
      } else
    #endif
    #if defined(TCCR1) && defined(COM1B1) // x5
      if( timer == TIMER1B){
     888:	34 30       	cpi	r19, 0x04	; 4
     88a:	11 f7       	brne	.-60     	; 0x850 <digitalWrite+0x2c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:113
        GTCCR &= ~(1<<COM1B1);
     88c:	8c b5       	in	r24, 0x2c	; 44
     88e:	8f 7d       	andi	r24, 0xDF	; 223
     890:	8c bd       	out	0x2c, r24	; 44
     892:	de cf       	rjmp	.-68     	; 0x850 <digitalWrite+0x2c>
digitalWrite():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:159
    cli();
    *out &= ~bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
     894:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:160
    *out |= bit;
     896:	ec 91       	ld	r30, X
     898:	2e 2b       	or	r18, r30
     89a:	e8 cf       	rjmp	.-48     	; 0x86c <digitalWrite+0x48>

0000089c <BlinkLED(unsigned char, unsigned int, unsigned int)>:
BlinkLED():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:788


}// End loop()

void BlinkLED(byte numTimes, word ontime, word offtime)
{
     89c:	8f 92       	push	r8
     89e:	9f 92       	push	r9
     8a0:	af 92       	push	r10
     8a2:	bf 92       	push	r11
     8a4:	cf 92       	push	r12
     8a6:	df 92       	push	r13
     8a8:	ef 92       	push	r14
     8aa:	ff 92       	push	r15
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	d8 2f       	mov	r29, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:789
  byte numblinks=0;
     8b2:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:793
  while(numblinks<numTimes)
  {
      digitalWrite(LEDPIN,LEDON);
      delay(ontime);
     8b4:	4b 01       	movw	r8, r22
     8b6:	b1 2c       	mov	r11, r1
     8b8:	a1 2c       	mov	r10, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:795
      digitalWrite(LEDPIN,LEDOFF);
      delay(offtime);
     8ba:	6a 01       	movw	r12, r20
     8bc:	f1 2c       	mov	r15, r1
     8be:	e1 2c       	mov	r14, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:792
void BlinkLED(byte numTimes, word ontime, word offtime)
{
  byte numblinks=0;
  while(numblinks<numTimes)
  {
      digitalWrite(LEDPIN,LEDON);
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	af df       	rcall	.-162    	; 0x824 <digitalWrite>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:793
      delay(ontime);
     8c6:	c5 01       	movw	r24, r10
     8c8:	b4 01       	movw	r22, r8
     8ca:	81 dd       	rcall	.-1278   	; 0x3ce <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:794
      digitalWrite(LEDPIN,LEDOFF);
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	82 e0       	ldi	r24, 0x02	; 2
     8d0:	a9 df       	rcall	.-174    	; 0x824 <digitalWrite>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:795
      delay(offtime);
     8d2:	c7 01       	movw	r24, r14
     8d4:	b6 01       	movw	r22, r12
     8d6:	7b dd       	rcall	.-1290   	; 0x3ce <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:796
      numblinks++;
     8d8:	cf 5f       	subi	r28, 0xFF	; 255
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:790
}// End loop()

void BlinkLED(byte numTimes, word ontime, word offtime)
{
  byte numblinks=0;
  while(numblinks<numTimes)
     8da:	dc 13       	cpse	r29, r28
     8dc:	f1 cf       	rjmp	.-30     	; 0x8c0 <BlinkLED(unsigned char, unsigned int, unsigned int)+0x24>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:799
      digitalWrite(LEDPIN,LEDOFF);
      delay(offtime);
      numblinks++;
  }    
  
}
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	df 90       	pop	r13
     8e8:	cf 90       	pop	r12
     8ea:	bf 90       	pop	r11
     8ec:	af 90       	pop	r10
     8ee:	9f 90       	pop	r9
     8f0:	8f 90       	pop	r8
     8f2:	08 95       	ret

000008f4 <pinMode>:
pinMode():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:33
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:35
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t bit = digitalPinToBitMask(pin);
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	fc 01       	movw	r30, r24
     8fc:	e5 54       	subi	r30, 0x45	; 69
     8fe:	fe 4f       	sbci	r31, 0xFE	; 254
     900:	24 91       	lpm	r18, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:36
  uint8_t port = digitalPinToPort(pin);
     902:	8b 54       	subi	r24, 0x4B	; 75
     904:	9e 4f       	sbci	r25, 0xFE	; 254
     906:	fc 01       	movw	r30, r24
     908:	84 91       	lpm	r24, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:39
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     90a:	88 23       	and	r24, r24
     90c:	c9 f0       	breq	.+50     	; 0x940 <pinMode+0x4c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:41

  reg = portModeRegister(port);
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	fc 01       	movw	r30, r24
     916:	e2 5e       	subi	r30, 0xE2	; 226
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	a5 91       	lpm	r26, Z+
     91c:	b4 91       	lpm	r27, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:42
  out = portOutputRegister(port);
     91e:	fc 01       	movw	r30, r24
     920:	e7 55       	subi	r30, 0x57	; 87
     922:	fe 4f       	sbci	r31, 0xFE	; 254
     924:	c5 91       	lpm	r28, Z+
     926:	d4 91       	lpm	r29, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:44

  if (mode == INPUT) {
     928:	61 11       	cpse	r22, r1
     92a:	0d c0       	rjmp	.+26     	; 0x946 <pinMode+0x52>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:45
    uint8_t oldSREG = SREG;
     92c:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:46
                cli();
     92e:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:47
    *reg &= ~bit;
     930:	8c 91       	ld	r24, X
     932:	20 95       	com	r18
     934:	82 23       	and	r24, r18
     936:	8c 93       	st	X, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:48
    *out &= ~bit;
     938:	88 81       	ld	r24, Y
     93a:	28 23       	and	r18, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:54
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
                cli();
    *reg &= ~bit;
    *out |= bit;
     93c:	28 83       	st	Y, r18
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:55
    SREG = oldSREG;
     93e:	9f bf       	out	0x3f, r25	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:62
    uint8_t oldSREG = SREG;
                cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	08 95       	ret
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:50
    uint8_t oldSREG = SREG;
                cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     946:	62 30       	cpi	r22, 0x02	; 2
     948:	51 f4       	brne	.+20     	; 0x95e <pinMode+0x6a>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:51
    uint8_t oldSREG = SREG;
     94a:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:52
                cli();
     94c:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:53
    *reg &= ~bit;
     94e:	3c 91       	ld	r19, X
     950:	82 2f       	mov	r24, r18
     952:	80 95       	com	r24
     954:	83 23       	and	r24, r19
     956:	8c 93       	st	X, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:54
    *out |= bit;
     958:	e8 81       	ld	r30, Y
     95a:	2e 2b       	or	r18, r30
     95c:	ef cf       	rjmp	.-34     	; 0x93c <pinMode+0x48>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:57
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     95e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:58
                cli();
     960:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:59
    *reg |= bit;
     962:	ec 91       	ld	r30, X
     964:	2e 2b       	or	r18, r30
     966:	2c 93       	st	X, r18
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:60
    SREG = oldSREG;
     968:	8f bf       	out	0x3f, r24	; 63
     96a:	ea cf       	rjmp	.-44     	; 0x940 <pinMode+0x4c>

0000096c <pulseIn.constprop.33>:
pulseIn():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:33
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	8a 01       	movw	r16, r20
     972:	9b 01       	movw	r18, r22
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:38
{
    // cache the port and bit of the pin in order to speed up the
    // pulse width measuring loop and achieve finer resolution.  calling
    // digitalRead() instead yields much coarser resolution.
    uint8_t bit = digitalPinToBitMask(pin);
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	fc 01       	movw	r30, r24
     978:	e5 54       	subi	r30, 0x45	; 69
     97a:	fe 4f       	sbci	r31, 0xFE	; 254
     97c:	64 91       	lpm	r22, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:39
    uint8_t port = digitalPinToPort(pin);
     97e:	fc 01       	movw	r30, r24
     980:	eb 54       	subi	r30, 0x4B	; 75
     982:	fe 4f       	sbci	r31, 0xFE	; 254
     984:	e4 91       	lpm	r30, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:46

    // convert the timeout from microseconds to a number of times through
    // the initial loop; it takes approximately 16 clock cycles per iteration
    unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

    unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	ee 0f       	add	r30, r30
     98a:	ff 1f       	adc	r31, r31
     98c:	e1 55       	subi	r30, 0x51	; 81
     98e:	fe 4f       	sbci	r31, 0xFE	; 254
     990:	85 91       	lpm	r24, Z+
     992:	94 91       	lpm	r25, Z
     994:	46 2f       	mov	r20, r22
     996:	50 d4       	rcall	.+2208   	; 0x1238 <countPulseASM>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:49

    // prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
    if (width)
     998:	61 15       	cp	r22, r1
     99a:	71 05       	cpc	r23, r1
     99c:	81 05       	cpc	r24, r1
     99e:	91 05       	cpc	r25, r1
     9a0:	29 f0       	breq	.+10     	; 0x9ac <pulseIn.constprop.33+0x40>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:50
        return clockCyclesToMicroseconds(width * 16 + 16);
     9a2:	6f 5f       	subi	r22, 0xFF	; 255
     9a4:	7f 4f       	sbci	r23, 0xFF	; 255
     9a6:	8f 4f       	sbci	r24, 0xFF	; 255
     9a8:	9f 4f       	sbci	r25, 0xFF	; 255
     9aa:	9f 70       	andi	r25, 0x0F	; 15
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:53
    else
        return 0;
}
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	08 95       	ret

000009b2 <GetCurrentPWMVals()>:
GetCurrentPWMVals():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:704
*/
byte GetCurrentPWMVals()
{
  if (PWMFound==1 || PWMFound == 11);     // Looking for just the HORN or HORN + Throttle
	{
    HornPWM=pulseIn(HORN_IN,HIGH,22000);
     9b2:	40 ef       	ldi	r20, 0xF0	; 240
     9b4:	55 e5       	ldi	r21, 0x55	; 85
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	d7 df       	rcall	.-82     	; 0x96c <pulseIn.constprop.33>
     9be:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <HornPWM+0x1>
     9c2:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <HornPWM>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:706
	}
	if(PWMFound==10 || PWMFound==11)
     9c6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <PWMFound>
     9ca:	8a 50       	subi	r24, 0x0A	; 10
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	50 f4       	brcc	.+20     	; 0x9e4 <GetCurrentPWMVals()+0x32>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:708
  {
		ThrottlePWM=pulseIn(THROTTLE_IN,HIGH,22000);
     9d0:	40 ef       	ldi	r20, 0xF0	; 240
     9d2:	55 e5       	ldi	r21, 0x55	; 85
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	c8 df       	rcall	.-112    	; 0x96c <pulseIn.constprop.33>
     9dc:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <ThrottlePWM+0x1>
     9e0:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <ThrottlePWM>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:710
  }
}
     9e4:	08 95       	ret

000009e6 <CheckforPWMInputs()>:
CheckforPWMInputs():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:326
 * 11   Horn and throttle present
 * ONLY USED IN SETUP NOW
 */

byte CheckforPWMInputs(void)
{
     9e6:	cf 92       	push	r12
     9e8:	df 92       	push	r13
     9ea:	ef 92       	push	r14
     9ec:	ff 92       	push	r15
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:330
  int pwm1,pwm2;
  byte pwmfound=0;

  pwm1=pulseIn(HORN_IN,HIGH);
     9ee:	40 e4       	ldi	r20, 0x40	; 64
     9f0:	52 e4       	ldi	r21, 0x42	; 66
     9f2:	6f e0       	ldi	r22, 0x0F	; 15
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	b9 df       	rcall	.-142    	; 0x96c <pulseIn.constprop.33>
     9fa:	6b 01       	movw	r12, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:331
  pwm2=pulseIn(THROTTLE_IN,HIGH);
     9fc:	40 e4       	ldi	r20, 0x40	; 64
     9fe:	52 e4       	ldi	r21, 0x42	; 66
     a00:	6f e0       	ldi	r22, 0x0F	; 15
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	b2 df       	rcall	.-156    	; 0x96c <pulseIn.constprop.33>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:336
/*
 pwm1=HornIn.width_us();
 pwm2=ThrotIn.width_us();
 */
  if(pwm1>800 && pwm1 <2500)
     a08:	21 e2       	ldi	r18, 0x21	; 33
     a0a:	c2 1a       	sub	r12, r18
     a0c:	23 e0       	ldi	r18, 0x03	; 3
     a0e:	d2 0a       	sbc	r13, r18
     a10:	21 e0       	ldi	r18, 0x01	; 1
     a12:	33 ea       	ldi	r19, 0xA3	; 163
     a14:	c3 16       	cp	r12, r19
     a16:	36 e0       	ldi	r19, 0x06	; 6
     a18:	d3 06       	cpc	r13, r19
     a1a:	08 f0       	brcs	.+2      	; 0xa1e <CheckforPWMInputs()+0x38>
     a1c:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:340
  {
    pwmfound=1;   // Found horn PWM
  }
  if (pwm2>800 && pwm2 <2500)
     a1e:	ab 01       	movw	r20, r22
     a20:	41 52       	subi	r20, 0x21	; 33
     a22:	53 40       	sbci	r21, 0x03	; 3
     a24:	43 3a       	cpi	r20, 0xA3	; 163
     a26:	56 40       	sbci	r21, 0x06	; 6
     a28:	08 f4       	brcc	.+2      	; 0xa2c <CheckforPWMInputs()+0x46>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:342
  {
    pwmfound+=10; // Found throttle PWM
     a2a:	26 5f       	subi	r18, 0xF6	; 246
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:345
  }
  return(pwmfound); // Return result. Is initialised to zero in case no signals found
}
     a2c:	82 2f       	mov	r24, r18
     a2e:	ff 90       	pop	r15
     a30:	ef 90       	pop	r14
     a32:	df 90       	pop	r13
     a34:	cf 90       	pop	r12
     a36:	08 95       	ret

00000a38 <Print::write(char const*)>:
write():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.h:81

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     a38:	fb 01       	movw	r30, r22
     a3a:	01 90       	ld	r0, Z+
     a3c:	00 20       	and	r0, r0
     a3e:	e9 f7       	brne	.-6      	; 0xa3a <Print::write(char const*)+0x2>
     a40:	31 97       	sbiw	r30, 0x01	; 1
     a42:	af 01       	movw	r20, r30
     a44:	46 1b       	sub	r20, r22
     a46:	57 0b       	sbc	r21, r23
     a48:	dc 01       	movw	r26, r24
     a4a:	ed 91       	ld	r30, X+
     a4c:	fc 91       	ld	r31, X
     a4e:	02 80       	ldd	r0, Z+2	; 0x02
     a50:	f3 81       	ldd	r31, Z+3	; 0x03
     a52:	e0 2d       	mov	r30, r0
     a54:	09 94       	ijmp

00000a56 <Print::printNumber(unsigned long, unsigned char)>:
printNumber():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:257

#endif

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     a56:	8f 92       	push	r8
     a58:	9f 92       	push	r9
     a5a:	af 92       	push	r10
     a5c:	bf 92       	push	r11
     a5e:	cf 92       	push	r12
     a60:	df 92       	push	r13
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
     a72:	a1 97       	sbiw	r28, 0x21	; 33
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	f8 94       	cli
     a78:	de bf       	out	0x3e, r29	; 62
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	cd bf       	out	0x3d, r28	; 61
     a7e:	6c 01       	movw	r12, r24
     a80:	14 2f       	mov	r17, r20
     a82:	e5 2f       	mov	r30, r21
     a84:	cb 01       	movw	r24, r22
     a86:	02 2f       	mov	r16, r18
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:261
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     a88:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:264

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     a8a:	22 30       	cpi	r18, 0x02	; 2
     a8c:	08 f4       	brcc	.+2      	; 0xa90 <Print::printNumber(unsigned long, unsigned char)+0x3a>
     a8e:	0a e0       	ldi	r16, 0x0A	; 10
     a90:	7e 01       	movw	r14, r28
     a92:	21 e2       	ldi	r18, 0x21	; 33
     a94:	e2 0e       	add	r14, r18
     a96:	f1 1c       	adc	r15, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:268

  do {
    unsigned long m = n;
    n /= base;
     a98:	80 2e       	mov	r8, r16
     a9a:	91 2c       	mov	r9, r1
     a9c:	b1 2c       	mov	r11, r1
     a9e:	a1 2c       	mov	r10, r1
     aa0:	61 2f       	mov	r22, r17
     aa2:	7e 2f       	mov	r23, r30
     aa4:	a5 01       	movw	r20, r10
     aa6:	94 01       	movw	r18, r8
     aa8:	d8 d9       	rcall	.-3152   	; 0xfffffe5a <__eeprom_end+0xff7efe5a>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:269
    char c = m - base * n;
     aaa:	80 2f       	mov	r24, r16
     aac:	62 2f       	mov	r22, r18
     aae:	a4 d9       	rcall	.-3256   	; 0xfffffdf8 <__eeprom_end+0xff7efdf8>
     ab0:	18 1b       	sub	r17, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:270
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     ab2:	1a 30       	cpi	r17, 0x0A	; 10
     ab4:	0c f5       	brge	.+66     	; 0xaf8 <Print::printNumber(unsigned long, unsigned char)+0xa2>
     ab6:	10 5d       	subi	r17, 0xD0	; 208
     ab8:	f7 01       	movw	r30, r14
     aba:	12 93       	st	-Z, r17
     abc:	7f 01       	movw	r14, r30
     abe:	12 2f       	mov	r17, r18
     ac0:	e3 2f       	mov	r30, r19
     ac2:	ca 01       	movw	r24, r20
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:271
  } while(n);
     ac4:	23 2b       	or	r18, r19
     ac6:	24 2b       	or	r18, r20
     ac8:	25 2b       	or	r18, r21
     aca:	51 f7       	brne	.-44     	; 0xaa0 <Print::printNumber(unsigned long, unsigned char)+0x4a>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:273

  return write(str);
     acc:	b7 01       	movw	r22, r14
     ace:	c6 01       	movw	r24, r12
     ad0:	b3 df       	rcall	.-154    	; 0xa38 <Print::write(char const*)>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:274
}
     ad2:	a1 96       	adiw	r28, 0x21	; 33
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	cf 90       	pop	r12
     aee:	bf 90       	pop	r11
     af0:	af 90       	pop	r10
     af2:	9f 90       	pop	r9
     af4:	8f 90       	pop	r8
     af6:	08 95       	ret
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:270

  do {
    unsigned long m = n;
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     af8:	19 5c       	subi	r17, 0xC9	; 201
     afa:	de cf       	rjmp	.-68     	; 0xab8 <Print::printNumber(unsigned long, unsigned char)+0x62>

00000afc <Print::print(unsigned char, int) [clone .constprop.24]>:
print():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:63
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
     afc:	48 2f       	mov	r20, r24
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:95
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     b04:	20 e1       	ldi	r18, 0x10	; 16
     b06:	83 e4       	ldi	r24, 0x43	; 67
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	a5 cf       	rjmp	.-182    	; 0xa56 <Print::printNumber(unsigned long, unsigned char)>

00000b0c <DFPlayerMini_Fast::sendData() [clone .constprop.19]>:
sendData():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:924
/**************************************************************************/
 /*!
	 @brief  Send a config/command packet to the MP3 player.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::sendData()
     b0c:	af 92       	push	r10
     b0e:	bf 92       	push	r11
     b10:	cf 92       	push	r12
     b12:	df 92       	push	r13
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:926
{
	_serial->write(sendStack.start_byte);
     b20:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <myMP3>
     b24:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <myMP3+0x1>
     b28:	dc 01       	movw	r26, r24
     b2a:	ed 91       	ld	r30, X+
     b2c:	fc 91       	ld	r31, X
     b2e:	01 90       	ld	r0, Z+
     b30:	f0 81       	ld	r31, Z
     b32:	e0 2d       	mov	r30, r0
     b34:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <myMP3+0x2>
     b38:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:927
	_serial->write(sendStack.version);
     b3a:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <myMP3>
     b3e:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <myMP3+0x1>
     b42:	dc 01       	movw	r26, r24
     b44:	ed 91       	ld	r30, X+
     b46:	fc 91       	ld	r31, X
     b48:	01 90       	ld	r0, Z+
     b4a:	f0 81       	ld	r31, Z
     b4c:	e0 2d       	mov	r30, r0
     b4e:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <myMP3+0x3>
     b52:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:928
	_serial->write(sendStack.length);
     b54:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <myMP3>
     b58:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <myMP3+0x1>
     b5c:	dc 01       	movw	r26, r24
     b5e:	ed 91       	ld	r30, X+
     b60:	fc 91       	ld	r31, X
     b62:	01 90       	ld	r0, Z+
     b64:	f0 81       	ld	r31, Z
     b66:	e0 2d       	mov	r30, r0
     b68:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <myMP3+0x4>
     b6c:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:929
	_serial->write(sendStack.commandValue);
     b6e:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <myMP3>
     b72:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <myMP3+0x1>
     b76:	dc 01       	movw	r26, r24
     b78:	ed 91       	ld	r30, X+
     b7a:	fc 91       	ld	r31, X
     b7c:	01 90       	ld	r0, Z+
     b7e:	f0 81       	ld	r31, Z
     b80:	e0 2d       	mov	r30, r0
     b82:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <myMP3+0x5>
     b86:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:930
	_serial->write(sendStack.feedbackValue);
     b88:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <myMP3>
     b8c:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <myMP3+0x1>
     b90:	dc 01       	movw	r26, r24
     b92:	ed 91       	ld	r30, X+
     b94:	fc 91       	ld	r31, X
     b96:	01 90       	ld	r0, Z+
     b98:	f0 81       	ld	r31, Z
     b9a:	e0 2d       	mov	r30, r0
     b9c:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <myMP3+0x6>
     ba0:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:931
	_serial->write(sendStack.paramMSB);
     ba2:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <myMP3>
     ba6:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <myMP3+0x1>
     baa:	dc 01       	movw	r26, r24
     bac:	ed 91       	ld	r30, X+
     bae:	fc 91       	ld	r31, X
     bb0:	01 90       	ld	r0, Z+
     bb2:	f0 81       	ld	r31, Z
     bb4:	e0 2d       	mov	r30, r0
     bb6:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <myMP3+0x7>
     bba:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:932
	_serial->write(sendStack.paramLSB);
     bbc:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <myMP3>
     bc0:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <myMP3+0x1>
     bc4:	dc 01       	movw	r26, r24
     bc6:	ed 91       	ld	r30, X+
     bc8:	fc 91       	ld	r31, X
     bca:	01 90       	ld	r0, Z+
     bcc:	f0 81       	ld	r31, Z
     bce:	e0 2d       	mov	r30, r0
     bd0:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <myMP3+0x8>
     bd4:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:933
	_serial->write(sendStack.checksumMSB);
     bd6:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <myMP3>
     bda:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <myMP3+0x1>
     bde:	dc 01       	movw	r26, r24
     be0:	ed 91       	ld	r30, X+
     be2:	fc 91       	ld	r31, X
     be4:	01 90       	ld	r0, Z+
     be6:	f0 81       	ld	r31, Z
     be8:	e0 2d       	mov	r30, r0
     bea:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <myMP3+0x9>
     bee:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:934
	_serial->write(sendStack.checksumLSB);
     bf0:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <myMP3>
     bf4:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <myMP3+0x1>
     bf8:	dc 01       	movw	r26, r24
     bfa:	ed 91       	ld	r30, X+
     bfc:	fc 91       	ld	r31, X
     bfe:	01 90       	ld	r0, Z+
     c00:	f0 81       	ld	r31, Z
     c02:	e0 2d       	mov	r30, r0
     c04:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <myMP3+0xa>
     c08:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:935
	_serial->write(sendStack.end_byte);
     c0a:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <myMP3>
     c0e:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <myMP3+0x1>
     c12:	dc 01       	movw	r26, r24
     c14:	ed 91       	ld	r30, X+
     c16:	fc 91       	ld	r31, X
     c18:	01 90       	ld	r0, Z+
     c1a:	f0 81       	ld	r31, Z
     c1c:	e0 2d       	mov	r30, r0
     c1e:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <myMP3+0xb>
     c22:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:937

	if (_debug)
     c24:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <myMP3+0x16>
     c28:	88 23       	and	r24, r24
     c2a:	09 f4       	brne	.+2      	; 0xc2e <DFPlayerMini_Fast::sendData() [clone .constprop.19]+0x122>
     c2c:	69 c0       	rjmp	.+210    	; 0xd00 <DFPlayerMini_Fast::sendData() [clone .constprop.19]+0x1f4>
print():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:53
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
     c2e:	66 e9       	ldi	r22, 0x96	; 150
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	83 e4       	ldi	r24, 0x43	; 67
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	00 df       	rcall	.-512    	; 0xa38 <Print::write(char const*)>
     c38:	a0 90 61 01 	lds	r10, 0x0161	; 0x800161 <myMP3+0x2>
     c3c:	b0 90 62 01 	lds	r11, 0x0162	; 0x800162 <myMP3+0x3>
     c40:	c0 90 63 01 	lds	r12, 0x0163	; 0x800163 <myMP3+0x4>
     c44:	d0 90 64 01 	lds	r13, 0x0164	; 0x800164 <myMP3+0x5>
     c48:	e0 90 65 01 	lds	r14, 0x0165	; 0x800165 <myMP3+0x6>
     c4c:	f0 90 66 01 	lds	r15, 0x0166	; 0x800166 <myMP3+0x7>
     c50:	00 91 67 01 	lds	r16, 0x0167	; 0x800167 <myMP3+0x8>
     c54:	10 91 68 01 	lds	r17, 0x0168	; 0x800168 <myMP3+0x9>
     c58:	d0 91 69 01 	lds	r29, 0x0169	; 0x800169 <myMP3+0xa>
     c5c:	c0 91 6a 01 	lds	r28, 0x016A	; 0x80016a <myMP3+0xb>
     c60:	6c e9       	ldi	r22, 0x9C	; 156
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	83 e4       	ldi	r24, 0x43	; 67
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	e7 de       	rcall	.-562    	; 0xa38 <Print::write(char const*)>
println():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:136
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     c6a:	83 e4       	ldi	r24, 0x43	; 67
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	4f db       	rcall	.-2402   	; 0x30e <Print::println()>
printStack():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:1193
 */
 /**************************************************************************/
void DFPlayerMini_Fast::printStack(stack _stack)
{
	Serial.println("Stack:");
	Serial.print(_stack.start_byte, HEX);    Serial.print(' ');
     c70:	8a 2d       	mov	r24, r10
     c72:	44 df       	rcall	.-376    	; 0xafc <Print::print(unsigned char, int) [clone .constprop.24]>
     c74:	60 e2       	ldi	r22, 0x20	; 32
     c76:	83 e4       	ldi	r24, 0x43	; 67
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	42 db       	rcall	.-2428   	; 0x300 <Print::print(char)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:1194
	Serial.print(_stack.version, HEX);       Serial.print(' ');
     c7c:	8b 2d       	mov	r24, r11
     c7e:	3e df       	rcall	.-388    	; 0xafc <Print::print(unsigned char, int) [clone .constprop.24]>
     c80:	60 e2       	ldi	r22, 0x20	; 32
     c82:	83 e4       	ldi	r24, 0x43	; 67
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	3c db       	rcall	.-2440   	; 0x300 <Print::print(char)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:1195
	Serial.print(_stack.length, HEX);        Serial.print(' ');
     c88:	8c 2d       	mov	r24, r12
     c8a:	38 df       	rcall	.-400    	; 0xafc <Print::print(unsigned char, int) [clone .constprop.24]>
     c8c:	60 e2       	ldi	r22, 0x20	; 32
     c8e:	83 e4       	ldi	r24, 0x43	; 67
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	36 db       	rcall	.-2452   	; 0x300 <Print::print(char)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:1196
	Serial.print(_stack.commandValue, HEX);  Serial.print(' ');
     c94:	8d 2d       	mov	r24, r13
     c96:	32 df       	rcall	.-412    	; 0xafc <Print::print(unsigned char, int) [clone .constprop.24]>
     c98:	60 e2       	ldi	r22, 0x20	; 32
     c9a:	83 e4       	ldi	r24, 0x43	; 67
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	30 db       	rcall	.-2464   	; 0x300 <Print::print(char)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:1197
	Serial.print(_stack.feedbackValue, HEX); Serial.print(' ');
     ca0:	8e 2d       	mov	r24, r14
     ca2:	2c df       	rcall	.-424    	; 0xafc <Print::print(unsigned char, int) [clone .constprop.24]>
     ca4:	60 e2       	ldi	r22, 0x20	; 32
     ca6:	83 e4       	ldi	r24, 0x43	; 67
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	2a db       	rcall	.-2476   	; 0x300 <Print::print(char)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:1198
	Serial.print(_stack.paramMSB, HEX);      Serial.print(' ');
     cac:	8f 2d       	mov	r24, r15
     cae:	26 df       	rcall	.-436    	; 0xafc <Print::print(unsigned char, int) [clone .constprop.24]>
     cb0:	60 e2       	ldi	r22, 0x20	; 32
     cb2:	83 e4       	ldi	r24, 0x43	; 67
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	24 db       	rcall	.-2488   	; 0x300 <Print::print(char)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:1199
	Serial.print(_stack.paramLSB, HEX);      Serial.print(' ');
     cb8:	80 2f       	mov	r24, r16
     cba:	20 df       	rcall	.-448    	; 0xafc <Print::print(unsigned char, int) [clone .constprop.24]>
     cbc:	60 e2       	ldi	r22, 0x20	; 32
     cbe:	83 e4       	ldi	r24, 0x43	; 67
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	1e db       	rcall	.-2500   	; 0x300 <Print::print(char)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:1200
	Serial.print(_stack.checksumMSB, HEX);   Serial.print(' ');
     cc4:	81 2f       	mov	r24, r17
     cc6:	1a df       	rcall	.-460    	; 0xafc <Print::print(unsigned char, int) [clone .constprop.24]>
     cc8:	60 e2       	ldi	r22, 0x20	; 32
     cca:	83 e4       	ldi	r24, 0x43	; 67
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	18 db       	rcall	.-2512   	; 0x300 <Print::print(char)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:1201
	Serial.print(_stack.checksumLSB, HEX);   Serial.print(' ');
     cd0:	8d 2f       	mov	r24, r29
     cd2:	14 df       	rcall	.-472    	; 0xafc <Print::print(unsigned char, int) [clone .constprop.24]>
     cd4:	60 e2       	ldi	r22, 0x20	; 32
     cd6:	83 e4       	ldi	r24, 0x43	; 67
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	12 db       	rcall	.-2524   	; 0x300 <Print::print(char)>
println():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:149
  return n;
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
     cdc:	8c 2f       	mov	r24, r28
     cde:	0e df       	rcall	.-484    	; 0xafc <Print::print(unsigned char, int) [clone .constprop.24]>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:150
  n += println();
     ce0:	83 e4       	ldi	r24, 0x43	; 67
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	14 db       	rcall	.-2520   	; 0x30e <Print::println()>
sendData():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:941

	if (_debug)
	{
		Serial.print("Sent ");
		printStack(sendStack);
		Serial.println();
     ce6:	83 e4       	ldi	r24, 0x43	; 67
     ce8:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:943
	}
}
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	bf 90       	pop	r11
     cfc:	af 90       	pop	r10
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:941

	if (_debug)
	{
		Serial.print("Sent ");
		printStack(sendStack);
		Serial.println();
     cfe:	07 cb       	rjmp	.-2546   	; 0x30e <Print::println()>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:943
	}
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	cf 90       	pop	r12
     d10:	bf 90       	pop	r11
     d12:	af 90       	pop	r10
     d14:	08 95       	ret

00000d16 <DFPlayerMini_Fast::loop(unsigned int) [clone .constprop.14]>:
loop():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:314
			   The track number to play.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::loop(uint16_t trackNum)
{
  sendStack.commandValue  = dfplayer::PLAYBACK_MODE;
     d16:	ef e5       	ldi	r30, 0x5F	; 95
     d18:	f1 e0       	ldi	r31, 0x01	; 1
     d1a:	98 e0       	ldi	r25, 0x08	; 8
     d1c:	95 83       	std	Z+5, r25	; 0x05
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:315
  sendStack.feedbackValue = dfplayer::NO_FEEDBACK;
     d1e:	16 82       	std	Z+6, r1	; 0x06
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:316
  sendStack.paramMSB = (trackNum >> 8) & 0xFF;
     d20:	17 82       	std	Z+7, r1	; 0x07
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:317
  sendStack.paramLSB = trackNum & 0xFF;
     d22:	80 87       	std	Z+8, r24	; 0x08
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:319
  
  findChecksum(sendStack);
     d24:	76 da       	rcall	.-2836   	; 0x212 <DFPlayerMini_Fast::findChecksum(DFPlayerMini_Fast::stack&) [clone .constprop.18]>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:320
  sendData();
     d26:	f2 ce       	rjmp	.-540    	; 0xb0c <DFPlayerMini_Fast::sendData() [clone .constprop.19]>

00000d28 <Print::println(unsigned int, int) [clone .constprop.10]>:
println():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:161
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
print():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:73
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
     d2c:	ac 01       	movw	r20, r24
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:95
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     d32:	2a e0       	ldi	r18, 0x0A	; 10
     d34:	89 e8       	ldi	r24, 0x89	; 137
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	8e de       	rcall	.-740    	; 0xa56 <Print::printNumber(unsigned long, unsigned char)>
     d3a:	ec 01       	movw	r28, r24
println():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:164
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
     d3c:	89 e8       	ldi	r24, 0x89	; 137
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	e6 da       	rcall	.-2612   	; 0x30e <Print::println()>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:166
  return n;
}
     d42:	8c 0f       	add	r24, r28
     d44:	9d 1f       	adc	r25, r29
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	08 95       	ret

00000d4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
operator=():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:61
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    #if  (defined(__AVR_ATtinyX41__) && F_CPU==16000000 && CLOCK_SOURCE==0)
      EERef &operator=( uint8_t in )       { return safe_eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    #else
      EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     d4c:	47 c8       	rjmp	.-3954   	; 0xfffffddc <__eeprom_end+0xff7efddc>

00000d4e <DoThrottleSetup()>:
DoThrottleSetup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:493
 * Function to read the PWM input from the throttle and store the values in EEPROM.
 * Can handle normal or reverse PWM inputs. We have to detect and store neutral, full forward throttle and full reverse throttle
 */

byte DoThrottleSetup(void)
{
     d4e:	6f 92       	push	r6
     d50:	7f 92       	push	r7
     d52:	8f 92       	push	r8
     d54:	9f 92       	push	r9
     d56:	af 92       	push	r10
     d58:	bf 92       	push	r11
     d5a:	cf 92       	push	r12
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:503
    byte i=0;
    
    // First we need the neutral position, wait for user to press button
    do
    {
        Dbounce1=ReadSetupSwitch();
     d6a:	64 dc       	rcall	.-1848   	; 0x634 <ReadSetupSwitch()>
     d6c:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:504
        delay(DEBOUNCETIME);
     d6e:	68 ec       	ldi	r22, 0xC8	; 200
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	2b db       	rcall	.-2474   	; 0x3ce <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:505
        Dbounce2=ReadSetupSwitch();        
     d78:	5d dc       	rcall	.-1862   	; 0x634 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:506
    } while(Dbounce1==SWITCHOPEN && Dbounce2==SWITCHOPEN );
     d7a:	c6 36       	cpi	r28, 0x66	; 102
     d7c:	11 f4       	brne	.+4      	; 0xd82 <DoThrottleSetup()+0x34>
     d7e:	86 36       	cpi	r24, 0x66	; 102
     d80:	a1 f3       	breq	.-24     	; 0xd6a <DoThrottleSetup()+0x1c>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:508

    NeutralPulse=pulseIn(THROTTLE_IN, HIGH,22000);
     d82:	40 ef       	ldi	r20, 0xF0	; 240
     d84:	55 e5       	ldi	r21, 0x55	; 85
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	ef dd       	rcall	.-1058   	; 0x96c <pulseIn.constprop.33>
     d8e:	3b 01       	movw	r6, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:510
    //NeutralPulse=ThrotIn.width_us();
    BlinkLED(3, 300, 300);
     d90:	4c e2       	ldi	r20, 0x2C	; 44
     d92:	51 e0       	ldi	r21, 0x01	; 1
     d94:	6c e2       	ldi	r22, 0x2C	; 44
     d96:	71 e0       	ldi	r23, 0x01	; 1
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	80 dd       	rcall	.-1280   	; 0x89c <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:515
 
    //Now we need the full extent/on value, let user release switch
    do
    {
        Dbounce1=ReadSetupSwitch();
     d9c:	4b dc       	rcall	.-1898   	; 0x634 <ReadSetupSwitch()>
     d9e:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:516
        delay(DEBOUNCETIME);
     da0:	68 ec       	ldi	r22, 0xC8	; 200
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	12 db       	rcall	.-2524   	; 0x3ce <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:517
        Dbounce2=ReadSetupSwitch();        
     daa:	44 dc       	rcall	.-1912   	; 0x634 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:518
    } while(Dbounce1==SWITCHCLOSED && Dbounce2==SWITCHCLOSED );      
     dac:	c7 37       	cpi	r28, 0x77	; 119
     dae:	11 f4       	brne	.+4      	; 0xdb4 <DoThrottleSetup()+0x66>
     db0:	87 37       	cpi	r24, 0x77	; 119
     db2:	a1 f3       	breq	.-24     	; 0xd9c <DoThrottleSetup()+0x4e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:524
    
    //Now move to final value and close switch.
    // Now we need the off position, wait for user to press button
    do
    {
        Dbounce1=ReadSetupSwitch();
     db4:	3f dc       	rcall	.-1922   	; 0x634 <ReadSetupSwitch()>
     db6:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:525
        delay(DEBOUNCETIME);
     db8:	68 ec       	ldi	r22, 0xC8	; 200
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	06 db       	rcall	.-2548   	; 0x3ce <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:526
        Dbounce2=ReadSetupSwitch();        
     dc2:	38 dc       	rcall	.-1936   	; 0x634 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:527
    } while(Dbounce1==SWITCHOPEN && Dbounce2==SWITCHOPEN );  
     dc4:	c6 36       	cpi	r28, 0x66	; 102
     dc6:	11 f4       	brne	.+4      	; 0xdcc <DoThrottleSetup()+0x7e>
     dc8:	86 36       	cpi	r24, 0x66	; 102
     dca:	a1 f3       	breq	.-24     	; 0xdb4 <DoThrottleSetup()+0x66>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:528
    BlinkLED(4, 300, 300);
     dcc:	4c e2       	ldi	r20, 0x2C	; 44
     dce:	51 e0       	ldi	r21, 0x01	; 1
     dd0:	6c e2       	ldi	r22, 0x2C	; 44
     dd2:	71 e0       	ldi	r23, 0x01	; 1
     dd4:	84 e0       	ldi	r24, 0x04	; 4
     dd6:	62 dd       	rcall	.-1340   	; 0x89c <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:529
    ForwardPulse = pulseIn(THROTTLE_IN, HIGH,22000);   // get the timer value
     dd8:	40 ef       	ldi	r20, 0xF0	; 240
     dda:	55 e5       	ldi	r21, 0x55	; 85
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	c4 dd       	rcall	.-1144   	; 0x96c <pulseIn.constprop.33>
     de4:	4b 01       	movw	r8, r22
     de6:	8b 01       	movw	r16, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:535


  //Now we need the reverse value, let user release switch
    do
    {
        Dbounce1=ReadSetupSwitch();
     de8:	25 dc       	rcall	.-1974   	; 0x634 <ReadSetupSwitch()>
     dea:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:536
        delay(DEBOUNCETIME);
     dec:	68 ec       	ldi	r22, 0xC8	; 200
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	ec da       	rcall	.-2600   	; 0x3ce <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:537
        Dbounce2=ReadSetupSwitch();        
     df6:	1e dc       	rcall	.-1988   	; 0x634 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:538
    } while(Dbounce1==SWITCHCLOSED && Dbounce2==SWITCHCLOSED );      
     df8:	c7 37       	cpi	r28, 0x77	; 119
     dfa:	11 f4       	brne	.+4      	; 0xe00 <DoThrottleSetup()+0xb2>
     dfc:	87 37       	cpi	r24, 0x77	; 119
     dfe:	a1 f3       	breq	.-24     	; 0xde8 <DoThrottleSetup()+0x9a>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:545
    //Now move to final value and close switch.
    // Now we need the off position, wait for user to press button
    
     do
    {
        Dbounce1=ReadSetupSwitch();
     e00:	19 dc       	rcall	.-1998   	; 0x634 <ReadSetupSwitch()>
     e02:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:546
        delay(DEBOUNCETIME);
     e04:	68 ec       	ldi	r22, 0xC8	; 200
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	e0 da       	rcall	.-2624   	; 0x3ce <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:547
        Dbounce2=ReadSetupSwitch();        
     e0e:	12 dc       	rcall	.-2012   	; 0x634 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:548
    } while(Dbounce1==SWITCHOPEN && Dbounce2==SWITCHOPEN );  
     e10:	c6 36       	cpi	r28, 0x66	; 102
     e12:	11 f4       	brne	.+4      	; 0xe18 <DoThrottleSetup()+0xca>
     e14:	86 36       	cpi	r24, 0x66	; 102
     e16:	a1 f3       	breq	.-24     	; 0xe00 <DoThrottleSetup()+0xb2>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:550
    
     ReversePulse = pulseIn(THROTTLE_IN, HIGH,22000);   // get the timer value
     e18:	40 ef       	ldi	r20, 0xF0	; 240
     e1a:	55 e5       	ldi	r21, 0x55	; 85
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	a4 dd       	rcall	.-1208   	; 0x96c <pulseIn.constprop.33>
     e24:	6b 01       	movw	r12, r22
     e26:	eb 01       	movw	r28, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:552
     //ReversePulse=ThrotIn.width_us();
     BlinkLED(5, 300, 300);
     e28:	4c e2       	ldi	r20, 0x2C	; 44
     e2a:	51 e0       	ldi	r21, 0x01	; 1
     e2c:	6c e2       	ldi	r22, 0x2C	; 44
     e2e:	71 e0       	ldi	r23, 0x01	; 1
     e30:	85 e0       	ldi	r24, 0x05	; 5
     e32:	34 dd       	rcall	.-1432   	; 0x89c <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:561
     * If we subtract ForwardPulse from ReversePulse and it is negative, we are looking at a reverse throtle so
     * we store REVERSE_THROT in THROT_EEPROM_DIRECTION
     * We store neutral position as-is regardl;ess of direction
     */ 
 
    if(ForwardPulse>ReversePulse)
     e34:	c0 16       	cp	r12, r16
     e36:	d1 06       	cpc	r13, r17
     e38:	80 f5       	brcc	.+96     	; 0xe9a <DoThrottleSetup()+0x14c>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:563
    {
        ForwardPulse+=TimerAdjustment;    // Add PWM neutral adjustment
     e3a:	84 01       	movw	r16, r8
     e3c:	05 5e       	subi	r16, 0xE5	; 229
     e3e:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:564
        ReversePulse-=TimerAdjustment;
     e40:	6b 97       	sbiw	r28, 0x1b	; 27
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:565
        EEPROM.write(THROT_EEPROM_DIRECTION ,NORMAL_THROT);
     e42:	64 e3       	ldi	r22, 0x34	; 52
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:571
    }
    else if (ReversePulse>ForwardPulse)
    {
        ForwardPulse-=TimerAdjustment;    // Add PWM neutral adjustment
        ReversePulse+=TimerAdjustment;
        EEPROM.write(THROT_EEPROM_DIRECTION,REVERSE_THROT);
     e44:	89 e0       	ldi	r24, 0x09	; 9
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	81 df       	rcall	.-254    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:576
    }

        Byte1=(byte)(ForwardPulse&0xFF);
        Byte2=(byte)(ForwardPulse>>8);
        EEPROM.write(THROT_EEPROM_FORWARD_LO,Byte1);
     e4a:	60 2f       	mov	r22, r16
     e4c:	83 e0       	ldi	r24, 0x03	; 3
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	7d df       	rcall	.-262    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:577
        EEPROM.write(THROT_EEPROM_FORWARD_HI,Byte2);
     e52:	61 2f       	mov	r22, r17
     e54:	84 e0       	ldi	r24, 0x04	; 4
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	79 df       	rcall	.-270    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:580
        Byte1=(byte)(NeutralPulse&0xFF);
        Byte2=(byte)(NeutralPulse>>8);
        EEPROM.write(THROT_EEPROM_NEUTRAL_LO,Byte1);
     e5a:	66 2d       	mov	r22, r6
     e5c:	85 e0       	ldi	r24, 0x05	; 5
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	75 df       	rcall	.-278    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:581
        EEPROM.write(THROT_EEPROM_NEUTRAL_HI,Byte2);
     e62:	67 2d       	mov	r22, r7
     e64:	86 e0       	ldi	r24, 0x06	; 6
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	71 df       	rcall	.-286    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:584
        Byte1=(byte)(ReversePulse&0xFF);
        Byte2=(byte)(ReversePulse>>8);
        EEPROM.write(THROT_EEPROM_REVERSE_LO,Byte1);
     e6a:	6c 2f       	mov	r22, r28
     e6c:	87 e0       	ldi	r24, 0x07	; 7
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	6d df       	rcall	.-294    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:585
        EEPROM.write(THROT_EEPROM_REVERSE_HI,Byte2);     
     e72:	6d 2f       	mov	r22, r29
     e74:	88 e0       	ldi	r24, 0x08	; 8
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	69 df       	rcall	.-302    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:589
      
    return(1);
  
}
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	df 90       	pop	r13
     e8a:	cf 90       	pop	r12
     e8c:	bf 90       	pop	r11
     e8e:	af 90       	pop	r10
     e90:	9f 90       	pop	r9
     e92:	8f 90       	pop	r8
     e94:	7f 90       	pop	r7
     e96:	6f 90       	pop	r6
     e98:	08 95       	ret
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:567
    {
        ForwardPulse+=TimerAdjustment;    // Add PWM neutral adjustment
        ReversePulse-=TimerAdjustment;
        EEPROM.write(THROT_EEPROM_DIRECTION ,NORMAL_THROT);
    }
    else if (ReversePulse>ForwardPulse)
     e9a:	0c 15       	cp	r16, r12
     e9c:	1d 05       	cpc	r17, r13
     e9e:	a8 f6       	brcc	.-86     	; 0xe4a <DoThrottleSetup()+0xfc>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:569
    {
        ForwardPulse-=TimerAdjustment;    // Add PWM neutral adjustment
     ea0:	84 01       	movw	r16, r8
     ea2:	0b 51       	subi	r16, 0x1B	; 27
     ea4:	11 09       	sbc	r17, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:570
        ReversePulse+=TimerAdjustment;
     ea6:	6b 96       	adiw	r28, 0x1b	; 27
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:571
        EEPROM.write(THROT_EEPROM_DIRECTION,REVERSE_THROT);
     ea8:	63 e2       	ldi	r22, 0x23	; 35
     eaa:	cc cf       	rjmp	.-104    	; 0xe44 <DoThrottleSetup()+0xf6>

00000eac <DoHornSetup()>:
DoHornSetup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:419
/*
 * Function to read the PWM input from the horn and store the values in EEPROM.
 * Can handle normal or reverse PWM inputs
 */
byte DoHornSetup(void)
{
     eac:	cf 92       	push	r12
     eae:	df 92       	push	r13
     eb0:	ef 92       	push	r14
     eb2:	ff 92       	push	r15
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:429
    byte i=0;
    
    // First we need the off position, wait for user to press button
    do
    {
        Dbounce1=ReadSetupSwitch();
     ebc:	bb db       	rcall	.-2186   	; 0x634 <ReadSetupSwitch()>
     ebe:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:430
        delay(DEBOUNCETIME);
     ec0:	68 ec       	ldi	r22, 0xC8	; 200
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	82 da       	rcall	.-2812   	; 0x3ce <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:431
        Dbounce2=ReadSetupSwitch();        
     eca:	b4 db       	rcall	.-2200   	; 0x634 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:432
    } while(Dbounce1==SWITCHOPEN && Dbounce2==SWITCHOPEN );
     ecc:	c6 36       	cpi	r28, 0x66	; 102
     ece:	11 f4       	brne	.+4      	; 0xed4 <DoHornSetup()+0x28>
     ed0:	86 36       	cpi	r24, 0x66	; 102
     ed2:	a1 f3       	breq	.-24     	; 0xebc <DoHornSetup()+0x10>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:434

    Pulse1=pulseIn(HORN_IN, HIGH,22000);
     ed4:	40 ef       	ldi	r20, 0xF0	; 240
     ed6:	55 e5       	ldi	r21, 0x55	; 85
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	46 dd       	rcall	.-1396   	; 0x96c <pulseIn.constprop.33>
     ee0:	eb 01       	movw	r28, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:436
    //Pulse1=HornIn.width_us();
    BlinkLED(1, 300, 300);
     ee2:	4c e2       	ldi	r20, 0x2C	; 44
     ee4:	51 e0       	ldi	r21, 0x01	; 1
     ee6:	6c e2       	ldi	r22, 0x2C	; 44
     ee8:	71 e0       	ldi	r23, 0x01	; 1
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	d7 dc       	rcall	.-1618   	; 0x89c <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:441

    //Now we need the full extent/on value, let user release switch
    do
    {
        Dbounce1=ReadSetupSwitch();
     eee:	a2 db       	rcall	.-2236   	; 0x634 <ReadSetupSwitch()>
     ef0:	18 2f       	mov	r17, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:442
        delay(DEBOUNCETIME);
     ef2:	68 ec       	ldi	r22, 0xC8	; 200
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	69 da       	rcall	.-2862   	; 0x3ce <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:443
        Dbounce2=ReadSetupSwitch();        
     efc:	9b db       	rcall	.-2250   	; 0x634 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:444
    } while(Dbounce1==SWITCHCLOSED && Dbounce2==SWITCHCLOSED );      
     efe:	17 37       	cpi	r17, 0x77	; 119
     f00:	11 f4       	brne	.+4      	; 0xf06 <DoHornSetup()+0x5a>
     f02:	87 37       	cpi	r24, 0x77	; 119
     f04:	a1 f3       	breq	.-24     	; 0xeee <DoHornSetup()+0x42>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:451
    //Now move to final value and close switch.
    // Now we need the off position, wait for user to press button
    
     do
    {
        Dbounce1=ReadSetupSwitch();
     f06:	96 db       	rcall	.-2260   	; 0x634 <ReadSetupSwitch()>
     f08:	18 2f       	mov	r17, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:452
        delay(DEBOUNCETIME);
     f0a:	68 ec       	ldi	r22, 0xC8	; 200
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	5d da       	rcall	.-2886   	; 0x3ce <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:453
        Dbounce2=ReadSetupSwitch();        
     f14:	8f db       	rcall	.-2274   	; 0x634 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:454
    } while(Dbounce1==SWITCHOPEN && Dbounce2==SWITCHOPEN );  
     f16:	16 36       	cpi	r17, 0x66	; 102
     f18:	11 f4       	brne	.+4      	; 0xf1e <DoHornSetup()+0x72>
     f1a:	86 36       	cpi	r24, 0x66	; 102
     f1c:	a1 f3       	breq	.-24     	; 0xf06 <DoHornSetup()+0x5a>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:456
    
     Pulse2 = pulseIn(HORN_IN, HIGH,22000);   // get the timer value
     f1e:	40 ef       	ldi	r20, 0xF0	; 240
     f20:	55 e5       	ldi	r21, 0x55	; 85
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	21 dd       	rcall	.-1470   	; 0x96c <pulseIn.constprop.33>
     f2a:	6b 01       	movw	r12, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:457
     BlinkLED(2, 300, 300);
     f2c:	4c e2       	ldi	r20, 0x2C	; 44
     f2e:	51 e0       	ldi	r21, 0x01	; 1
     f30:	6c e2       	ldi	r22, 0x2C	; 44
     f32:	71 e0       	ldi	r23, 0x01	; 1
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	b2 dc       	rcall	.-1692   	; 0x89c <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:466
     * so we store pulse2 and GREATERTHAN to EEPROM
     * otherwise if pulse2-pulse1 is negative, we are looking for less than pulse 2 so we store pulse2+TimerAdjustmen
     * and LESSTHAN to EEPROM
     */ 
 
    if(Pulse2>Pulse1)
     f38:	cc 15       	cp	r28, r12
     f3a:	dd 05       	cpc	r29, r13
     f3c:	c8 f4       	brcc	.+50     	; 0xf70 <DoHornSetup()+0xc4>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:468
    {
        Pulse2=Pulse2-TimerAdjustment;
     f3e:	8b e1       	ldi	r24, 0x1B	; 27
     f40:	c8 1a       	sub	r12, r24
     f42:	d1 08       	sbc	r13, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:471
        Byte1=(byte)(Pulse2&0xFF);
        Byte2=(byte)(Pulse2>>8);
        EEPROM.write(HORN_EEPROM_LO,Byte1);
     f44:	6c 2d       	mov	r22, r12
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	00 df       	rcall	.-512    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:472
        EEPROM.write(HORN_EEPROM_HI,Byte2);
     f4c:	6d 2d       	mov	r22, r13
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	fc de       	rcall	.-520    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:473
        EEPROM.write(HORN_EEPROM_GT_LT,GREATERTHAN);
     f54:	63 e3       	ldi	r22, 0x33	; 51
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:482
        Pulse2=Pulse2+TimerAdjustment;
        Byte1=(byte)(Pulse2&0xFF);
        Byte2=(byte)(Pulse2>>8);
        EEPROM.write(HORN_EEPROM_LO,Byte1);
        EEPROM.write(HORN_EEPROM_HI,Byte2);
        EEPROM.write(HORN_EEPROM_GT_LT,LESSTHAN);
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	f8 de       	rcall	.-528    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:485
    }
     return(1);
} // End DoHornSetup()
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	df 90       	pop	r13
     f6c:	cf 90       	pop	r12
     f6e:	08 95       	ret
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:475
        Byte2=(byte)(Pulse2>>8);
        EEPROM.write(HORN_EEPROM_LO,Byte1);
        EEPROM.write(HORN_EEPROM_HI,Byte2);
        EEPROM.write(HORN_EEPROM_GT_LT,GREATERTHAN);
    }
    else if (Pulse1>Pulse2)
     f70:	cc 16       	cp	r12, r28
     f72:	dd 06       	cpc	r13, r29
     f74:	98 f7       	brcc	.-26     	; 0xf5c <DoHornSetup()+0xb0>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:477
    {
        Pulse2=Pulse2+TimerAdjustment;
     f76:	8b e1       	ldi	r24, 0x1B	; 27
     f78:	c8 0e       	add	r12, r24
     f7a:	d1 1c       	adc	r13, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:480
        Byte1=(byte)(Pulse2&0xFF);
        Byte2=(byte)(Pulse2>>8);
        EEPROM.write(HORN_EEPROM_LO,Byte1);
     f7c:	6c 2d       	mov	r22, r12
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	e4 de       	rcall	.-568    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:481
        EEPROM.write(HORN_EEPROM_HI,Byte2);
     f84:	6d 2d       	mov	r22, r13
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	e0 de       	rcall	.-576    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:482
        EEPROM.write(HORN_EEPROM_GT_LT,LESSTHAN);
     f8c:	62 e2       	ldi	r22, 0x22	; 34
     f8e:	e3 cf       	rjmp	.-58     	; 0xf56 <DoHornSetup()+0xaa>

00000f90 <ResetSettings()>:
ResetSettings():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:217
int ResetSettings(void)
{

    byte i;
    
    EEPROM.write(HORN_EEPROM_LO,0xD0);
     f90:	60 ed       	ldi	r22, 0xD0	; 208
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	da de       	rcall	.-588    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:218
    EEPROM.write(HORN_EEPROM_HI,0x07); // 0x7d0 = 2000 (us)
     f98:	67 e0       	ldi	r22, 0x07	; 7
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	d6 de       	rcall	.-596    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:219
    EEPROM.write(HORN_EEPROM_GT_LT,GREATERTHAN);
     fa0:	63 e3       	ldi	r22, 0x33	; 51
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	d2 de       	rcall	.-604    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:222
    //Now store the default throttle settings
   
    EEPROM.write(THROT_EEPROM_FORWARD_LO,0xD0);
     fa8:	60 ed       	ldi	r22, 0xD0	; 208
     faa:	83 e0       	ldi	r24, 0x03	; 3
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	ce de       	rcall	.-612    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:223
    EEPROM.write(THROT_EEPROM_FORWARD_HI,0x07); // 0x7D0 = 2000 (us)
     fb0:	67 e0       	ldi	r22, 0x07	; 7
     fb2:	84 e0       	ldi	r24, 0x04	; 4
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	ca de       	rcall	.-620    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:224
    EEPROM.write(THROT_EEPROM_NEUTRAL_LO,0xDC);
     fb8:	6c ed       	ldi	r22, 0xDC	; 220
     fba:	85 e0       	ldi	r24, 0x05	; 5
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	c6 de       	rcall	.-628    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:225
    EEPROM.write(THROT_EEPROM_NEUTRAL_HI,0x05); // 0x5DC = 1500 (us)
     fc0:	65 e0       	ldi	r22, 0x05	; 5
     fc2:	86 e0       	ldi	r24, 0x06	; 6
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	c2 de       	rcall	.-636    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:226
    EEPROM.write(THROT_EEPROM_REVERSE_LO,0xE8);
     fc8:	68 ee       	ldi	r22, 0xE8	; 232
     fca:	87 e0       	ldi	r24, 0x07	; 7
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	be de       	rcall	.-644    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:227
    EEPROM.write(THROT_EEPROM_REVERSE_HI,0x03); // 0x3E8 = 1000 (us)
     fd0:	63 e0       	ldi	r22, 0x03	; 3
     fd2:	88 e0       	ldi	r24, 0x08	; 8
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	ba de       	rcall	.-652    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:228
    EEPROM.write(THROT_EEPROM_DIRECTION,NORMAL_THROT);
     fd8:	64 e3       	ldi	r22, 0x34	; 52
     fda:	89 e0       	ldi	r24, 0x09	; 9
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	b6 de       	rcall	.-660    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:229
    EEPROM.write(E_INIT,'T');
     fe0:	64 e5       	ldi	r22, 0x54	; 84
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	91 e0       	ldi	r25, 0x01	; 1
     fe6:	b2 de       	rcall	.-668    	; 0xd4c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:231
    //A little LED flash or 4 to indicate settings reset
    BlinkLED(4, 700, 300);
     fe8:	4c e2       	ldi	r20, 0x2C	; 44
     fea:	51 e0       	ldi	r21, 0x01	; 1
     fec:	6c eb       	ldi	r22, 0xBC	; 188
     fee:	72 e0       	ldi	r23, 0x02	; 2
     ff0:	84 e0       	ldi	r24, 0x04	; 4
     ff2:	54 dc       	rcall	.-1880   	; 0x89c <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:232
}
     ff4:	08 95       	ret

00000ff6 <EEPROMClass::read(int) [clone .isra.0]>:
operator*():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     ff6:	ea c6       	rjmp	.+3540   	; 0x1dcc <eeprom_read_byte>

00000ff8 <RecallSettings()>:
RecallSettings():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:186
 * Function to recall all settings from EEPROM and initilise the global variables.
 *  Easier to do this as I only have to concatenate two
 * bytes from EEPROM once. If read from EEPROM, would do this every time around loop.
 */
byte RecallSettings(void)
{
     ff8:	cf 93       	push	r28
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:189
      byte LimLo,LimHi;
      
      LimLo=EEPROM.read(HORN_EEPROM_LO);
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	fb df       	rcall	.-10     	; 0xff6 <EEPROMClass::read(int) [clone .isra.0]>
    1000:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:190
      LimHi=EEPROM.read(HORN_EEPROM_HI);
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	f7 df       	rcall	.-18     	; 0xff6 <EEPROMClass::read(int) [clone .isra.0]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:191
      HornPulseLimit=LimHi<<8 | LimLo;
    1008:	98 2f       	mov	r25, r24
    100a:	8c 2f       	mov	r24, r28
    100c:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <HornPulseLimit+0x1>
    1010:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <HornPulseLimit>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:192
      HornGreatOrLessThan=EEPROM.read(HORN_EEPROM_GT_LT);
    1014:	82 e0       	ldi	r24, 0x02	; 2
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	ee df       	rcall	.-36     	; 0xff6 <EEPROMClass::read(int) [clone .isra.0]>
    101a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <HornGreatOrLessThan>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:194
      //Now read the throttle settings from EEPROM
      LimLo=EEPROM.read(THROT_EEPROM_FORWARD_LO);
    101e:	83 e0       	ldi	r24, 0x03	; 3
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	e9 df       	rcall	.-46     	; 0xff6 <EEPROMClass::read(int) [clone .isra.0]>
    1024:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:195
      LimHi=EEPROM.read(THROT_EEPROM_FORWARD_HI);
    1026:	84 e0       	ldi	r24, 0x04	; 4
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	e5 df       	rcall	.-54     	; 0xff6 <EEPROMClass::read(int) [clone .isra.0]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:196
      ForwardThrot=LimHi<<8 | LimLo;
    102c:	98 2f       	mov	r25, r24
    102e:	8c 2f       	mov	r24, r28
    1030:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <ForwardThrot+0x1>
    1034:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <ForwardThrot>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:197
      LimLo=EEPROM.read(THROT_EEPROM_NEUTRAL_LO);
    1038:	85 e0       	ldi	r24, 0x05	; 5
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	dc df       	rcall	.-72     	; 0xff6 <EEPROMClass::read(int) [clone .isra.0]>
    103e:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:198
      LimHi=EEPROM.read(THROT_EEPROM_NEUTRAL_HI);
    1040:	86 e0       	ldi	r24, 0x06	; 6
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	d8 df       	rcall	.-80     	; 0xff6 <EEPROMClass::read(int) [clone .isra.0]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:199
      NeutralThrot=LimHi<<8 | LimLo;
    1046:	98 2f       	mov	r25, r24
    1048:	8c 2f       	mov	r24, r28
    104a:	90 93 fc 00 	sts	0x00FC, r25	; 0x8000fc <NeutralThrot+0x1>
    104e:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <NeutralThrot>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:200
      LimLo=EEPROM.read(THROT_EEPROM_REVERSE_LO);
    1052:	87 e0       	ldi	r24, 0x07	; 7
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	cf df       	rcall	.-98     	; 0xff6 <EEPROMClass::read(int) [clone .isra.0]>
    1058:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:201
      LimHi=EEPROM.read(THROT_EEPROM_REVERSE_HI);
    105a:	88 e0       	ldi	r24, 0x08	; 8
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	cb df       	rcall	.-106    	; 0xff6 <EEPROMClass::read(int) [clone .isra.0]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:202
      ReverseThrot=LimHi<<8 | LimLo;     
    1060:	98 2f       	mov	r25, r24
    1062:	8c 2f       	mov	r24, r28
    1064:	90 93 f4 00 	sts	0x00F4, r25	; 0x8000f4 <ReverseThrot+0x1>
    1068:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <ReverseThrot>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:203
      ThrotNormReverse=EEPROM.read(THROT_EEPROM_DIRECTION);
    106c:	89 e0       	ldi	r24, 0x09	; 9
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	c2 df       	rcall	.-124    	; 0xff6 <EEPROMClass::read(int) [clone .isra.0]>
    1072:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <ThrotNormReverse>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:204
}
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <__vector_7>:
__vector_7():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:90
//rename the vector so we can use it.
  #define ANALOG_COMP_vect ANA_COMP_vect
#elif !defined (ANALOG_COMP_vect)
  #error Tiny Software Serial cannot find the Analog comparator interrupt vector!
#endif
ISR(ANALOG_COMP_vect){
    107a:	1f 92       	push	r1
    107c:	0f 92       	push	r0
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	0f 92       	push	r0
    1082:	11 24       	eor	r1, r1
    1084:	2f 93       	push	r18
    1086:	3f 93       	push	r19
    1088:	4f 93       	push	r20
    108a:	5f 93       	push	r21
    108c:	7f 93       	push	r23
    108e:	8f 93       	push	r24
    1090:	9f 93       	push	r25
    1092:	af 93       	push	r26
    1094:	bf 93       	push	r27
    1096:	ef 93       	push	r30
    1098:	ff 93       	push	r31
getch():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:70
      [mask] "r" (Serial._rxmask)
    :
      "r23",
      "r24",
      "r25"
    );
    109a:	40 91 4f 01 	lds	r20, 0x014F	; 0x80014f <Serial+0xc>
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	38 e0       	ldi	r19, 0x08	; 8
    10a2:	35 d0       	rcall	.+106    	; 0x110e <uartDelay>
    10a4:	34 d0       	rcall	.+104    	; 0x110e <uartDelay>
    10a6:	33 d0       	rcall	.+102    	; 0x110e <uartDelay>
    10a8:	32 d0       	rcall	.+100    	; 0x110e <uartDelay>
    10aa:	31 d0       	rcall	.+98     	; 0x110e <uartDelay>
    10ac:	88 94       	clc
    10ae:	76 b3       	in	r23, 0x16	; 22
    10b0:	74 23       	and	r23, r20
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <__vector_7+0x3c>
    10b4:	08 94       	sec
    10b6:	27 95       	ror	r18
    10b8:	3a 95       	dec	r19
    10ba:	09 f0       	breq	.+2      	; 0x10be <__vector_7+0x44>
    10bc:	f3 cf       	rjmp	.-26     	; 0x10a4 <__vector_7+0x2a>
    10be:	27 d0       	rcall	.+78     	; 0x110e <uartDelay>
    10c0:	26 d0       	rcall	.+76     	; 0x110e <uartDelay>
__vector_7():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:92
#elif !defined (ANALOG_COMP_vect)
  #error Tiny Software Serial cannot find the Analog comparator interrupt vector!
#endif
ISR(ANALOG_COMP_vect){
  char ch = getch(); //read in the character softwarily - I know its not a word, but it sounded cool, so you know what: #define softwarily 1
  store_char(ch, Serial._rx_buffer);
    10c2:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <Serial+0xf>
    10c6:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <Serial+0x10>
store_char():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:167
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
}

void store_char(unsigned char c, soft_ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    10ca:	80 a1       	ldd	r24, Z+32	; 0x20
    10cc:	91 a1       	ldd	r25, Z+33	; 0x21
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	8f 71       	andi	r24, 0x1F	; 31
    10d2:	99 27       	eor	r25, r25
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:173

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    10d4:	42 a1       	ldd	r20, Z+34	; 0x22
    10d6:	53 a1       	ldd	r21, Z+35	; 0x23
    10d8:	84 17       	cp	r24, r20
    10da:	95 07       	cpc	r25, r21
    10dc:	39 f0       	breq	.+14     	; 0x10ec <__vector_7+0x72>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:174
    buffer->buffer[buffer->head] = c;
    10de:	a0 a1       	ldd	r26, Z+32	; 0x20
    10e0:	b1 a1       	ldd	r27, Z+33	; 0x21
    10e2:	ae 0f       	add	r26, r30
    10e4:	bf 1f       	adc	r27, r31
    10e6:	2c 93       	st	X, r18
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:175
    buffer->head = i;
    10e8:	91 a3       	std	Z+33, r25	; 0x21
    10ea:	80 a3       	std	Z+32, r24	; 0x20
__vector_7():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:93
  #error Tiny Software Serial cannot find the Analog comparator interrupt vector!
#endif
ISR(ANALOG_COMP_vect){
  char ch = getch(); //read in the character softwarily - I know its not a word, but it sounded cool, so you know what: #define softwarily 1
  store_char(ch, Serial._rx_buffer);
  sbi(ACSR,ACI); //clear the flag.
    10ec:	44 9a       	sbi	0x08, 4	; 8
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:94
}
    10ee:	ff 91       	pop	r31
    10f0:	ef 91       	pop	r30
    10f2:	bf 91       	pop	r27
    10f4:	af 91       	pop	r26
    10f6:	9f 91       	pop	r25
    10f8:	8f 91       	pop	r24
    10fa:	7f 91       	pop	r23
    10fc:	5f 91       	pop	r21
    10fe:	4f 91       	pop	r20
    1100:	3f 91       	pop	r19
    1102:	2f 91       	pop	r18
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	0f 90       	pop	r0
    110a:	1f 90       	pop	r1
    110c:	18 95       	reti

0000110e <uartDelay>:
uartDelay():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:81
    "mov r25,%[count]\n"
    "1:dec r25\n"
      "brne 1b\n"
      "ret\n"
    ::[count] "r" ((uint8_t)Serial._delayCount)
  );
    110e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <Serial+0x11>
    1112:	98 2f       	mov	r25, r24
    1114:	9a 95       	dec	r25
    1116:	f1 f7       	brne	.-4      	; 0x1114 <uartDelay+0x6>
    1118:	08 95       	ret

0000111a <__vector_5>:
__vector_5():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:308
      #error "cannot find Millis() timer overflow vector"
    #endif
  #else
    #error "Millis() timer not defined!"
  #endif
  {
    111a:	1f 92       	push	r1
    111c:	0f 92       	push	r0
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	0f 92       	push	r0
    1122:	11 24       	eor	r1, r1
    1124:	2f 93       	push	r18
    1126:	3f 93       	push	r19
    1128:	8f 93       	push	r24
    112a:	9f 93       	push	r25
    112c:	af 93       	push	r26
    112e:	bf 93       	push	r27
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:311
    // copy these to local variables so they can be stored in registers
    // (volatile variables must be read from memory on every access)
    unsigned long m = millis_timer_millis;
    1130:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <millis_timer_millis>
    1134:	90 91 e6 00 	lds	r25, 0x00E6	; 0x8000e6 <millis_timer_millis+0x1>
    1138:	a0 91 e7 00 	lds	r26, 0x00E7	; 0x8000e7 <millis_timer_millis+0x2>
    113c:	b0 91 e8 00 	lds	r27, 0x00E8	; 0x8000e8 <millis_timer_millis+0x3>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:312
    unsigned char f = millis_timer_fract;
    1140:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <millis_timer_fract>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:319
    static unsigned char correct_exact = 0;     // rollover intended
    if (++correct_exact < CORRECT_EXACT_MANY) {
      ++f;
    }
#endif
    f += FRACT_INC;
    1144:	23 e0       	ldi	r18, 0x03	; 3
    1146:	23 0f       	add	r18, r19
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:321

    if (f >= FRACT_MAX)
    1148:	2d 37       	cpi	r18, 0x7D	; 125
    114a:	68 f1       	brcs	.+90     	; 0x11a6 <__vector_5+0x8c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:323
    {
      f -= FRACT_MAX;
    114c:	26 e8       	ldi	r18, 0x86	; 134
    114e:	23 0f       	add	r18, r19
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:324
      m += MILLIS_INC + 1;
    1150:	02 96       	adiw	r24, 0x02	; 2
    1152:	a1 1d       	adc	r26, r1
    1154:	b1 1d       	adc	r27, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:331
    else
    {
      m += MILLIS_INC;
    }

    millis_timer_fract = f;
    1156:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <millis_timer_fract>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:332
    millis_timer_millis = m;
    115a:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <millis_timer_millis>
    115e:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <millis_timer_millis+0x1>
    1162:	a0 93 e7 00 	sts	0x00E7, r26	; 0x8000e7 <millis_timer_millis+0x2>
    1166:	b0 93 e8 00 	sts	0x00E8, r27	; 0x8000e8 <millis_timer_millis+0x3>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:334
#ifndef CORRECT_EXACT_MICROS
    millis_timer_overflow_count++;
    116a:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <millis_timer_overflow_count>
    116e:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <millis_timer_overflow_count+0x1>
    1172:	a0 91 eb 00 	lds	r26, 0x00EB	; 0x8000eb <millis_timer_overflow_count+0x2>
    1176:	b0 91 ec 00 	lds	r27, 0x00EC	; 0x8000ec <millis_timer_overflow_count+0x3>
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	a1 1d       	adc	r26, r1
    117e:	b1 1d       	adc	r27, r1
    1180:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <millis_timer_overflow_count>
    1184:	90 93 ea 00 	sts	0x00EA, r25	; 0x8000ea <millis_timer_overflow_count+0x1>
    1188:	a0 93 eb 00 	sts	0x00EB, r26	; 0x8000eb <millis_timer_overflow_count+0x2>
    118c:	b0 93 ec 00 	sts	0x00EC, r27	; 0x8000ec <millis_timer_overflow_count+0x3>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:336
#endif
  }
    1190:	bf 91       	pop	r27
    1192:	af 91       	pop	r26
    1194:	9f 91       	pop	r25
    1196:	8f 91       	pop	r24
    1198:	3f 91       	pop	r19
    119a:	2f 91       	pop	r18
    119c:	0f 90       	pop	r0
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	0f 90       	pop	r0
    11a2:	1f 90       	pop	r1
    11a4:	18 95       	reti
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:328
      f -= FRACT_MAX;
      m += MILLIS_INC + 1;
    }
    else
    {
      m += MILLIS_INC;
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	a1 1d       	adc	r26, r1
    11aa:	b1 1d       	adc	r27, r1
    11ac:	d4 cf       	rjmp	.-88     	; 0x1156 <__vector_5+0x3c>

000011ae <__vector_2>:
__vector_2():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkTinyPinChange/TinyPinChange.cpp:57
	{																													\
		PinChange.Port[VirtualPortIdx].Isr[Idx]();																		\
	}																													\
}

DECLARE_PIN_CHANGE_ISR(0)
    11ae:	1f 92       	push	r1
    11b0:	0f 92       	push	r0
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	0f 92       	push	r0
    11b6:	11 24       	eor	r1, r1
    11b8:	2f 93       	push	r18
    11ba:	3f 93       	push	r19
    11bc:	4f 93       	push	r20
    11be:	5f 93       	push	r21
    11c0:	6f 93       	push	r22
    11c2:	7f 93       	push	r23
    11c4:	8f 93       	push	r24
    11c6:	9f 93       	push	r25
    11c8:	af 93       	push	r26
    11ca:	bf 93       	push	r27
    11cc:	cf 93       	push	r28
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
    11d2:	86 b3       	in	r24, 0x16	; 22
    11d4:	95 b3       	in	r25, 0x15	; 21
    11d6:	89 23       	and	r24, r25
    11d8:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <PinChange+0x9>
    11dc:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <PinChange+0x8>
    11e0:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <PinChange+0x9>
    11e4:	89 27       	eor	r24, r25
    11e6:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <PinChange+0x7>
    11ea:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <PinChange+0x9>
    11ee:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <PinChange+0x8>
    11f2:	c0 e0       	ldi	r28, 0x00	; 0
    11f4:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <PinChange+0x6>
    11f8:	c8 17       	cp	r28, r24
    11fa:	60 f4       	brcc	.+24     	; 0x1214 <__vector_2+0x66>
    11fc:	ec 2f       	mov	r30, r28
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	ee 0f       	add	r30, r30
    1202:	ff 1f       	adc	r31, r31
    1204:	eb 5a       	subi	r30, 0xAB	; 171
    1206:	fe 4f       	sbci	r31, 0xFE	; 254
    1208:	01 90       	ld	r0, Z+
    120a:	f0 81       	ld	r31, Z
    120c:	e0 2d       	mov	r30, r0
    120e:	09 95       	icall
    1210:	cf 5f       	subi	r28, 0xFF	; 255
    1212:	f0 cf       	rjmp	.-32     	; 0x11f4 <__vector_2+0x46>
    1214:	ff 91       	pop	r31
    1216:	ef 91       	pop	r30
    1218:	cf 91       	pop	r28
    121a:	bf 91       	pop	r27
    121c:	af 91       	pop	r26
    121e:	9f 91       	pop	r25
    1220:	8f 91       	pop	r24
    1222:	7f 91       	pop	r23
    1224:	6f 91       	pop	r22
    1226:	5f 91       	pop	r21
    1228:	4f 91       	pop	r20
    122a:	3f 91       	pop	r19
    122c:	2f 91       	pop	r18
    122e:	0f 90       	pop	r0
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	0f 90       	pop	r0
    1234:	1f 90       	pop	r1
    1236:	18 95       	reti

00001238 <countPulseASM>:
countPulseASM():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:70

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
    1238:	cf 92       	push	r12
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:71
    push r13   ;   ;  131 pushqi1/1 [length = 1]
    123a:	df 92       	push	r13
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:72
    push r14   ;   ;  132 pushqi1/1 [length = 1]
    123c:	ef 92       	push	r14
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:73
    push r15   ;   ;  133 pushqi1/1 [length = 1]
    123e:	ff 92       	push	r15
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:74
    push r16   ;   ;  134 pushqi1/1 [length = 1]
    1240:	0f 93       	push	r16
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:75
    push r17   ;   ;  135 pushqi1/1 [length = 1]
    1242:	1f 93       	push	r17
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:80
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
    1244:	e8 2f       	mov	r30, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:81
    mov r31,r25  ;  port, port
    1246:	f9 2f       	mov	r31, r25
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:87
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
    1248:	08 c0       	rjmp	.+16     	; 0x125a <countPulseASM+0x22>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:91
.L4:
/*         if (--maxloops == 0) */
.LM2:
    rjmp .LM2A ; waste an extra 5 cycles
    124a:	00 c0       	rjmp	.+0      	; 0x124c <countPulseASM+0x14>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:93
.LM2A:
    rjmp .LM2B ;
    124c:	00 c0       	rjmp	.+0      	; 0x124e <countPulseASM+0x16>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:95
.LM2B:
    nop ;
    124e:	00 00       	nop
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:96
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
    1250:	01 50       	subi	r16, 0x01	; 1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:97
    sbc r17, r1   ;  maxloops
    1252:	11 09       	sbc	r17, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:98
    sbc r18, r1   ;  maxloops
    1254:	21 09       	sbc	r18, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:99
    sbc r19, r1   ;  maxloops
    1256:	31 09       	sbc	r19, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:100
    breq .L13  ; ,   ;  19  branch  [length = 1]
    1258:	49 f1       	breq	.+82     	; 0x12ac <countPulseASM+0x74>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:104
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
    125a:	90 81       	ld	r25, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:105
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
    125c:	96 23       	and	r25, r22
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:106
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
    125e:	94 17       	cp	r25, r20
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:107
    breq .L4   ; ,   ;  26  branch  [length = 1]
    1260:	a1 f3       	breq	.-24     	; 0x124a <countPulseASM+0x12>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:108
    rjmp .L6   ;   ;  184 jump  [length = 1]
    1262:	08 c0       	rjmp	.+16     	; 0x1274 <countPulseASM+0x3c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:117
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    rjmp .LM4A ; waste an extra 5 cycles
    1264:	00 c0       	rjmp	.+0      	; 0x1266 <countPulseASM+0x2e>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:119
.LM4A:
    rjmp .LM4B ;
    1266:	00 c0       	rjmp	.+0      	; 0x1268 <countPulseASM+0x30>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:121
.LM4B:
    nop ;
    1268:	00 00       	nop
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:122
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
    126a:	01 50       	subi	r16, 0x01	; 1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:123
    sbc r17, r1   ;  maxloops
    126c:	11 09       	sbc	r17, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:124
    sbc r18, r1   ;  maxloops
    126e:	21 09       	sbc	r18, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:125
    sbc r19, r1   ;  maxloops
    1270:	31 09       	sbc	r19, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:126
    breq .L13  ; ,   ;  33  branch  [length = 1]
    1272:	e1 f0       	breq	.+56     	; 0x12ac <countPulseASM+0x74>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:130
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
    1274:	90 81       	ld	r25, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:131
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
    1276:	96 23       	and	r25, r22
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:132
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
    1278:	94 13       	cpse	r25, r20
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:133
    rjmp .L7   ;
    127a:	f4 cf       	rjmp	.-24     	; 0x1264 <countPulseASM+0x2c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:134
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
    127c:	c1 2c       	mov	r12, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:135
    mov r13, r1   ;  width
    127e:	d1 2c       	mov	r13, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:136
    mov r14, r1   ;  width
    1280:	e1 2c       	mov	r14, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:137
    mov r15, r1   ;  width
    1282:	f1 2c       	mov	r15, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:138
    rjmp .L9   ;   ;  186 jump  [length = 1]
    1284:	0a c0       	rjmp	.+20     	; 0x129a <countPulseASM+0x62>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:147
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
    1286:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:148
    sub r12,r24  ;  width,
    1288:	c8 1a       	sub	r12, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:149
    sbc r13,r24  ;  width,
    128a:	d8 0a       	sbc	r13, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:150
    sbc r14,r24  ;  width,
    128c:	e8 0a       	sbc	r14, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:151
    sbc r15,r24  ;  width,
    128e:	f8 0a       	sbc	r15, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:152
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
    1290:	0c 15       	cp	r16, r12
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:153
    cpc r17,r13  ;  maxloops, width
    1292:	1d 05       	cpc	r17, r13
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:154
    cpc r18,r14  ;  maxloops, width
    1294:	2e 05       	cpc	r18, r14
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:155
    cpc r19,r15  ;  maxloops, width
    1296:	3f 05       	cpc	r19, r15
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:156
    breq .L13  ; ,   ;  52  branch  [length = 1]
    1298:	49 f0       	breq	.+18     	; 0x12ac <countPulseASM+0x74>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:160
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
    129a:	80 81       	ld	r24, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:161
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
    129c:	86 23       	and	r24, r22
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:162
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
    129e:	84 17       	cp	r24, r20
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:163
    breq .L10  ; ,   ;  64  branch  [length = 1]
    12a0:	91 f3       	breq	.-28     	; 0x1286 <countPulseASM+0x4e>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:169
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
    12a2:	6c 2d       	mov	r22, r12
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:170
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
    12a4:	7d 2d       	mov	r23, r13
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:171
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
    12a6:	8e 2d       	mov	r24, r14
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:172
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
    12a8:	9f 2d       	mov	r25, r15
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:173
    rjmp .LM11 ;
    12aa:	04 c0       	rjmp	.+8      	; 0x12b4 <countPulseASM+0x7c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:177
/* epilogue start */
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
    12ac:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:178
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
    12ae:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:179
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
    12b0:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:180
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
    12b2:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:183
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
    12b4:	1f 91       	pop	r17
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:184
    pop r16  ;   ;  139 popqi [length = 1]
    12b6:	0f 91       	pop	r16
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:185
    pop r15  ;   ;  140 popqi [length = 1]
    12b8:	ff 90       	pop	r15
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:186
    pop r14  ;   ;  141 popqi [length = 1]
    12ba:	ef 90       	pop	r14
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:187
    pop r13  ;   ;  142 popqi [length = 1]
    12bc:	df 90       	pop	r13
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:188
    pop r12  ;   ;  143 popqi [length = 1]
    12be:	cf 90       	pop	r12
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:189
    ret  ;  144 return_from_epilogue  [length = 1]
    12c0:	08 95       	ret

000012c2 <global constructors keyed to 65535_0_RCSounds_V1.2_test.ino.cpp.o.2352>:
_GLOBAL__I_65535_0_RCSounds_V1.2_test.ino.cpp.o.2352():
    12c2:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <Serial+0x3>
    12c6:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <Serial+0x2>
    12ca:	88 ee       	ldi	r24, 0xE8	; 232
    12cc:	93 e0       	ldi	r25, 0x03	; 3
    12ce:	a0 e0       	ldi	r26, 0x00	; 0
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <Serial+0x4>
    12d6:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <Serial+0x5>
    12da:	a0 93 49 01 	sts	0x0149, r26	; 0x800149 <Serial+0x6>
    12de:	b0 93 4a 01 	sts	0x014A, r27	; 0x80014a <Serial+0x7>
    12e2:	2a e7       	ldi	r18, 0x7A	; 122
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	30 93 44 01 	sts	0x0144, r19	; 0x800144 <Serial+0x1>
    12ea:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <Serial>
    12ee:	2f e1       	ldi	r18, 0x1F	; 31
    12f0:	31 e0       	ldi	r19, 0x01	; 1
    12f2:	30 93 53 01 	sts	0x0153, r19	; 0x800153 <Serial+0x10>
    12f6:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <Serial+0xf>
    12fa:	22 e0       	ldi	r18, 0x02	; 2
    12fc:	20 93 4f 01 	sts	0x014F, r18	; 0x80014f <Serial+0xc>
    1300:	21 e0       	ldi	r18, 0x01	; 1
    1302:	20 93 50 01 	sts	0x0150, r18	; 0x800150 <Serial+0xd>
    1306:	2e ef       	ldi	r18, 0xFE	; 254
    1308:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <Serial+0xe>
    130c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <Serial+0x11>
    1310:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <mySerial+0x3>
    1314:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <mySerial+0x2>
    1318:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <mySerial+0x4>
    131c:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <mySerial+0x5>
    1320:	a0 93 8f 01 	sts	0x018F, r26	; 0x80018f <mySerial+0x6>
    1324:	b0 93 90 01 	sts	0x0190, r27	; 0x800190 <mySerial+0x7>
    1328:	8a e8       	ldi	r24, 0x8A	; 138
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <mySerial+0x1>
    1330:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <mySerial>
    1334:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <mySerial+0x14>
    1338:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <mySerial+0x13>
    133c:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <mySerial+0x16>
    1340:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <mySerial+0x15>
    1344:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <mySerial+0x18>
    1348:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <mySerial+0x17>
    134c:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <mySerial+0x1a>
    1350:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <mySerial+0x19>
    1354:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <mySerial+0x1b>
    1358:	8e 7f       	andi	r24, 0xFE	; 254
    135a:	8d 7f       	andi	r24, 0xFD	; 253
    135c:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <mySerial+0x1b>
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	84 e0       	ldi	r24, 0x04	; 4
    1364:	c7 da       	rcall	.-2674   	; 0x8f4 <pinMode>
    1366:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <mySerial+0x1b>
    136a:	81 fd       	sbrc	r24, 1
    136c:	03 c0       	rjmp	.+6      	; 0x1374 <global constructors keyed to 65535_0_RCSounds_V1.2_test.ino.cpp.o.2352+0xb2>
    136e:	61 e0       	ldi	r22, 0x01	; 1
    1370:	84 e0       	ldi	r24, 0x04	; 4
    1372:	58 da       	rcall	.-2896   	; 0x824 <digitalWrite>
    1374:	84 e0       	ldi	r24, 0x04	; 4
    1376:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <mySerial+0xc>
    137a:	80 e1       	ldi	r24, 0x10	; 16
    137c:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <mySerial+0xd>
    1380:	86 e3       	ldi	r24, 0x36	; 54
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <mySerial+0xf>
    1388:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <mySerial+0xe>
    138c:	88 e0       	ldi	r24, 0x08	; 8
    138e:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <mySerial+0x10>
    1392:	61 e0       	ldi	r22, 0x01	; 1
    1394:	83 e0       	ldi	r24, 0x03	; 3
    1396:	ae da       	rcall	.-2724   	; 0x8f4 <pinMode>
    1398:	61 e0       	ldi	r22, 0x01	; 1
    139a:	83 e0       	ldi	r24, 0x03	; 3
    139c:	43 da       	rcall	.-2938   	; 0x824 <digitalWrite>
    139e:	88 e3       	ldi	r24, 0x38	; 56
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <mySerial+0x12>
    13a6:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <mySerial+0x11>
    13aa:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <PinChange>
    13ae:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <PinChange+0x1>
    13b2:	8c 5b       	subi	r24, 0xBC	; 188
    13b4:	92 40       	sbci	r25, 0x02	; 2
    13b6:	11 f1       	breq	.+68     	; 0x13fc <global constructors keyed to 65535_0_RCSounds_V1.2_test.ino.cpp.o.2352+0x13a>
    13b8:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <PinChange+0x2>
    13bc:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <PinChange+0x3>
    13c0:	8c 5b       	subi	r24, 0xBC	; 188
    13c2:	92 40       	sbci	r25, 0x02	; 2
    13c4:	d9 f0       	breq	.+54     	; 0x13fc <global constructors keyed to 65535_0_RCSounds_V1.2_test.ino.cpp.o.2352+0x13a>
    13c6:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <PinChange+0x4>
    13ca:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <PinChange+0x5>
    13ce:	8c 5b       	subi	r24, 0xBC	; 188
    13d0:	92 40       	sbci	r25, 0x02	; 2
    13d2:	a1 f0       	breq	.+40     	; 0x13fc <global constructors keyed to 65535_0_RCSounds_V1.2_test.ino.cpp.o.2352+0x13a>
    13d4:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <PinChange+0x6>
    13d8:	83 30       	cpi	r24, 0x03	; 3
    13da:	80 f4       	brcc	.+32     	; 0x13fc <global constructors keyed to 65535_0_RCSounds_V1.2_test.ino.cpp.o.2352+0x13a>
    13dc:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <PinChange+0x6>
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	ee 0f       	add	r30, r30
    13e4:	ff 1f       	adc	r31, r31
    13e6:	eb 5a       	subi	r30, 0xAB	; 171
    13e8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ea:	8c eb       	ldi	r24, 0xBC	; 188
    13ec:	92 e0       	ldi	r25, 0x02	; 2
    13ee:	91 83       	std	Z+1, r25	; 0x01
    13f0:	80 83       	st	Z, r24
    13f2:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <PinChange+0x6>
    13f6:	8f 5f       	subi	r24, 0xFF	; 255
    13f8:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <PinChange+0x6>
    13fc:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <myMP3+0x17>
    1400:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <myMP3+0x18>
    1404:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <myMP3+0x19>
    1408:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <myMP3+0x1a>
    140c:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <myMP3+0x1b>
    1410:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <myMP3+0x1c>
    1414:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <myMP3+0x1d>
    1418:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <myMP3+0x1e>
    141c:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <myMP3+0x1f>
    1420:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <myMP3+0x20>
    1424:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <myMP3+0x21>
    1428:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <myMP3+0x22>
    142c:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <myMP3+0x23>
    1430:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <myMP3+0x29>
    1434:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <myMP3+0x28>
    1438:	08 95       	ret

0000143a <main>:
init():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1138
*/

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
    #if defined(WGM01) // if Timer0 has PWM
      TCCR0A = (1<<WGM01) | (1<<WGM00);
    143a:	83 e0       	ldi	r24, 0x03	; 3
    143c:	8a bd       	out	0x2a, r24	; 42
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1141
    #endif
    #if defined(TCCR0B) //The x61 has a wacky Timer0!
      TCCR0B = (MillisTimer_Prescale_Index << CS00);
    143e:	83 bf       	out	0x33, r24	; 51
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1162
    TCCR1A = 1<<WGM10;
    TCCR1B = (1<<WGM12) | (MillisTimer_Prescale_Index << CS10);
  #endif

  // this needs to be called before setup() or some functions won't work there
  sei();
    1440:	78 94       	sei
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1167

  #ifndef DISABLEMILLIS
    // Enable the overflow interrupt (this is the basic system tic-toc for millis)
    #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK, TOIE0);
    1442:	89 b7       	in	r24, 0x39	; 57
    1444:	82 60       	ori	r24, 0x02	; 2
    1446:	89 bf       	out	0x39, r24	; 57
initToneTimerInternal():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:958
    #elif defined(__AVR_ATtiny43__)
      TCCR1A = 3; //WGM 10=1, WGM11=1
      TCCR1B = 3; //prescaler of 64
    #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1) // ATtiny x5
      // Use the Tone Timer for fast PWM as phase correct not supported by this timer
      GTCCR = (1<<PWM1B);
    1448:	80 e4       	ldi	r24, 0x40	; 64
    144a:	8c bd       	out	0x2c, r24	; 44
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:959
      OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
    144c:	8f ef       	ldi	r24, 0xFF	; 255
    144e:	8d bd       	out	0x2d, r24	; 45
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:960
      TCCR1 = (1<<CTC1) | (1<<PWM1A) | (ToneTimer_Prescale_Index << CS10);
    1450:	87 ec       	ldi	r24, 0xC7	; 199
    1452:	80 bf       	out	0x30, r24	; 48
init():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1214
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
    #if defined(ADCSRA)
      // set a2d prescale factor
      // ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
      // dude, this is being called on startup. We know that ADCSRA is 0! Why add a RMW cycle?!
      ADCSRA = (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
    1454:	87 e8       	ldi	r24, 0x87	; 135
    1456:	86 b9       	out	0x06, r24	; 6
setup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:62
 * 
 */

void setup()
{
  pinMode(LEDPIN,OUTPUT);
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	82 e0       	ldi	r24, 0x02	; 2
    145c:	4b da       	rcall	.-2922   	; 0x8f4 <pinMode>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:63
  digitalWrite(LEDPIN,LEDON);       // Switch LED on until MP3 initialised and playing
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	82 e0       	ldi	r24, 0x02	; 2
    1462:	e0 d9       	rcall	.-3136   	; 0x824 <digitalWrite>
begin():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:425
// Public methods
//

void SoftSerial::begin(long speed)
{
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    1464:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <mySerial+0x1a>
    1468:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <mySerial+0x19>
    146c:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <mySerial+0x18>
    1470:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <mySerial+0x17>
    1474:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <mySerial+0x16>
    1478:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <mySerial+0x15>
    147c:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <mySerial+0x14>
    1480:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <mySerial+0x13>
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:429

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
  {
    long baud = pgm_read_dword(&table[i].baud);
    1488:	fc 01       	movw	r30, r24
    148a:	e6 5d       	subi	r30, 0xD6	; 214
    148c:	ff 4f       	sbci	r31, 0xFF	; 255
    148e:	45 91       	lpm	r20, Z+
    1490:	55 91       	lpm	r21, Z+
    1492:	65 91       	lpm	r22, Z+
    1494:	74 91       	lpm	r23, Z
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:430
    if (baud == speed)
    1496:	40 38       	cpi	r20, 0x80	; 128
    1498:	55 42       	sbci	r21, 0x25	; 37
    149a:	61 05       	cpc	r22, r1
    149c:	71 05       	cpc	r23, r1
    149e:	09 f0       	breq	.+2      	; 0x14a2 <main+0x68>
    14a0:	e7 c1       	rjmp	.+974    	; 0x1870 <main+0x436>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:432
    {
      _rx_delay_centering = pgm_read_word(&table[i].rx_delay_centering);
    14a2:	fc 01       	movw	r30, r24
    14a4:	e2 5d       	subi	r30, 0xD2	; 210
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	25 91       	lpm	r18, Z+
    14aa:	34 91       	lpm	r19, Z
    14ac:	30 93 9d 01 	sts	0x019D, r19	; 0x80019d <mySerial+0x14>
    14b0:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <mySerial+0x13>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:433
      _rx_delay_intrabit = pgm_read_word(&table[i].rx_delay_intrabit);
    14b4:	fc 01       	movw	r30, r24
    14b6:	e0 5d       	subi	r30, 0xD0	; 208
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	25 91       	lpm	r18, Z+
    14bc:	34 91       	lpm	r19, Z
    14be:	30 93 9f 01 	sts	0x019F, r19	; 0x80019f <mySerial+0x16>
    14c2:	20 93 9e 01 	sts	0x019E, r18	; 0x80019e <mySerial+0x15>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:434
      _rx_delay_stopbit = pgm_read_word(&table[i].rx_delay_stopbit);
    14c6:	fc 01       	movw	r30, r24
    14c8:	ee 5c       	subi	r30, 0xCE	; 206
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	25 91       	lpm	r18, Z+
    14ce:	34 91       	lpm	r19, Z
    14d0:	30 93 a1 01 	sts	0x01A1, r19	; 0x8001a1 <mySerial+0x18>
    14d4:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <mySerial+0x17>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:435
      _tx_delay = pgm_read_word(&table[i].tx_delay);
    14d8:	fc 01       	movw	r30, r24
    14da:	ec 5c       	subi	r30, 0xCC	; 204
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	85 91       	lpm	r24, Z+
    14e0:	94 91       	lpm	r25, Z
    14e2:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <mySerial+0x1a>
    14e6:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <mySerial+0x19>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:441
      break;
    }
  }

  // Set up RX interrupts, but only if we have a valid RX baud rate
  if (_rx_delay_stopbit)
    14ea:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <mySerial+0x17>
    14ee:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <mySerial+0x18>
    14f2:	89 2b       	or	r24, r25
    14f4:	a9 f0       	breq	.+42     	; 0x1520 <main+0xe6>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:443
  {
    if (digitalPinToPCICR(_receivePin))
    14f6:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <mySerial+0xc>
    14fa:	96 30       	cpi	r25, 0x06	; 6
    14fc:	60 f4       	brcc	.+24     	; 0x1516 <main+0xdc>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:445
    {
      *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    14fe:	8b b7       	in	r24, 0x3b	; 59
    1500:	80 62       	ori	r24, 0x20	; 32
    1502:	8b bf       	out	0x3b, r24	; 59
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:446
      *digitalPinToPCMSK(_receivePin) |= _BV(digitalPinToPCMSKbit(_receivePin));
    1504:	85 b3       	in	r24, 0x15	; 21
    1506:	21 e0       	ldi	r18, 0x01	; 1
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	01 c0       	rjmp	.+2      	; 0x150e <main+0xd4>
    150c:	22 0f       	add	r18, r18
    150e:	9a 95       	dec	r25
    1510:	ea f7       	brpl	.-6      	; 0x150c <main+0xd2>
    1512:	82 2b       	or	r24, r18
    1514:	85 bb       	out	0x15, r24	; 21
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:448
    }
    tunedDelay(_tx_delay); // if we were low this establishes the end
    1516:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <mySerial+0x19>
    151a:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <mySerial+0x1a>
    151e:	25 d8       	rcall	.-4022   	; 0x56a <SoftSerial::tunedDelay(unsigned int)>
listen():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:220

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftSerial::listen()
{
  if (active_object != this)
    1520:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <SoftSerial::active_object>
    1524:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <SoftSerial::active_object+0x1>
    1528:	89 58       	subi	r24, 0x89	; 137
    152a:	91 40       	sbci	r25, 0x01	; 1
    152c:	91 f0       	breq	.+36     	; 0x1552 <main+0x118>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:222
  {
    _buffer_overflow = false;
    152e:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <mySerial+0x1b>
    1532:	8e 7f       	andi	r24, 0xFE	; 254
    1534:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <mySerial+0x1b>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:223
    uint8_t oldSREG = SREG;
    1538:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:224
    cli();
    153a:	f8 94       	cli
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:225
    _receive_buffer_head = _receive_buffer_tail = 0;
    153c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <SoftSerial::_receive_buffer_tail>
    1540:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <SoftSerial::_receive_buffer_head>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:226
    active_object = this;
    1544:	29 e8       	ldi	r18, 0x89	; 137
    1546:	31 e0       	ldi	r19, 0x01	; 1
    1548:	30 93 f0 00 	sts	0x00F0, r19	; 0x8000f0 <SoftSerial::active_object+0x1>
    154c:	20 93 ef 00 	sts	0x00EF, r18	; 0x8000ef <SoftSerial::active_object>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:227
    SREG = oldSREG;
    1550:	8f bf       	out	0x3f, r24	; 63
begin():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:57
	 @return True.
 */
 /**************************************************************************/
bool DFPlayerMini_Fast::begin(Stream &stream, bool debug, unsigned long threshold)
{
	_threshold = threshold;
    1552:	84 e6       	ldi	r24, 0x64	; 100
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a0 e0       	ldi	r26, 0x00	; 0
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <myMP3+0x24>
    155e:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <myMP3+0x25>
    1562:	a0 93 85 01 	sts	0x0185, r26	; 0x800185 <myMP3+0x26>
    1566:	b0 93 86 01 	sts	0x0186, r27	; 0x800186 <myMP3+0x27>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\FireTimer\src/FireTimer.cpp:24
 -------
  * void
*/
void FireTimer::begin(const ulong &timeout, const bool &micros)
{
	us = micros;
    156a:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <myMP3+0x17>
update():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\FireTimer\src/FireTimer.cpp:48
 -------
  * void
*/
void FireTimer::update(const ulong &timeout)
{
	period = timeout;
    156e:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <myMP3+0x20>
    1572:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <myMP3+0x21>
    1576:	a0 93 81 01 	sts	0x0181, r26	; 0x800181 <myMP3+0x22>
    157a:	b0 93 82 01 	sts	0x0182, r27	; 0x800182 <myMP3+0x23>
start():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\FireTimer\src/FireTimer.cpp:75
void FireTimer::start()
{
	if (us)
		timeBench = micros();
	else
		timeBench = millis();
    157e:	7c d7       	rcall	.+3832   	; 0x2478 <__TEXT_REGION_LENGTH__+0x478>
    1580:	60 93 7b 01 	sts	0x017B, r22	; 0x80017b <myMP3+0x1c>
    1584:	70 93 7c 01 	sts	0x017C, r23	; 0x80017c <myMP3+0x1d>
    1588:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <myMP3+0x1e>
    158c:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <myMP3+0x1f>
begin():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:60
	timoutTimer.begin(_threshold);

	_serial = &stream;
    1590:	89 e8       	ldi	r24, 0x89	; 137
    1592:	91 e0       	ldi	r25, 0x01	; 1
    1594:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <myMP3+0x1>
    1598:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <myMP3>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:62

	_debug = debug;
    159c:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <myMP3+0x16>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:64

	sendStack.start_byte = dfplayer::SB;
    15a0:	2e e7       	ldi	r18, 0x7E	; 126
    15a2:	20 93 61 01 	sts	0x0161, r18	; 0x800161 <myMP3+0x2>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:65
	sendStack.version    = dfplayer::VER;
    15a6:	9f ef       	ldi	r25, 0xFF	; 255
    15a8:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <myMP3+0x3>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:66
	sendStack.length     = dfplayer::LEN;
    15ac:	d6 e0       	ldi	r29, 0x06	; 6
    15ae:	d0 93 63 01 	sts	0x0163, r29	; 0x800163 <myMP3+0x4>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:67
	sendStack.end_byte   = dfplayer::EB;
    15b2:	8f ee       	ldi	r24, 0xEF	; 239
    15b4:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <myMP3+0xb>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:69

	recStack.start_byte  = dfplayer::SB;
    15b8:	20 93 6b 01 	sts	0x016B, r18	; 0x80016b <myMP3+0xc>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:70
	recStack.version     = dfplayer::VER;
    15bc:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <myMP3+0xd>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:71
	recStack.length      = dfplayer::LEN;
    15c0:	d0 93 6d 01 	sts	0x016D, r29	; 0x80016d <myMP3+0xe>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:72
	recStack.end_byte    = dfplayer::EB;
    15c4:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <myMP3+0x15>
setup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:66
  mySerial.begin(9600);             // My debug software serial.
  myMP3.begin(mySerial);
  delay(1000);                      // Give it time to initialise
    15c8:	68 ee       	ldi	r22, 0xE8	; 232
    15ca:	73 e0       	ldi	r23, 0x03	; 3
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	fe d6       	rcall	.+3580   	; 0x23ce <__TEXT_REGION_LENGTH__+0x3ce>
volume():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:268
 /**************************************************************************/
void DFPlayerMini_Fast::volume(uint8_t volume)
{
	if (volume <= 30)
	{
		sendStack.commandValue  = dfplayer::VOLUME;
    15d2:	d0 93 64 01 	sts	0x0164, r29	; 0x800164 <myMP3+0x5>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:269
		sendStack.feedbackValue = dfplayer::NO_FEEDBACK;
    15d6:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <myMP3+0x6>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:270
		sendStack.paramMSB = 0;
    15da:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <myMP3+0x7>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:271
		sendStack.paramLSB = volume;
    15de:	8c e1       	ldi	r24, 0x1C	; 28
    15e0:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <myMP3+0x8>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:273

		findChecksum(sendStack);
    15e4:	16 d6       	rcall	.+3116   	; 0x2212 <__TEXT_REGION_LENGTH__+0x212>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:274
		sendData();
    15e6:	92 da       	rcall	.-2780   	; 0xb0c <DFPlayerMini_Fast::sendData() [clone .constprop.19]>
setup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:68
  myMP3.volume(28);                 // Maximum value without distortion
  pinMode(HORN_IN, INPUT_PULLUP); 
    15e8:	62 e0       	ldi	r22, 0x02	; 2
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	83 d9       	rcall	.-3322   	; 0x8f4 <pinMode>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:69
  pinMode(THROTTLE_IN,INPUT_PULLUP);
    15ee:	62 e0       	ldi	r22, 0x02	; 2
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	80 d9       	rcall	.-3328   	; 0x8f4 <pinMode>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:71

  Scaled_V=AvgADCRead(SELECTION_IN);
    15f4:	15 d7       	rcall	.+3626   	; 0x2420 <__TEXT_REGION_LENGTH__+0x420>
    15f6:	6b 01       	movw	r12, r22
    15f8:	7c 01       	movw	r14, r24
    15fa:	c0 92 1b 01 	sts	0x011B, r12	; 0x80011b <Scaled_V>
    15fe:	d0 92 1c 01 	sts	0x011C, r13	; 0x80011c <Scaled_V+0x1>
    1602:	e0 92 1d 01 	sts	0x011D, r14	; 0x80011d <Scaled_V+0x2>
    1606:	f0 92 1e 01 	sts	0x011E, r15	; 0x80011e <Scaled_V+0x3>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:72
  if (Scaled_V>SETUP_LOWER && Scaled_V<SETUP_UPPER)
    160a:	26 e6       	ldi	r18, 0x66	; 102
    160c:	36 e6       	ldi	r19, 0x66	; 102
    160e:	46 e3       	ldi	r20, 0x36	; 54
    1610:	50 e4       	ldi	r21, 0x40	; 64
    1612:	fb d3       	rcall	.+2038   	; 0x1e0a <__gesf2>
    1614:	18 16       	cp	r1, r24
    1616:	14 f5       	brge	.+68     	; 0x165c <main+0x222>
    1618:	2a e9       	ldi	r18, 0x9A	; 154
    161a:	39 e9       	ldi	r19, 0x99	; 153
    161c:	49 e4       	ldi	r20, 0x49	; 73
    161e:	50 e4       	ldi	r21, 0x40	; 64
    1620:	c7 01       	movw	r24, r14
    1622:	b6 01       	movw	r22, r12
    1624:	b2 d2       	rcall	.+1380   	; 0x1b8a <__cmpsf2>
    1626:	87 ff       	sbrs	r24, 7
    1628:	19 c0       	rjmp	.+50     	; 0x165c <main+0x222>
DoSetup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:361
{
    unsigned int Timeout1=0, Timeout2=0;
    byte Dbounce1=0, Dbounce2=0;
    byte PWMAvailable=0;
    //float SetupSWVal=0.0;
    Dbounce1=ReadSetupSwitch();
    162a:	04 d8       	rcall	.-4088   	; 0x634 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:362
    Timeout1=millis(); // read current time
    162c:	25 d7       	rcall	.+3658   	; 0x2478 <__TEXT_REGION_LENGTH__+0x478>
    162e:	8b 01       	movw	r16, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:363
    BlinkLED(6,300,300);
    1630:	4c e2       	ldi	r20, 0x2C	; 44
    1632:	51 e0       	ldi	r21, 0x01	; 1
    1634:	6c e2       	ldi	r22, 0x2C	; 44
    1636:	71 e0       	ldi	r23, 0x01	; 1
    1638:	86 e0       	ldi	r24, 0x06	; 6
    163a:	30 d9       	rcall	.-3488   	; 0x89c <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:367
    //Wait for switch release
    do
    {
        Dbounce1=ReadSetupSwitch();
    163c:	fb d7       	rcall	.+4086   	; 0x2634 <__TEXT_REGION_LENGTH__+0x634>
    163e:	d8 2f       	mov	r29, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:368
        delay(DEBOUNCETIME);
    1640:	68 ec       	ldi	r22, 0xC8	; 200
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	c2 d6       	rcall	.+3460   	; 0x23ce <__TEXT_REGION_LENGTH__+0x3ce>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:369
        Dbounce2=ReadSetupSwitch();
    164a:	f4 d7       	rcall	.+4072   	; 0x2634 <__TEXT_REGION_LENGTH__+0x634>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:370
        Timeout2=millis();
    164c:	15 d7       	rcall	.+3626   	; 0x2478 <__TEXT_REGION_LENGTH__+0x478>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:371
        if (Timeout2-Timeout1 >10000)
    164e:	60 1b       	sub	r22, r16
    1650:	71 0b       	sbc	r23, r17
    1652:	61 31       	cpi	r22, 0x11	; 17
    1654:	77 42       	sbci	r23, 0x27	; 39
    1656:	08 f4       	brcc	.+2      	; 0x165a <main+0x220>
    1658:	11 c1       	rjmp	.+546    	; 0x187c <main+0x442>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:376
        {
          #ifdef DEBUG
          mySerial.println(F("Reset settings in Dosetup"));
          #endif
          ResetSettings();
    165a:	9a dc       	rcall	.-1740   	; 0xf90 <ResetSettings()>
setup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:80
  }
  /*
   * See if the letter 'T' has been stored, indicating valid data has been set by the user.
   * If it has, recall the settings to globals.
   */
  if (EEPROM.read(E_INIT) == 'T')
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	91 e0       	ldi	r25, 0x01	; 1
    1660:	ca dc       	rcall	.-1644   	; 0xff6 <EEPROMClass::read(int) [clone .isra.0]>
    1662:	84 35       	cpi	r24, 0x54	; 84
    1664:	09 f0       	breq	.+2      	; 0x1668 <main+0x22e>
    1666:	20 c1       	rjmp	.+576    	; 0x18a8 <main+0x46e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:87
     RecallSettings();
     CalculateGears();
  }
  else{  /* First run through of the software, reset to default values by calling the function below */
      ResetSettings();
      RecallSettings();
    1668:	c7 dc       	rcall	.-1650   	; 0xff8 <RecallSettings()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:88
      CalculateGears();
    166a:	03 d8       	rcall	.-4090   	; 0x672 <CalculateGears()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:90
    }
    digitalWrite(LEDPIN,LEDOFF);       // Switch LED off now init is complete
    166c:	61 e0       	ldi	r22, 0x01	; 1
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	d9 d8       	rcall	.-3662   	; 0x824 <digitalWrite>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:91
    PWMFound=CheckforPWMInputs();      // Save unnecessary waits for PWM inputs later on.
    1672:	b9 d9       	rcall	.-3214   	; 0x9e6 <CheckforPWMInputs()>
    1674:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <PWMFound>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:94
    // For maintenance only and not in debug mode
    #ifndef DEBUG
    GetCurrentPWMVals();
    1678:	9c d9       	rcall	.-3272   	; 0x9b2 <GetCurrentPWMVals()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:95
    mySerial.println(F("\nEEPROM Settings:"));
    167a:	87 e9       	ldi	r24, 0x97	; 151
    167c:	91 e0       	ldi	r25, 0x01	; 1
    167e:	c6 d8       	rcall	.-3700   	; 0x80c <Print::println(__FlashStringHelper const*) [clone .constprop.12]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:96
    mySerial.print(F("Forward Throttle limit "));
    1680:	8f e7       	ldi	r24, 0x7F	; 127
    1682:	91 e0       	ldi	r25, 0x01	; 1
    1684:	a9 d8       	rcall	.-3758   	; 0x7d8 <Print::print(__FlashStringHelper const*) [clone .constprop.13]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:97
    mySerial.println(ForwardThrot);
    1686:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <ForwardThrot>
    168a:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <ForwardThrot+0x1>
    168e:	4c db       	rcall	.-2408   	; 0xd28 <Print::println(unsigned int, int) [clone .constprop.10]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:98
    mySerial.print(F("Neutral "));
    1690:	86 e7       	ldi	r24, 0x76	; 118
    1692:	91 e0       	ldi	r25, 0x01	; 1
    1694:	a1 d8       	rcall	.-3774   	; 0x7d8 <Print::print(__FlashStringHelper const*) [clone .constprop.13]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:99
    mySerial.println(NeutralThrot);
    1696:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <NeutralThrot>
    169a:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <NeutralThrot+0x1>
    169e:	44 db       	rcall	.-2424   	; 0xd28 <Print::println(unsigned int, int) [clone .constprop.10]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:100
    mySerial.print(F("Reverse Throttle limit "));
    16a0:	8e e5       	ldi	r24, 0x5E	; 94
    16a2:	91 e0       	ldi	r25, 0x01	; 1
    16a4:	99 d8       	rcall	.-3790   	; 0x7d8 <Print::print(__FlashStringHelper const*) [clone .constprop.13]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:101
    mySerial.println(ReverseThrot);
    16a6:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <ReverseThrot>
    16aa:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <ReverseThrot+0x1>
    16ae:	3c db       	rcall	.-2440   	; 0xd28 <Print::println(unsigned int, int) [clone .constprop.10]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:102
    mySerial.print(F("Throttle is "));
    16b0:	81 e5       	ldi	r24, 0x51	; 81
    16b2:	91 e0       	ldi	r25, 0x01	; 1
    16b4:	91 d8       	rcall	.-3806   	; 0x7d8 <Print::print(__FlashStringHelper const*) [clone .constprop.13]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:103
    if (ThrotNormReverse==NORMAL_THROT)
    16b6:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <ThrotNormReverse>
    16ba:	84 33       	cpi	r24, 0x34	; 52
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <main+0x286>
    16be:	f6 c0       	rjmp	.+492    	; 0x18ac <main+0x472>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:105
    {
      mySerial.println(F("normal."));
    16c0:	89 e4       	ldi	r24, 0x49	; 73
    16c2:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:109
    }
    else
    {
      mySerial.println(F("reversed."));
    16c4:	a3 d8       	rcall	.-3770   	; 0x80c <Print::println(__FlashStringHelper const*) [clone .constprop.12]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:111
    }
    mySerial.print(F("Horn limit "));
    16c6:	83 e3       	ldi	r24, 0x33	; 51
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	86 d8       	rcall	.-3828   	; 0x7d8 <Print::print(__FlashStringHelper const*) [clone .constprop.13]>
print():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:73
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    16cc:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <HornPulseLimit>
    16d0:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <HornPulseLimit+0x1>
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:95
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    16d8:	2a e0       	ldi	r18, 0x0A	; 10
    16da:	89 e8       	ldi	r24, 0x89	; 137
    16dc:	91 e0       	ldi	r25, 0x01	; 1
    16de:	bb d9       	rcall	.-3210   	; 0xa56 <Print::printNumber(unsigned long, unsigned char)>
setup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:113
    mySerial.print(HornPulseLimit);
    mySerial.print(F(", must be "));
    16e0:	88 e2       	ldi	r24, 0x28	; 40
    16e2:	91 e0       	ldi	r25, 0x01	; 1
    16e4:	79 d8       	rcall	.-3854   	; 0x7d8 <Print::print(__FlashStringHelper const*) [clone .constprop.13]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:114
    if (HornGreatOrLessThan == GREATERTHAN)
    16e6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <HornGreatOrLessThan>
    16ea:	83 33       	cpi	r24, 0x33	; 51
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <main+0x2b6>
    16ee:	e1 c0       	rjmp	.+450    	; 0x18b2 <main+0x478>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:116
    {
      mySerial.println(F(" > to operate."));
    16f0:	89 e1       	ldi	r24, 0x19	; 25
    16f2:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:120
    }
    else
    {
      mySerial.println(F(" < to operate"));
    16f4:	8b d8       	rcall	.-3818   	; 0x80c <Print::println(__FlashStringHelper const*) [clone .constprop.12]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:122
    }
    mySerial.print(F("PWM detected:"));
    16f6:	8d ef       	ldi	r24, 0xFD	; 253
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	6e d8       	rcall	.-3876   	; 0x7d8 <Print::print(__FlashStringHelper const*) [clone .constprop.13]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:123
    if (PWMFound==1 || PWMFound== 11)
    16fc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <PWMFound>
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	11 f0       	breq	.+4      	; 0x1708 <main+0x2ce>
    1704:	8b 30       	cpi	r24, 0x0B	; 11
    1706:	59 f4       	brne	.+22     	; 0x171e <main+0x2e4>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:125
    {
      mySerial.println(F("Horn OK "));
    1708:	84 ef       	ldi	r24, 0xF4	; 244
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	7f d8       	rcall	.-3842   	; 0x80c <Print::println(__FlashStringHelper const*) [clone .constprop.12]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:126
      mySerial.print(F("Current horn "));
    170e:	86 ee       	ldi	r24, 0xE6	; 230
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	62 d8       	rcall	.-3900   	; 0x7d8 <Print::print(__FlashStringHelper const*) [clone .constprop.13]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:127
      mySerial.println(HornPWM);      
    1714:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <HornPWM>
    1718:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <HornPWM+0x1>
    171c:	05 db       	rcall	.-2550   	; 0xd28 <Print::println(unsigned int, int) [clone .constprop.10]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:129
    }
    if (PWMFound==10 || PWMFound== 11)
    171e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <PWMFound>
    1722:	8a 50       	subi	r24, 0x0A	; 10
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	08 f0       	brcs	.+2      	; 0x172a <main+0x2f0>
    1728:	c7 c0       	rjmp	.+398    	; 0x18b8 <main+0x47e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:131
    {
      mySerial.println(F("Throttle OK "));
    172a:	89 ed       	ldi	r24, 0xD9	; 217
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	6e d8       	rcall	.-3876   	; 0x80c <Print::println(__FlashStringHelper const*) [clone .constprop.12]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:132
      mySerial.print(F("Current throttle "));
    1730:	87 ec       	ldi	r24, 0xC7	; 199
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	51 d8       	rcall	.-3934   	; 0x7d8 <Print::print(__FlashStringHelper const*) [clone .constprop.13]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:133
      mySerial.println(ThrottlePWM);
    1736:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ThrottlePWM>
    173a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <ThrottlePWM+0x1>
    173e:	f4 da       	rcall	.-2584   	; 0xd28 <Print::println(unsigned int, int) [clone .constprop.10]>
main():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:632
                }
           
                else if ((ThrottlePosition > NeutralThrot+TimerAdjustment+GearHysteresis) && (ThrottlePosition < FirstGear-GearHysteresis))
                //if ((ThrottlePosition > NeutralThrot+TimerAdjustment) && (ThrottlePosition < FirstGear))
                {
                  return(1); // First gear
    1740:	d1 e0       	ldi	r29, 0x01	; 1
loop():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:762
          PreviousSound=CurrentSound;          
      }
      
      else if (Scaled_V>STEAM_2_LOWER && Scaled_V<STEAM_2_UPPER)
      {
          Sounds=SteamBoat2;
    1742:	43 e0       	ldi	r20, 0x03	; 3
    1744:	e4 2e       	mov	r14, r20
    1746:	f1 2c       	mov	r15, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:750
          PreviousSound=CurrentSound;
      }
  
      else if (Scaled_V>STEAM_1_LOWER && Scaled_V<STEAM_1_UPPER)
      {
          Sounds=SteamBoat1;
    1748:	52 e0       	ldi	r21, 0x02	; 2
    174a:	c5 2e       	mov	r12, r21
    174c:	d1 2c       	mov	r13, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:738
          PreviousSound=CurrentSound;
      }
      
      else if (Scaled_V>TUG_DIESEL_LOWER && Scaled_V<TUG_DIESEL_UPPER)
      {
          Sounds=TugDiesel;
    174e:	aa 24       	eor	r10, r10
    1750:	a3 94       	inc	r10
    1752:	b1 2c       	mov	r11, r1
playAdvertisement():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:188
			   The track number to play.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::playAdvertisement(uint16_t trackNum)
{
	sendStack.commandValue  = dfplayer::INSERT_ADVERT;
    1754:	73 e1       	ldi	r23, 0x13	; 19
    1756:	97 2e       	mov	r9, r23
loop():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:716

void loop()
{
    //First check the switches input to know what sample to play
    
    Scaled_V=AvgADCRead(SELECTION_IN);
    1758:	63 d6       	rcall	.+3270   	; 0x2420 <__TEXT_REGION_LENGTH__+0x420>
    175a:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <Scaled_V>
    175e:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <Scaled_V+0x1>
    1762:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Scaled_V+0x2>
    1766:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <Scaled_V+0x3>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:717
    GetCurrentPWMVals();
    176a:	23 d9       	rcall	.-3514   	; 0x9b2 <GetCurrentPWMVals()>
CheckCurrentGear():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:601
{
    byte PWMPresent;
    byte loopy;
    PWMPresent=PWMFound;	// Copy global

    if((PWMPresent==0)||(PWMPresent==1))  //Either no PWM inputs or just horn
    176c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <PWMFound>
    1770:	82 30       	cpi	r24, 0x02	; 2
    1772:	08 f0       	brcs	.+2      	; 0x1776 <main+0x33c>
    1774:	a5 c0       	rjmp	.+330    	; 0x18c0 <main+0x486>
main():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:603
    {
      return(0);
    1776:	c0 e0       	ldi	r28, 0x00	; 0
loop():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:718
{
    //First check the switches input to know what sample to play
    
    Scaled_V=AvgADCRead(SELECTION_IN);
    GetCurrentPWMVals();
    CurrentGear=CheckCurrentGear();
    1778:	c0 93 1a 01 	sts	0x011A, r28	; 0x80011a <CurrentGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:722
      //Now we now what type of sound to play and at what speed.
// Change the sample if needed

    if (AdvertPlaying==0)     // If no advert/horn then we chan change gear, else skip until finished
    177c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <AdvertPlaying>
    1780:	81 11       	cpse	r24, r1
    1782:	31 c0       	rjmp	.+98     	; 0x17e6 <main+0x3ac>
    1784:	0c 2f       	mov	r16, r28
    1786:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:724
    {
      if (Scaled_V>NAVY_DIESEL_LOWER && Scaled_V<NAVY_DIESEL_UPPER)
    1788:	40 90 1b 01 	lds	r4, 0x011B	; 0x80011b <Scaled_V>
    178c:	50 90 1c 01 	lds	r5, 0x011C	; 0x80011c <Scaled_V+0x1>
    1790:	60 90 1d 01 	lds	r6, 0x011D	; 0x80011d <Scaled_V+0x2>
    1794:	70 90 1e 01 	lds	r7, 0x011E	; 0x80011e <Scaled_V+0x3>
    1798:	21 ee       	ldi	r18, 0xE1	; 225
    179a:	3a e7       	ldi	r19, 0x7A	; 122
    179c:	4c e8       	ldi	r20, 0x8C	; 140
    179e:	50 e4       	ldi	r21, 0x40	; 64
    17a0:	c3 01       	movw	r24, r6
    17a2:	b2 01       	movw	r22, r4
    17a4:	32 d3       	rcall	.+1636   	; 0x1e0a <__gesf2>
    17a6:	18 16       	cp	r1, r24
    17a8:	0c f0       	brlt	.+2      	; 0x17ac <main+0x372>
    17aa:	5a c1       	rjmp	.+692    	; 0x1a60 <main+0x626>
    17ac:	2b e7       	ldi	r18, 0x7B	; 123
    17ae:	34 e1       	ldi	r19, 0x14	; 20
    17b0:	46 e9       	ldi	r20, 0x96	; 150
    17b2:	50 e4       	ldi	r21, 0x40	; 64
    17b4:	c3 01       	movw	r24, r6
    17b6:	b2 01       	movw	r22, r4
    17b8:	e8 d1       	rcall	.+976    	; 0x1b8a <__cmpsf2>
    17ba:	87 ff       	sbrs	r24, 7
    17bc:	51 c1       	rjmp	.+674    	; 0x1a60 <main+0x626>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:726
      {
          Sounds=NavyDiesel;
    17be:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    17c2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:727
          CurrentSound=SpeedIndex[Sounds][CurrentGear];
    17c6:	f8 01       	movw	r30, r16
    17c8:	ee 59       	subi	r30, 0x9E	; 158
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	80 81       	ld	r24, Z
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:763
      }
      
      else if (Scaled_V>STEAM_2_LOWER && Scaled_V<STEAM_2_UPPER)
      {
          Sounds=SteamBoat2;
          CurrentSound=SpeedIndex[Sounds][CurrentGear];
    17ce:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <CurrentSound>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:765
       
          if(CurrentSound!=PreviousSound)
    17d2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <PreviousSound>
    17d6:	89 17       	cp	r24, r25
    17d8:	11 f0       	breq	.+4      	; 0x17de <main+0x3a4>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:767
          {  
              myMP3.loop(CurrentSound);
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	9c da       	rcall	.-2760   	; 0xd16 <DFPlayerMini_Fast::loop(unsigned int) [clone .constprop.14]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:769
          }
          PreviousSound=CurrentSound;      
    17de:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <CurrentSound>
    17e2:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <PreviousSound>
PlayHorn():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:241
   changes the MP3 track to an advert
*/
int PlayHorn()
{
    unsigned int HornTime;
    HornTime=HornPWM;
    17e6:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <HornPWM>
    17ea:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <HornPWM+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:242
    CurrentAdvert=SpeedIndex[Sounds][CurrentGear];
    17ee:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <CurrentGear>
    17f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    17f6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    17fa:	65 e0       	ldi	r22, 0x05	; 5
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	09 d3       	rcall	.+1554   	; 0x1e12 <__mulhi3>
    1800:	8e 59       	subi	r24, 0x9E	; 158
    1802:	9f 4f       	sbci	r25, 0xFF	; 255
    1804:	e8 0f       	add	r30, r24
    1806:	f9 2f       	mov	r31, r25
    1808:	f1 1d       	adc	r31, r1
    180a:	80 81       	ld	r24, Z
    180c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <CurrentAdvert>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:244

    if(HornTime >500 && HornTime <2500) // To detect lack of signal or seriously large signal and not toot your trumpet
    1810:	a9 01       	movw	r20, r18
    1812:	45 5f       	subi	r20, 0xF5	; 245
    1814:	51 40       	sbci	r21, 0x01	; 1
    1816:	4f 3c       	cpi	r20, 0xCF	; 207
    1818:	57 40       	sbci	r21, 0x07	; 7
    181a:	68 f4       	brcc	.+26     	; 0x1836 <main+0x3fc>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:247
    {
      
        if((HornGreatOrLessThan==GREATERTHAN && HornTime > HornPulseLimit) || (HornGreatOrLessThan==LESSTHAN && HornTime < HornPulseLimit))
    181c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <HornGreatOrLessThan>
    1820:	93 33       	cpi	r25, 0x33	; 51
    1822:	09 f0       	breq	.+2      	; 0x1826 <main+0x3ec>
    1824:	6f c1       	rjmp	.+734    	; 0x1b04 <main+0x6ca>
    1826:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <HornPulseLimit>
    182a:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <HornPulseLimit+0x1>
    182e:	42 17       	cp	r20, r18
    1830:	53 07       	cpc	r21, r19
    1832:	08 f4       	brcc	.+2      	; 0x1836 <main+0x3fc>
    1834:	72 c1       	rjmp	.+740    	; 0x1b1a <main+0x6e0>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:265
     * and reset previous advert.
     */
     /*TimeSinceAd=millis();
       if (TimeSinceAd > AdTime+ 3000)
       */
       if(millis() >(AdTime+13000))
    1836:	20 d6       	rcall	.+3136   	; 0x2478 <__TEXT_REGION_LENGTH__+0x478>
    1838:	ab 01       	movw	r20, r22
    183a:	bc 01       	movw	r22, r24
    183c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <AdTime>
    1840:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <AdTime+0x1>
    1844:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <AdTime+0x2>
    1848:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <AdTime+0x3>
    184c:	88 53       	subi	r24, 0x38	; 56
    184e:	9d 4c       	sbci	r25, 0xCD	; 205
    1850:	af 4f       	sbci	r26, 0xFF	; 255
    1852:	bf 4f       	sbci	r27, 0xFF	; 255
    1854:	84 17       	cp	r24, r20
    1856:	95 07       	cpc	r25, r21
    1858:	a6 07       	cpc	r26, r22
    185a:	b7 07       	cpc	r27, r23
    185c:	08 f0       	brcs	.+2      	; 0x1860 <main+0x426>
    185e:	7c cf       	rjmp	.-264    	; 0x1758 <main+0x31e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:267
       {
          digitalWrite(LEDPIN,LEDOFF);  // Signal end of HORN/Advert.
    1860:	61 e0       	ldi	r22, 0x01	; 1
    1862:	82 e0       	ldi	r24, 0x02	; 2
    1864:	df d7       	rcall	.+4030   	; 0x2824 <__TEXT_REGION_LENGTH__+0x824>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:268
          PreviousAdvert=0;
    1866:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <PreviousAdvert>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:269
          AdvertPlaying=0;
    186a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <AdvertPlaying>
    186e:	74 cf       	rjmp	.-280    	; 0x1758 <main+0x31e>
    1870:	0c 96       	adiw	r24, 0x0c	; 12
begin():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:427

void SoftSerial::begin(long speed)
{
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
    1872:	80 39       	cpi	r24, 0x90	; 144
    1874:	91 05       	cpc	r25, r1
    1876:	09 f0       	breq	.+2      	; 0x187a <main+0x440>
    1878:	07 ce       	rjmp	.-1010   	; 0x1488 <main+0x4e>
    187a:	37 ce       	rjmp	.-914    	; 0x14ea <main+0xb0>
DoSetup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:380
          #endif
          ResetSettings();
          return(77); // Exit out now.
        }
        
    }while(Dbounce1==SWITCHCLOSED && Dbounce1==SWITCHCLOSED);
    187c:	d7 37       	cpi	r29, 0x77	; 119
    187e:	09 f4       	brne	.+2      	; 0x1882 <main+0x448>
    1880:	dd ce       	rjmp	.-582    	; 0x163c <main+0x202>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:382
    
    PWMAvailable=CheckforPWMInputs();
    1882:	b1 d8       	rcall	.-3742   	; 0x9e6 <CheckforPWMInputs()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:384

    switch (PWMAvailable){
    1884:	8a 30       	cpi	r24, 0x0A	; 10
    1886:	39 f0       	breq	.+14     	; 0x1896 <main+0x45c>
    1888:	8b 30       	cpi	r24, 0x0B	; 11
    188a:	21 f0       	breq	.+8      	; 0x1894 <main+0x45a>
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	29 f4       	brne	.+10     	; 0x189a <main+0x460>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:387

      case 1:             // Horn only
        DoHornSetup();
    1890:	0d db       	rcall	.-2534   	; 0xeac <DoHornSetup()>
    1892:	e4 ce       	rjmp	.-568    	; 0x165c <main+0x222>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:395
      case 10:            // ThrottleOnly
        DoThrottleSetup();
      break;
      
      case 11:            // Both
        DoHornSetup();
    1894:	0b db       	rcall	.-2538   	; 0xeac <DoHornSetup()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:396
        DoThrottleSetup();
    1896:	5b da       	rcall	.-2890   	; 0xd4e <DoThrottleSetup()>
    1898:	e1 ce       	rjmp	.-574    	; 0x165c <main+0x222>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:401
      break;

      case 0:               // No PWM detected so abort
      default:
            BlinkLED(6, 200, 800);
    189a:	40 e2       	ldi	r20, 0x20	; 32
    189c:	53 e0       	ldi	r21, 0x03	; 3
    189e:	68 ec       	ldi	r22, 0xC8	; 200
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	86 e0       	ldi	r24, 0x06	; 6
    18a4:	fb d7       	rcall	.+4086   	; 0x289c <__TEXT_REGION_LENGTH__+0x89c>
    18a6:	da ce       	rjmp	.-588    	; 0x165c <main+0x222>
setup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:86
  {
     RecallSettings();
     CalculateGears();
  }
  else{  /* First run through of the software, reset to default values by calling the function below */
      ResetSettings();
    18a8:	73 db       	rcall	.-2330   	; 0xf90 <ResetSettings()>
    18aa:	de ce       	rjmp	.-580    	; 0x1668 <main+0x22e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:109
    {
      mySerial.println(F("normal."));
    }
    else
    {
      mySerial.println(F("reversed."));
    18ac:	8f e3       	ldi	r24, 0x3F	; 63
    18ae:	91 e0       	ldi	r25, 0x01	; 1
    18b0:	09 cf       	rjmp	.-494    	; 0x16c4 <main+0x28a>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:120
    {
      mySerial.println(F(" > to operate."));
    }
    else
    {
      mySerial.println(F(" < to operate"));
    18b2:	8b e0       	ldi	r24, 0x0B	; 11
    18b4:	91 e0       	ldi	r25, 0x01	; 1
    18b6:	1e cf       	rjmp	.-452    	; 0x16f4 <main+0x2ba>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:137
      mySerial.print(F("Current throttle "));
      mySerial.println(ThrottlePWM);
    }
    else
    {
      mySerial.println(F("No PWM found"));
    18b8:	8a eb       	ldi	r24, 0xBA	; 186
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a7 d7       	rcall	.+3918   	; 0x280c <__TEXT_REGION_LENGTH__+0x80c>
    18be:	40 cf       	rjmp	.-384    	; 0x1740 <main+0x306>
CheckCurrentGear():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:607
    {
      return(0);
    }
    else
    {
       ThrottlePosition=ThrottlePWM;
    18c0:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <ThrottlePWM>
    18c4:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <ThrottlePWM+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:609
       //Averaging filter
       total=total-readings[readIndex];
    18c8:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <readIndex>
    18cc:	e2 2f       	mov	r30, r18
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	ee 0f       	add	r30, r30
    18d2:	ff 1f       	adc	r31, r31
    18d4:	e2 50       	subi	r30, 0x02	; 2
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	60 81       	ld	r22, Z
    18da:	71 81       	ldd	r23, Z+1	; 0x01
    18dc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <total>
    18e0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <total+0x1>
    18e4:	84 0f       	add	r24, r20
    18e6:	95 1f       	adc	r25, r21
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:610
       readings[readIndex]=ThrottlePWM;
    18e8:	51 83       	std	Z+1, r21	; 0x01
    18ea:	40 83       	st	Z, r20
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:612
      // add the reading to the total
      total = total +readings[readIndex];
    18ec:	86 1b       	sub	r24, r22
    18ee:	97 0b       	sbc	r25, r23
    18f0:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <total+0x1>
    18f4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <total>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:613
      readIndex++;
    18f8:	2f 5f       	subi	r18, 0xFF	; 255
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:614
      if(readIndex>=numReadings)
    18fa:	24 30       	cpi	r18, 0x04	; 4
    18fc:	08 f0       	brcs	.+2      	; 0x1900 <main+0x4c6>
    18fe:	5e c0       	rjmp	.+188    	; 0x19bc <main+0x582>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:613
       //Averaging filter
       total=total-readings[readIndex];
       readings[readIndex]=ThrottlePWM;
      // add the reading to the total
      total = total +readings[readIndex];
      readIndex++;
    1900:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <readIndex>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:620
      {
        readIndex=0; 
      }
      //Now calculate the all important average
      //ThrottlePosition=total/numReadings;
      ThrottlePosition=total>>2;
    1904:	96 95       	lsr	r25
    1906:	87 95       	ror	r24
    1908:	96 95       	lsr	r25
    190a:	87 95       	ror	r24
    190c:	20 91 fb 00 	lds	r18, 0x00FB	; 0x8000fb <NeutralThrot>
    1910:	30 91 fc 00 	lds	r19, 0x00FC	; 0x8000fc <NeutralThrot+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:622
       
        if(ThrotNormReverse==NORMAL_THROT)
    1914:	40 91 fd 00 	lds	r20, 0x00FD	; 0x8000fd <ThrotNormReverse>
    1918:	44 33       	cpi	r20, 0x34	; 52
    191a:	09 f0       	breq	.+2      	; 0x191e <main+0x4e4>
    191c:	52 c0       	rjmp	.+164    	; 0x19c2 <main+0x588>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:624
        {
                if ((ThrottlePosition > NeutralThrot-TimerAdjustment) && (ThrottlePosition < NeutralThrot+TimerAdjustment))
    191e:	a9 01       	movw	r20, r18
    1920:	4b 51       	subi	r20, 0x1B	; 27
    1922:	51 09       	sbc	r21, r1
    1924:	48 17       	cp	r20, r24
    1926:	59 07       	cpc	r21, r25
    1928:	38 f4       	brcc	.+14     	; 0x1938 <main+0x4fe>
    192a:	b9 01       	movw	r22, r18
    192c:	65 5e       	subi	r22, 0xE5	; 229
    192e:	7f 4f       	sbci	r23, 0xFF	; 255
    1930:	86 17       	cp	r24, r22
    1932:	97 07       	cpc	r25, r23
    1934:	08 f4       	brcc	.+2      	; 0x1938 <main+0x4fe>
    1936:	1f cf       	rjmp	.-450    	; 0x1776 <main+0x33c>
    1938:	e0 91 f9 00 	lds	r30, 0x00F9	; 0x8000f9 <FirstGear>
    193c:	f0 91 fa 00 	lds	r31, 0x00FA	; 0x8000fa <FirstGear+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:629
                {
                  return(0);  //Idle +/- timer adjustment
                }
           
                else if ((ThrottlePosition > NeutralThrot+TimerAdjustment+GearHysteresis) && (ThrottlePosition < FirstGear-GearHysteresis))
    1940:	2c 5c       	subi	r18, 0xCC	; 204
    1942:	3f 4f       	sbci	r19, 0xFF	; 255
    1944:	28 17       	cp	r18, r24
    1946:	39 07       	cpc	r19, r25
    1948:	38 f4       	brcc	.+14     	; 0x1958 <main+0x51e>
    194a:	9f 01       	movw	r18, r30
    194c:	29 51       	subi	r18, 0x19	; 25
    194e:	31 09       	sbc	r19, r1
    1950:	82 17       	cp	r24, r18
    1952:	93 07       	cpc	r25, r19
    1954:	08 f4       	brcc	.+2      	; 0x1958 <main+0x51e>
    1956:	7e c0       	rjmp	.+252    	; 0x1a54 <main+0x61a>
    1958:	60 91 f7 00 	lds	r22, 0x00F7	; 0x8000f7 <SecondGear>
    195c:	70 91 f8 00 	lds	r23, 0x00F8	; 0x8000f8 <SecondGear+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:635
                //if ((ThrottlePosition > NeutralThrot+TimerAdjustment) && (ThrottlePosition < FirstGear))
                {
                  return(1); // First gear
                }
            
                else if((ThrottlePosition > FirstGear+GearHysteresis) && (ThrottlePosition < SecondGear-GearHysteresis))
    1960:	79 96       	adiw	r30, 0x19	; 25
    1962:	e8 17       	cp	r30, r24
    1964:	f9 07       	cpc	r31, r25
    1966:	30 f4       	brcc	.+12     	; 0x1974 <main+0x53a>
    1968:	9b 01       	movw	r18, r22
    196a:	29 51       	subi	r18, 0x19	; 25
    196c:	31 09       	sbc	r19, r1
    196e:	82 17       	cp	r24, r18
    1970:	93 07       	cpc	r25, r19
    1972:	10 f1       	brcs	.+68     	; 0x19b8 <main+0x57e>
    1974:	20 91 f5 00 	lds	r18, 0x00F5	; 0x8000f5 <ThirdGear>
    1978:	30 91 f6 00 	lds	r19, 0x00F6	; 0x8000f6 <ThirdGear+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:640
                {
                    return(2); // Second gear
                }

                else if((ThrottlePosition > SecondGear+GearHysteresis) && (ThrottlePosition < ThirdGear-GearHysteresis))
    197c:	67 5e       	subi	r22, 0xE7	; 231
    197e:	7f 4f       	sbci	r23, 0xFF	; 255
    1980:	68 17       	cp	r22, r24
    1982:	79 07       	cpc	r23, r25
    1984:	38 f4       	brcc	.+14     	; 0x1994 <main+0x55a>
    1986:	b9 01       	movw	r22, r18
    1988:	69 51       	subi	r22, 0x19	; 25
    198a:	71 09       	sbc	r23, r1
    198c:	86 17       	cp	r24, r22
    198e:	97 07       	cpc	r25, r23
    1990:	08 f4       	brcc	.+2      	; 0x1994 <main+0x55a>
    1992:	62 c0       	rjmp	.+196    	; 0x1a58 <main+0x61e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:646
                {
                    return(3); // Third gear
                }
           
                //else if((ThrottlePosition > ThirdGear) && (ThrottlePosition < FourthGear))
                else if(ThrottlePosition > ThirdGear+GearHysteresis)
    1994:	27 5e       	subi	r18, 0xE7	; 231
    1996:	3f 4f       	sbci	r19, 0xFF	; 255
    1998:	28 17       	cp	r18, r24
    199a:	39 07       	cpc	r19, r25
    199c:	08 f4       	brcc	.+2      	; 0x19a0 <main+0x566>
    199e:	5e c0       	rjmp	.+188    	; 0x1a5c <main+0x622>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:651
                {
                    return(4); // Fourth gear
                }
                          
            if ((ThrottlePosition < NeutralThrot-TimerAdjustment) && (ThrottlePosition > ReverseThrot))    // Reverse always second gear
    19a0:	84 17       	cp	r24, r20
    19a2:	95 07       	cpc	r25, r21
    19a4:	08 f0       	brcs	.+2      	; 0x19a8 <main+0x56e>
    19a6:	e8 ce       	rjmp	.-560    	; 0x1778 <main+0x33e>
    19a8:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <ReverseThrot>
    19ac:	30 91 f4 00 	lds	r19, 0x00F4	; 0x8000f4 <ReverseThrot+0x1>
    19b0:	28 17       	cp	r18, r24
    19b2:	39 07       	cpc	r19, r25
    19b4:	08 f0       	brcs	.+2      	; 0x19b8 <main+0x57e>
    19b6:	e0 ce       	rjmp	.-576    	; 0x1778 <main+0x33e>
main():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:682
            {
                return(4);
            }
            else if ((ThrottlePosition > NeutralThrot-TimerAdjustment-GearHysteresis) && (ThrottlePosition < ReverseThrot))    // Reverse always second gear
            {
                return(2); 
    19b8:	c2 e0       	ldi	r28, 0x02	; 2
    19ba:	de ce       	rjmp	.-580    	; 0x1778 <main+0x33e>
CheckCurrentGear():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:616
      // add the reading to the total
      total = total +readings[readIndex];
      readIndex++;
      if(readIndex>=numReadings)
      {
        readIndex=0; 
    19bc:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <readIndex>
    19c0:	a1 cf       	rjmp	.-190    	; 0x1904 <main+0x4ca>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:659
             }
        }
    
        else  // Reversed throttle channel from receiver
        {
            if ((ThrottlePosition < NeutralThrot+TimerAdjustment) && (ThrottlePosition > NeutralThrot-TimerAdjustment))
    19c2:	a9 01       	movw	r20, r18
    19c4:	45 5e       	subi	r20, 0xE5	; 229
    19c6:	5f 4f       	sbci	r21, 0xFF	; 255
    19c8:	84 17       	cp	r24, r20
    19ca:	95 07       	cpc	r25, r21
    19cc:	30 f4       	brcc	.+12     	; 0x19da <main+0x5a0>
    19ce:	46 53       	subi	r20, 0x36	; 54
    19d0:	51 09       	sbc	r21, r1
    19d2:	48 17       	cp	r20, r24
    19d4:	59 07       	cpc	r21, r25
    19d6:	08 f4       	brcc	.+2      	; 0x19da <main+0x5a0>
    19d8:	ce ce       	rjmp	.-612    	; 0x1776 <main+0x33c>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:663
            {
              return(0);  //Idle
            }
            if ((ThrottlePosition < NeutralThrot-TimerAdjustment-GearHysteresis) &&  (ThrottlePosition > FirstGear+GearHysteresis))
    19da:	24 53       	subi	r18, 0x34	; 52
    19dc:	31 09       	sbc	r19, r1
    19de:	60 91 f9 00 	lds	r22, 0x00F9	; 0x8000f9 <FirstGear>
    19e2:	70 91 fa 00 	lds	r23, 0x00FA	; 0x8000fa <FirstGear+0x1>
    19e6:	82 17       	cp	r24, r18
    19e8:	93 07       	cpc	r25, r19
    19ea:	30 f4       	brcc	.+12     	; 0x19f8 <main+0x5be>
    19ec:	ab 01       	movw	r20, r22
    19ee:	47 5e       	subi	r20, 0xE7	; 231
    19f0:	5f 4f       	sbci	r21, 0xFF	; 255
    19f2:	48 17       	cp	r20, r24
    19f4:	59 07       	cpc	r21, r25
    19f6:	70 f1       	brcs	.+92     	; 0x1a54 <main+0x61a>
    19f8:	40 91 f7 00 	lds	r20, 0x00F7	; 0x8000f7 <SecondGear>
    19fc:	50 91 f8 00 	lds	r21, 0x00F8	; 0x8000f8 <SecondGear+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:668
            {
                return(1);
            }
            
            else if((ThrottlePosition < FirstGear-GearHysteresis) && (ThrottlePosition > SecondGear+GearHysteresis))
    1a00:	69 51       	subi	r22, 0x19	; 25
    1a02:	71 09       	sbc	r23, r1
    1a04:	86 17       	cp	r24, r22
    1a06:	97 07       	cpc	r25, r23
    1a08:	30 f4       	brcc	.+12     	; 0x1a16 <main+0x5dc>
    1a0a:	ba 01       	movw	r22, r20
    1a0c:	67 5e       	subi	r22, 0xE7	; 231
    1a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a10:	68 17       	cp	r22, r24
    1a12:	79 07       	cpc	r23, r25
    1a14:	88 f2       	brcs	.-94     	; 0x19b8 <main+0x57e>
    1a16:	60 91 f5 00 	lds	r22, 0x00F5	; 0x8000f5 <ThirdGear>
    1a1a:	70 91 f6 00 	lds	r23, 0x00F6	; 0x8000f6 <ThirdGear+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:672
            {
                return(2);
            }
            else if((ThrottlePosition < SecondGear-GearHysteresis) && (ThrottlePosition > ThirdGear+GearHysteresis))
    1a1e:	49 51       	subi	r20, 0x19	; 25
    1a20:	51 09       	sbc	r21, r1
    1a22:	84 17       	cp	r24, r20
    1a24:	95 07       	cpc	r25, r21
    1a26:	30 f4       	brcc	.+12     	; 0x1a34 <main+0x5fa>
    1a28:	ab 01       	movw	r20, r22
    1a2a:	47 5e       	subi	r20, 0xE7	; 231
    1a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a2e:	48 17       	cp	r20, r24
    1a30:	59 07       	cpc	r21, r25
    1a32:	90 f0       	brcs	.+36     	; 0x1a58 <main+0x61e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:676
            {
                return(3);
            }
            else if(ThrottlePosition < ThirdGear)
    1a34:	86 17       	cp	r24, r22
    1a36:	97 07       	cpc	r25, r23
    1a38:	88 f0       	brcs	.+34     	; 0x1a5c <main+0x622>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:680
            {
                return(4);
            }
            else if ((ThrottlePosition > NeutralThrot-TimerAdjustment-GearHysteresis) && (ThrottlePosition < ReverseThrot))    // Reverse always second gear
    1a3a:	28 17       	cp	r18, r24
    1a3c:	39 07       	cpc	r19, r25
    1a3e:	08 f0       	brcs	.+2      	; 0x1a42 <main+0x608>
    1a40:	9b ce       	rjmp	.-714    	; 0x1778 <main+0x33e>
    1a42:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <ReverseThrot>
    1a46:	30 91 f4 00 	lds	r19, 0x00F4	; 0x8000f4 <ReverseThrot+0x1>
    1a4a:	82 17       	cp	r24, r18
    1a4c:	93 07       	cpc	r25, r19
    1a4e:	08 f0       	brcs	.+2      	; 0x1a52 <main+0x618>
    1a50:	93 ce       	rjmp	.-730    	; 0x1778 <main+0x33e>
    1a52:	b2 cf       	rjmp	.-156    	; 0x19b8 <main+0x57e>
main():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:632
                }
           
                else if ((ThrottlePosition > NeutralThrot+TimerAdjustment+GearHysteresis) && (ThrottlePosition < FirstGear-GearHysteresis))
                //if ((ThrottlePosition > NeutralThrot+TimerAdjustment) && (ThrottlePosition < FirstGear))
                {
                  return(1); // First gear
    1a54:	c1 e0       	ldi	r28, 0x01	; 1
    1a56:	90 ce       	rjmp	.-736    	; 0x1778 <main+0x33e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:642
                    return(2); // Second gear
                }

                else if((ThrottlePosition > SecondGear+GearHysteresis) && (ThrottlePosition < ThirdGear-GearHysteresis))
                {
                    return(3); // Third gear
    1a58:	c3 e0       	ldi	r28, 0x03	; 3
    1a5a:	8e ce       	rjmp	.-740    	; 0x1778 <main+0x33e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:648
                }
           
                //else if((ThrottlePosition > ThirdGear) && (ThrottlePosition < FourthGear))
                else if(ThrottlePosition > ThirdGear+GearHysteresis)
                {
                    return(4); // Fourth gear
    1a5c:	c4 e0       	ldi	r28, 0x04	; 4
    1a5e:	8c ce       	rjmp	.-744    	; 0x1778 <main+0x33e>
loop():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:736
            myMP3.loop(CurrentSound);
          } 
          PreviousSound=CurrentSound;
      }
      
      else if (Scaled_V>TUG_DIESEL_LOWER && Scaled_V<TUG_DIESEL_UPPER)
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e7       	ldi	r20, 0x70	; 112
    1a66:	50 e4       	ldi	r21, 0x40	; 64
    1a68:	c3 01       	movw	r24, r6
    1a6a:	b2 01       	movw	r22, r4
    1a6c:	ce d1       	rcall	.+924    	; 0x1e0a <__gesf2>
    1a6e:	18 16       	cp	r1, r24
    1a70:	94 f4       	brge	.+36     	; 0x1a96 <main+0x65c>
    1a72:	2a e9       	ldi	r18, 0x9A	; 154
    1a74:	39 e9       	ldi	r19, 0x99	; 153
    1a76:	41 e8       	ldi	r20, 0x81	; 129
    1a78:	50 e4       	ldi	r21, 0x40	; 64
    1a7a:	c3 01       	movw	r24, r6
    1a7c:	b2 01       	movw	r22, r4
    1a7e:	85 d0       	rcall	.+266    	; 0x1b8a <__cmpsf2>
    1a80:	87 ff       	sbrs	r24, 7
    1a82:	09 c0       	rjmp	.+18     	; 0x1a96 <main+0x65c>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:738
      {
          Sounds=TugDiesel;
    1a84:	b0 92 61 00 	sts	0x0061, r11	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1a88:	a0 92 60 00 	sts	0x0060, r10	; 0x800060 <__DATA_REGION_ORIGIN__>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:739
          CurrentSound=SpeedIndex[Sounds][CurrentGear];
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	ee 59       	subi	r30, 0x9E	; 158
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	85 81       	ldd	r24, Z+5	; 0x05
    1a94:	9c ce       	rjmp	.-712    	; 0x17ce <main+0x394>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:748
            myMP3.loop(CurrentSound);
          }
          PreviousSound=CurrentSound;
      }
  
      else if (Scaled_V>STEAM_1_LOWER && Scaled_V<STEAM_1_UPPER)
    1a96:	2d ec       	ldi	r18, 0xCD	; 205
    1a98:	3c ec       	ldi	r19, 0xCC	; 204
    1a9a:	4c e4       	ldi	r20, 0x4C	; 76
    1a9c:	50 e4       	ldi	r21, 0x40	; 64
    1a9e:	c3 01       	movw	r24, r6
    1aa0:	b2 01       	movw	r22, r4
    1aa2:	b3 d1       	rcall	.+870    	; 0x1e0a <__gesf2>
    1aa4:	18 16       	cp	r1, r24
    1aa6:	94 f4       	brge	.+36     	; 0x1acc <main+0x692>
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e6       	ldi	r20, 0x60	; 96
    1aae:	50 e4       	ldi	r21, 0x40	; 64
    1ab0:	c3 01       	movw	r24, r6
    1ab2:	b2 01       	movw	r22, r4
    1ab4:	6a d0       	rcall	.+212    	; 0x1b8a <__cmpsf2>
    1ab6:	87 ff       	sbrs	r24, 7
    1ab8:	09 c0       	rjmp	.+18     	; 0x1acc <main+0x692>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:750
      {
          Sounds=SteamBoat1;
    1aba:	d0 92 61 00 	sts	0x0061, r13	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1abe:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__DATA_REGION_ORIGIN__>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:751
          CurrentSound=SpeedIndex[Sounds][CurrentGear];
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	ee 59       	subi	r30, 0x9E	; 158
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	82 85       	ldd	r24, Z+10	; 0x0a
    1aca:	81 ce       	rjmp	.-766    	; 0x17ce <main+0x394>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:760
              myMP3.loop(CurrentSound);
          }
          PreviousSound=CurrentSound;          
      }
      
      else if (Scaled_V>STEAM_2_LOWER && Scaled_V<STEAM_2_UPPER)
    1acc:	26 e6       	ldi	r18, 0x66	; 102
    1ace:	36 e6       	ldi	r19, 0x66	; 102
    1ad0:	46 e1       	ldi	r20, 0x16	; 22
    1ad2:	50 e4       	ldi	r21, 0x40	; 64
    1ad4:	c3 01       	movw	r24, r6
    1ad6:	b2 01       	movw	r22, r4
    1ad8:	98 d1       	rcall	.+816    	; 0x1e0a <__gesf2>
    1ada:	18 16       	cp	r1, r24
    1adc:	0c f0       	brlt	.+2      	; 0x1ae0 <main+0x6a6>
    1ade:	83 ce       	rjmp	.-762    	; 0x17e6 <main+0x3ac>
    1ae0:	2a e9       	ldi	r18, 0x9A	; 154
    1ae2:	39 e9       	ldi	r19, 0x99	; 153
    1ae4:	49 e2       	ldi	r20, 0x29	; 41
    1ae6:	50 e4       	ldi	r21, 0x40	; 64
    1ae8:	c3 01       	movw	r24, r6
    1aea:	b2 01       	movw	r22, r4
    1aec:	4e d0       	rcall	.+156    	; 0x1b8a <__cmpsf2>
    1aee:	87 ff       	sbrs	r24, 7
    1af0:	7a ce       	rjmp	.-780    	; 0x17e6 <main+0x3ac>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:762
      {
          Sounds=SteamBoat2;
    1af2:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1af6:	e0 92 60 00 	sts	0x0060, r14	; 0x800060 <__DATA_REGION_ORIGIN__>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:763
          CurrentSound=SpeedIndex[Sounds][CurrentGear];
    1afa:	f8 01       	movw	r30, r16
    1afc:	ee 59       	subi	r30, 0x9E	; 158
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	87 85       	ldd	r24, Z+15	; 0x0f
    1b02:	65 ce       	rjmp	.-822    	; 0x17ce <main+0x394>
PlayHorn():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:247
    CurrentAdvert=SpeedIndex[Sounds][CurrentGear];

    if(HornTime >500 && HornTime <2500) // To detect lack of signal or seriously large signal and not toot your trumpet
    {
      
        if((HornGreatOrLessThan==GREATERTHAN && HornTime > HornPulseLimit) || (HornGreatOrLessThan==LESSTHAN && HornTime < HornPulseLimit))
    1b04:	92 32       	cpi	r25, 0x22	; 34
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <main+0x6d0>
    1b08:	96 ce       	rjmp	.-724    	; 0x1836 <main+0x3fc>
    1b0a:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <HornPulseLimit>
    1b0e:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <HornPulseLimit+0x1>
    1b12:	24 17       	cp	r18, r20
    1b14:	35 07       	cpc	r19, r21
    1b16:	08 f0       	brcs	.+2      	; 0x1b1a <main+0x6e0>
    1b18:	8e ce       	rjmp	.-740    	; 0x1836 <main+0x3fc>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:249
        {
          if (CurrentAdvert != PreviousAdvert)
    1b1a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <PreviousAdvert>
    1b1e:	89 17       	cp	r24, r25
    1b20:	d1 f0       	breq	.+52     	; 0x1b56 <main+0x71c>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:251
          {
              myMP3.playAdvertisement(CurrentSound);
    1b22:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <CurrentSound>
playAdvertisement():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:188
    1b26:	90 92 64 01 	sts	0x0164, r9	; 0x800164 <myMP3+0x5>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:189
	sendStack.feedbackValue = dfplayer::NO_FEEDBACK;
    1b2a:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <myMP3+0x6>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:190
	sendStack.paramMSB = (trackNum >> 8) & 0xFF;
    1b2e:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <myMP3+0x7>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:191
	sendStack.paramLSB = trackNum & 0xFF;
    1b32:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <myMP3+0x8>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:193

	findChecksum(sendStack);
    1b36:	6d d3       	rcall	.+1754   	; 0x2212 <__TEXT_REGION_LENGTH__+0x212>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:194
	sendData();
    1b38:	e9 d7       	rcall	.+4050   	; 0x2b0c <__TEXT_REGION_LENGTH__+0xb0c>
PlayHorn():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:252
              AdvertPlaying=1;    // Used to stop advert interruption
    1b3a:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <AdvertPlaying>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:253
              AdTime=millis();
    1b3e:	9c d4       	rcall	.+2360   	; 0x2478 <__TEXT_REGION_LENGTH__+0x478>
    1b40:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <AdTime>
    1b44:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <AdTime+0x1>
    1b48:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <AdTime+0x2>
    1b4c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <AdTime+0x3>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:254
              digitalWrite(LEDPIN,LEDON);   // Now switch the LED on to indicate we have detected a valid input.
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	82 e0       	ldi	r24, 0x02	; 2
    1b54:	67 d6       	rcall	.+3278   	; 0x2824 <__TEXT_REGION_LENGTH__+0x824>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:256
          }
              PreviousAdvert=CurrentAdvert;    
    1b56:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <CurrentAdvert>
    1b5a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <PreviousAdvert>
    1b5e:	6b ce       	rjmp	.-810    	; 0x1836 <main+0x3fc>

00001b60 <_GLOBAL__sub_D_SpeedIndex>:
__base_dtor ():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:390
}

//
// Destructor
//
SoftSerial::~SoftSerial()
    1b60:	8a e8       	ldi	r24, 0x8A	; 138
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <mySerial+0x1>
    1b68:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <mySerial>
end():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:461
  listen();
}

void SoftSerial::end()
{
  if (digitalPinToPCMSK(_receivePin))
    1b6c:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <mySerial+0xc>
    1b70:	26 30       	cpi	r18, 0x06	; 6
    1b72:	50 f4       	brcc	.+20     	; 0x1b88 <_GLOBAL__sub_D_SpeedIndex+0x28>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:462
    *digitalPinToPCMSK(_receivePin) &= ~_BV(digitalPinToPCMSKbit(_receivePin));
    1b74:	35 b3       	in	r19, 0x15	; 21
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <_GLOBAL__sub_D_SpeedIndex+0x1e>
    1b7c:	88 0f       	add	r24, r24
    1b7e:	2a 95       	dec	r18
    1b80:	ea f7       	brpl	.-6      	; 0x1b7c <_GLOBAL__sub_D_SpeedIndex+0x1c>
    1b82:	80 95       	com	r24
    1b84:	83 23       	and	r24, r19
    1b86:	85 bb       	out	0x15, r24	; 21
_GLOBAL__sub_D_SpeedIndex():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:799
      digitalWrite(LEDPIN,LEDOFF);
      delay(offtime);
      numblinks++;
  }    
  
}
    1b88:	08 95       	ret

00001b8a <__cmpsf2>:
__cmpsf2():
    1b8a:	40 d0       	rcall	.+128    	; 0x1c0c <__fp_cmp>
    1b8c:	08 f4       	brcc	.+2      	; 0x1b90 <__cmpsf2+0x6>
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	08 95       	ret

00001b92 <__floatunsisf>:
__floatunsisf():
    1b92:	e8 94       	clt
    1b94:	09 c0       	rjmp	.+18     	; 0x1ba8 <__floatsisf+0x12>

00001b96 <__floatsisf>:
    1b96:	97 fb       	bst	r25, 7
    1b98:	3e f4       	brtc	.+14     	; 0x1ba8 <__floatsisf+0x12>
    1b9a:	90 95       	com	r25
    1b9c:	80 95       	com	r24
    1b9e:	70 95       	com	r23
    1ba0:	61 95       	neg	r22
    1ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba8:	99 23       	and	r25, r25
    1baa:	a9 f0       	breq	.+42     	; 0x1bd6 <__floatsisf+0x40>
    1bac:	f9 2f       	mov	r31, r25
    1bae:	96 e9       	ldi	r25, 0x96	; 150
    1bb0:	bb 27       	eor	r27, r27
    1bb2:	93 95       	inc	r25
    1bb4:	f6 95       	lsr	r31
    1bb6:	87 95       	ror	r24
    1bb8:	77 95       	ror	r23
    1bba:	67 95       	ror	r22
    1bbc:	b7 95       	ror	r27
    1bbe:	f1 11       	cpse	r31, r1
    1bc0:	f8 cf       	rjmp	.-16     	; 0x1bb2 <__floatsisf+0x1c>
    1bc2:	fa f4       	brpl	.+62     	; 0x1c02 <__floatsisf+0x6c>
    1bc4:	bb 0f       	add	r27, r27
    1bc6:	11 f4       	brne	.+4      	; 0x1bcc <__floatsisf+0x36>
    1bc8:	60 ff       	sbrs	r22, 0
    1bca:	1b c0       	rjmp	.+54     	; 0x1c02 <__floatsisf+0x6c>
    1bcc:	6f 5f       	subi	r22, 0xFF	; 255
    1bce:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd4:	16 c0       	rjmp	.+44     	; 0x1c02 <__floatsisf+0x6c>
    1bd6:	88 23       	and	r24, r24
    1bd8:	11 f0       	breq	.+4      	; 0x1bde <__floatsisf+0x48>
    1bda:	96 e9       	ldi	r25, 0x96	; 150
    1bdc:	11 c0       	rjmp	.+34     	; 0x1c00 <__floatsisf+0x6a>
    1bde:	77 23       	and	r23, r23
    1be0:	21 f0       	breq	.+8      	; 0x1bea <__floatsisf+0x54>
    1be2:	9e e8       	ldi	r25, 0x8E	; 142
    1be4:	87 2f       	mov	r24, r23
    1be6:	76 2f       	mov	r23, r22
    1be8:	05 c0       	rjmp	.+10     	; 0x1bf4 <__floatsisf+0x5e>
    1bea:	66 23       	and	r22, r22
    1bec:	71 f0       	breq	.+28     	; 0x1c0a <__floatsisf+0x74>
    1bee:	96 e8       	ldi	r25, 0x86	; 134
    1bf0:	86 2f       	mov	r24, r22
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	2a f0       	brmi	.+10     	; 0x1c02 <__floatsisf+0x6c>
    1bf8:	9a 95       	dec	r25
    1bfa:	66 0f       	add	r22, r22
    1bfc:	77 1f       	adc	r23, r23
    1bfe:	88 1f       	adc	r24, r24
    1c00:	da f7       	brpl	.-10     	; 0x1bf8 <__floatsisf+0x62>
    1c02:	88 0f       	add	r24, r24
    1c04:	96 95       	lsr	r25
    1c06:	87 95       	ror	r24
    1c08:	97 f9       	bld	r25, 7
    1c0a:	08 95       	ret

00001c0c <__fp_cmp>:
__fp_cmp():
    1c0c:	99 0f       	add	r25, r25
    1c0e:	00 08       	sbc	r0, r0
    1c10:	55 0f       	add	r21, r21
    1c12:	aa 0b       	sbc	r26, r26
    1c14:	e0 e8       	ldi	r30, 0x80	; 128
    1c16:	fe ef       	ldi	r31, 0xFE	; 254
    1c18:	16 16       	cp	r1, r22
    1c1a:	17 06       	cpc	r1, r23
    1c1c:	e8 07       	cpc	r30, r24
    1c1e:	f9 07       	cpc	r31, r25
    1c20:	c0 f0       	brcs	.+48     	; 0x1c52 <__fp_cmp+0x46>
    1c22:	12 16       	cp	r1, r18
    1c24:	13 06       	cpc	r1, r19
    1c26:	e4 07       	cpc	r30, r20
    1c28:	f5 07       	cpc	r31, r21
    1c2a:	98 f0       	brcs	.+38     	; 0x1c52 <__fp_cmp+0x46>
    1c2c:	62 1b       	sub	r22, r18
    1c2e:	73 0b       	sbc	r23, r19
    1c30:	84 0b       	sbc	r24, r20
    1c32:	95 0b       	sbc	r25, r21
    1c34:	39 f4       	brne	.+14     	; 0x1c44 <__fp_cmp+0x38>
    1c36:	0a 26       	eor	r0, r26
    1c38:	61 f0       	breq	.+24     	; 0x1c52 <__fp_cmp+0x46>
    1c3a:	23 2b       	or	r18, r19
    1c3c:	24 2b       	or	r18, r20
    1c3e:	25 2b       	or	r18, r21
    1c40:	21 f4       	brne	.+8      	; 0x1c4a <__fp_cmp+0x3e>
    1c42:	08 95       	ret
    1c44:	0a 26       	eor	r0, r26
    1c46:	09 f4       	brne	.+2      	; 0x1c4a <__fp_cmp+0x3e>
    1c48:	a1 40       	sbci	r26, 0x01	; 1
    1c4a:	a6 95       	lsr	r26
    1c4c:	8f ef       	ldi	r24, 0xFF	; 255
    1c4e:	81 1d       	adc	r24, r1
    1c50:	81 1d       	adc	r24, r1
    1c52:	08 95       	ret

00001c54 <__mulsf3>:
__mulsf3():
    1c54:	0a d0       	rcall	.+20     	; 0x1c6a <__mulsf3x>
    1c56:	80 c0       	rjmp	.+256    	; 0x1d58 <__fp_round>
    1c58:	71 d0       	rcall	.+226    	; 0x1d3c <__fp_pscA>
    1c5a:	28 f0       	brcs	.+10     	; 0x1c66 <__mulsf3+0x12>
    1c5c:	76 d0       	rcall	.+236    	; 0x1d4a <__fp_pscB>
    1c5e:	18 f0       	brcs	.+6      	; 0x1c66 <__mulsf3+0x12>
    1c60:	95 23       	and	r25, r21
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <__mulsf3+0x12>
    1c64:	62 c0       	rjmp	.+196    	; 0x1d2a <__fp_inf>
    1c66:	67 c0       	rjmp	.+206    	; 0x1d36 <__fp_nan>
    1c68:	ab c0       	rjmp	.+342    	; 0x1dc0 <__fp_szero>

00001c6a <__mulsf3x>:
__mulsf3x():
    1c6a:	87 d0       	rcall	.+270    	; 0x1d7a <__fp_split3>
    1c6c:	a8 f3       	brcs	.-22     	; 0x1c58 <__mulsf3+0x4>

00001c6e <__mulsf3_pse>:
    1c6e:	99 23       	and	r25, r25
    1c70:	d9 f3       	breq	.-10     	; 0x1c68 <__mulsf3+0x14>
    1c72:	55 23       	and	r21, r21
    1c74:	c9 f3       	breq	.-14     	; 0x1c68 <__mulsf3+0x14>
    1c76:	95 0f       	add	r25, r21
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	55 1f       	adc	r21, r21
    1c7c:	aa 27       	eor	r26, r26
    1c7e:	ee 27       	eor	r30, r30
    1c80:	ff 27       	eor	r31, r31
    1c82:	bb 27       	eor	r27, r27
    1c84:	00 24       	eor	r0, r0
    1c86:	08 94       	sec
    1c88:	67 95       	ror	r22
    1c8a:	20 f4       	brcc	.+8      	; 0x1c94 <__mulsf3_pse+0x26>
    1c8c:	e2 0f       	add	r30, r18
    1c8e:	f3 1f       	adc	r31, r19
    1c90:	b4 1f       	adc	r27, r20
    1c92:	0a 1e       	adc	r0, r26
    1c94:	22 0f       	add	r18, r18
    1c96:	33 1f       	adc	r19, r19
    1c98:	44 1f       	adc	r20, r20
    1c9a:	aa 1f       	adc	r26, r26
    1c9c:	66 95       	lsr	r22
    1c9e:	a9 f7       	brne	.-22     	; 0x1c8a <__mulsf3_pse+0x1c>
    1ca0:	77 95       	ror	r23
    1ca2:	30 f4       	brcc	.+12     	; 0x1cb0 <__mulsf3_pse+0x42>
    1ca4:	f3 0f       	add	r31, r19
    1ca6:	b4 1f       	adc	r27, r20
    1ca8:	0a 1e       	adc	r0, r26
    1caa:	12 1e       	adc	r1, r18
    1cac:	08 f4       	brcc	.+2      	; 0x1cb0 <__mulsf3_pse+0x42>
    1cae:	63 95       	inc	r22
    1cb0:	33 0f       	add	r19, r19
    1cb2:	44 1f       	adc	r20, r20
    1cb4:	aa 1f       	adc	r26, r26
    1cb6:	22 1f       	adc	r18, r18
    1cb8:	76 95       	lsr	r23
    1cba:	99 f7       	brne	.-26     	; 0x1ca2 <__mulsf3_pse+0x34>
    1cbc:	87 95       	ror	r24
    1cbe:	20 f4       	brcc	.+8      	; 0x1cc8 <__mulsf3_pse+0x5a>
    1cc0:	b4 0f       	add	r27, r20
    1cc2:	0a 1e       	adc	r0, r26
    1cc4:	12 1e       	adc	r1, r18
    1cc6:	63 1f       	adc	r22, r19
    1cc8:	44 0f       	add	r20, r20
    1cca:	aa 1f       	adc	r26, r26
    1ccc:	22 1f       	adc	r18, r18
    1cce:	33 1f       	adc	r19, r19
    1cd0:	86 95       	lsr	r24
    1cd2:	a9 f7       	brne	.-22     	; 0x1cbe <__mulsf3_pse+0x50>
    1cd4:	86 2f       	mov	r24, r22
    1cd6:	71 2d       	mov	r23, r1
    1cd8:	60 2d       	mov	r22, r0
    1cda:	11 24       	eor	r1, r1
    1cdc:	9f 57       	subi	r25, 0x7F	; 127
    1cde:	50 40       	sbci	r21, 0x00	; 0
    1ce0:	8a f0       	brmi	.+34     	; 0x1d04 <__mulsf3_pse+0x96>
    1ce2:	e1 f0       	breq	.+56     	; 0x1d1c <__mulsf3_pse+0xae>
    1ce4:	88 23       	and	r24, r24
    1ce6:	4a f0       	brmi	.+18     	; 0x1cfa <__mulsf3_pse+0x8c>
    1ce8:	ee 0f       	add	r30, r30
    1cea:	ff 1f       	adc	r31, r31
    1cec:	bb 1f       	adc	r27, r27
    1cee:	66 1f       	adc	r22, r22
    1cf0:	77 1f       	adc	r23, r23
    1cf2:	88 1f       	adc	r24, r24
    1cf4:	91 50       	subi	r25, 0x01	; 1
    1cf6:	50 40       	sbci	r21, 0x00	; 0
    1cf8:	a9 f7       	brne	.-22     	; 0x1ce4 <__mulsf3_pse+0x76>
    1cfa:	9e 3f       	cpi	r25, 0xFE	; 254
    1cfc:	51 05       	cpc	r21, r1
    1cfe:	70 f0       	brcs	.+28     	; 0x1d1c <__mulsf3_pse+0xae>
    1d00:	14 c0       	rjmp	.+40     	; 0x1d2a <__fp_inf>
    1d02:	5e c0       	rjmp	.+188    	; 0x1dc0 <__fp_szero>
    1d04:	5f 3f       	cpi	r21, 0xFF	; 255
    1d06:	ec f3       	brlt	.-6      	; 0x1d02 <__mulsf3_pse+0x94>
    1d08:	98 3e       	cpi	r25, 0xE8	; 232
    1d0a:	dc f3       	brlt	.-10     	; 0x1d02 <__mulsf3_pse+0x94>
    1d0c:	86 95       	lsr	r24
    1d0e:	77 95       	ror	r23
    1d10:	67 95       	ror	r22
    1d12:	b7 95       	ror	r27
    1d14:	f7 95       	ror	r31
    1d16:	e7 95       	ror	r30
    1d18:	9f 5f       	subi	r25, 0xFF	; 255
    1d1a:	c1 f7       	brne	.-16     	; 0x1d0c <__mulsf3_pse+0x9e>
    1d1c:	fe 2b       	or	r31, r30
    1d1e:	88 0f       	add	r24, r24
    1d20:	91 1d       	adc	r25, r1
    1d22:	96 95       	lsr	r25
    1d24:	87 95       	ror	r24
    1d26:	97 f9       	bld	r25, 7
    1d28:	08 95       	ret

00001d2a <__fp_inf>:
    1d2a:	97 f9       	bld	r25, 7
    1d2c:	9f 67       	ori	r25, 0x7F	; 127
    1d2e:	80 e8       	ldi	r24, 0x80	; 128
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	08 95       	ret

00001d36 <__fp_nan>:
    1d36:	9f ef       	ldi	r25, 0xFF	; 255
    1d38:	80 ec       	ldi	r24, 0xC0	; 192
    1d3a:	08 95       	ret

00001d3c <__fp_pscA>:
__fp_pscA():
    1d3c:	00 24       	eor	r0, r0
    1d3e:	0a 94       	dec	r0
    1d40:	16 16       	cp	r1, r22
    1d42:	17 06       	cpc	r1, r23
    1d44:	18 06       	cpc	r1, r24
    1d46:	09 06       	cpc	r0, r25
    1d48:	08 95       	ret

00001d4a <__fp_pscB>:
__fp_pscB():
    1d4a:	00 24       	eor	r0, r0
    1d4c:	0a 94       	dec	r0
    1d4e:	12 16       	cp	r1, r18
    1d50:	13 06       	cpc	r1, r19
    1d52:	14 06       	cpc	r1, r20
    1d54:	05 06       	cpc	r0, r21
    1d56:	08 95       	ret

00001d58 <__fp_round>:
__fp_round():
    1d58:	09 2e       	mov	r0, r25
    1d5a:	03 94       	inc	r0
    1d5c:	00 0c       	add	r0, r0
    1d5e:	11 f4       	brne	.+4      	; 0x1d64 <__fp_round+0xc>
    1d60:	88 23       	and	r24, r24
    1d62:	52 f0       	brmi	.+20     	; 0x1d78 <__fp_round+0x20>
    1d64:	bb 0f       	add	r27, r27
    1d66:	40 f4       	brcc	.+16     	; 0x1d78 <__fp_round+0x20>
    1d68:	bf 2b       	or	r27, r31
    1d6a:	11 f4       	brne	.+4      	; 0x1d70 <__fp_round+0x18>
    1d6c:	60 ff       	sbrs	r22, 0
    1d6e:	04 c0       	rjmp	.+8      	; 0x1d78 <__fp_round+0x20>
    1d70:	6f 5f       	subi	r22, 0xFF	; 255
    1d72:	7f 4f       	sbci	r23, 0xFF	; 255
    1d74:	8f 4f       	sbci	r24, 0xFF	; 255
    1d76:	9f 4f       	sbci	r25, 0xFF	; 255
    1d78:	08 95       	ret

00001d7a <__fp_split3>:
__fp_split3():
    1d7a:	57 fd       	sbrc	r21, 7
    1d7c:	90 58       	subi	r25, 0x80	; 128
    1d7e:	44 0f       	add	r20, r20
    1d80:	55 1f       	adc	r21, r21
    1d82:	59 f0       	breq	.+22     	; 0x1d9a <__fp_splitA+0x10>
    1d84:	5f 3f       	cpi	r21, 0xFF	; 255
    1d86:	71 f0       	breq	.+28     	; 0x1da4 <__fp_splitA+0x1a>
    1d88:	47 95       	ror	r20

00001d8a <__fp_splitA>:
    1d8a:	88 0f       	add	r24, r24
    1d8c:	97 fb       	bst	r25, 7
    1d8e:	99 1f       	adc	r25, r25
    1d90:	61 f0       	breq	.+24     	; 0x1daa <__fp_splitA+0x20>
    1d92:	9f 3f       	cpi	r25, 0xFF	; 255
    1d94:	79 f0       	breq	.+30     	; 0x1db4 <__fp_splitA+0x2a>
    1d96:	87 95       	ror	r24
    1d98:	08 95       	ret
    1d9a:	12 16       	cp	r1, r18
    1d9c:	13 06       	cpc	r1, r19
    1d9e:	14 06       	cpc	r1, r20
    1da0:	55 1f       	adc	r21, r21
    1da2:	f2 cf       	rjmp	.-28     	; 0x1d88 <__fp_split3+0xe>
    1da4:	46 95       	lsr	r20
    1da6:	f1 df       	rcall	.-30     	; 0x1d8a <__fp_splitA>
    1da8:	08 c0       	rjmp	.+16     	; 0x1dba <__fp_splitA+0x30>
    1daa:	16 16       	cp	r1, r22
    1dac:	17 06       	cpc	r1, r23
    1dae:	18 06       	cpc	r1, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	f1 cf       	rjmp	.-30     	; 0x1d96 <__fp_splitA+0xc>
    1db4:	86 95       	lsr	r24
    1db6:	71 05       	cpc	r23, r1
    1db8:	61 05       	cpc	r22, r1
    1dba:	08 94       	sec
    1dbc:	08 95       	ret

00001dbe <__fp_zero>:
__fp_zero():
    1dbe:	e8 94       	clt

00001dc0 <__fp_szero>:
    1dc0:	bb 27       	eor	r27, r27
    1dc2:	66 27       	eor	r22, r22
    1dc4:	77 27       	eor	r23, r23
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	97 f9       	bld	r25, 7
    1dca:	08 95       	ret

00001dcc <eeprom_read_byte>:
eeprom_read_byte():
    1dcc:	e1 99       	sbic	0x1c, 1	; 28
    1dce:	fe cf       	rjmp	.-4      	; 0x1dcc <eeprom_read_byte>
    1dd0:	9f bb       	out	0x1f, r25	; 31
    1dd2:	8e bb       	out	0x1e, r24	; 30
    1dd4:	e0 9a       	sbi	0x1c, 0	; 28
    1dd6:	99 27       	eor	r25, r25
    1dd8:	8d b3       	in	r24, 0x1d	; 29
    1dda:	08 95       	ret

00001ddc <eeprom_write_byte>:
eeprom_write_byte():
    1ddc:	26 2f       	mov	r18, r22

00001dde <eeprom_write_r18>:
    1dde:	e1 99       	sbic	0x1c, 1	; 28
    1de0:	fe cf       	rjmp	.-4      	; 0x1dde <eeprom_write_r18>
    1de2:	1c ba       	out	0x1c, r1	; 28
    1de4:	9f bb       	out	0x1f, r25	; 31
    1de6:	8e bb       	out	0x1e, r24	; 30
    1de8:	2d bb       	out	0x1d, r18	; 29
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	e2 9a       	sbi	0x1c, 2	; 28
    1df0:	e1 9a       	sbi	0x1c, 1	; 28
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	01 96       	adiw	r24, 0x01	; 1
    1df6:	08 95       	ret

00001df8 <__mulqi3>:
__mulqi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:224
    1df8:	00 24       	eor	r0, r0

00001dfa <__mulqi3_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:226
    1dfa:	80 fd       	sbrc	r24, 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:227
    1dfc:	06 0e       	add	r0, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:228
    1dfe:	66 0f       	add	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:229
    1e00:	11 f0       	breq	.+4      	; 0x1e06 <__mulqi3_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:230
    1e02:	86 95       	lsr	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:231
    1e04:	d1 f7       	brne	.-12     	; 0x1dfa <__mulqi3_loop>

00001e06 <__mulqi3_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:233
    1e06:	80 2d       	mov	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:234
    1e08:	08 95       	ret

00001e0a <__gesf2>:
__gesf2():
    1e0a:	00 df       	rcall	.-512    	; 0x1c0c <__fp_cmp>
    1e0c:	08 f4       	brcc	.+2      	; 0x1e10 <__gesf2+0x6>
    1e0e:	8f ef       	ldi	r24, 0xFF	; 255
    1e10:	08 95       	ret

00001e12 <__mulhi3>:
__mulhi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:312
    1e12:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:313
    1e14:	55 27       	eor	r21, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:314
    1e16:	04 c0       	rjmp	.+8      	; 0x1e20 <__mulhi3+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:317
    1e18:	08 0e       	add	r0, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:318
    1e1a:	59 1f       	adc	r21, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:320
    1e1c:	88 0f       	add	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:321
    1e1e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:324
    1e20:	00 97       	sbiw	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:325
    1e22:	29 f0       	breq	.+10     	; 0x1e2e <__mulhi3+0x1c>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:328
    1e24:	76 95       	lsr	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:329
    1e26:	67 95       	ror	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:331
    1e28:	b8 f3       	brcs	.-18     	; 0x1e18 <__mulhi3+0x6>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:335
    1e2a:	71 05       	cpc	r23, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:337
    1e2c:	b9 f7       	brne	.-18     	; 0x1e1c <__mulhi3+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:340
    1e2e:	80 2d       	mov	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:341
    1e30:	95 2f       	mov	r25, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:342
    1e32:	08 95       	ret

00001e34 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    1e34:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    1e36:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    1e38:	16 f4       	brtc	.+4      	; 0x1e3e <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    1e3a:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    1e3c:	06 d0       	rcall	.+12     	; 0x1e4a <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    1e3e:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    1e40:	08 d0       	rcall	.+16     	; 0x1e52 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    1e42:	2d d0       	rcall	.+90     	; 0x1e9e <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    1e44:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    1e46:	05 d0       	rcall	.+10     	; 0x1e52 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    1e48:	3e f4       	brtc	.+14     	; 0x1e58 <__divmodhi4_exit>

00001e4a <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    1e4a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    1e4c:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    1e4e:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    1e50:	08 95       	ret

00001e52 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    1e52:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    1e54:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    1e56:	7f 4f       	sbci	r23, 0xFF	; 255

00001e58 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    1e58:	08 95       	ret

00001e5a <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1e5a:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1e5c:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1e5e:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1e60:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1e62:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1e64:	0d c0       	rjmp	.+26     	; 0x1e80 <__udivmodsi4_ep>

00001e66 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1e66:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1e68:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1e6a:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1e6c:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1e6e:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1e70:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1e72:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1e74:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1e76:	20 f0       	brcs	.+8      	; 0x1e80 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1e78:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1e7a:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1e7c:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1e7e:	f5 0b       	sbc	r31, r21

00001e80 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1e80:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1e82:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1e84:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1e86:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1e88:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1e8a:	69 f7       	brne	.-38     	; 0x1e66 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1e8c:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1e8e:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1e90:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1e92:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1e94:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1e96:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1e98:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1e9a:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1e9c:	08 95       	ret

00001e9e <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    1e9e:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    1ea0:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    1ea2:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    1ea4:	07 c0       	rjmp	.+14     	; 0x1eb4 <__udivmodhi4_ep>

00001ea6 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    1ea6:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    1ea8:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    1eaa:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    1eac:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    1eae:	10 f0       	brcs	.+4      	; 0x1eb4 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    1eb0:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    1eb2:	b7 0b       	sbc	r27, r23

00001eb4 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    1eb4:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    1eb6:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    1eb8:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    1eba:	a9 f7       	brne	.-22     	; 0x1ea6 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    1ebc:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    1ebe:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    1ec0:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    1ec2:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    1ec4:	08 95       	ret

00001ec6 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1ec6:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1ec8:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1eca:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1ecc:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1ece:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1ed0:	09 94       	ijmp

00001ed2 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    1ed2:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    1ed4:	c2 ee       	ldi	r28, 0xE2	; 226
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    1ed6:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    1ed8:	03 c0       	rjmp	.+6      	; 0x1ee0 <__do_global_dtors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    1eda:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    1edc:	f4 df       	rcall	.-24     	; 0x1ec6 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    1ede:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    1ee0:	c3 3e       	cpi	r28, 0xE3	; 227
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    1ee2:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    1ee4:	d1 f7       	brne	.-12     	; 0x1eda <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1ee6:	f8 94       	cli

00001ee8 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1ee8:	ff cf       	rjmp	.-2      	; 0x1ee8 <__stop_program>
