
C:\temp\arduino_build_75883/RCSounds_V1.2_test.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	e9 c0       	rjmp	.+466    	; 0x1d4 <__dtors_end>
       2:	0d c1       	rjmp	.+538    	; 0x21e <__bad_interrupt>
       4:	db c8       	rjmp	.-3658   	; 0xfffff1bc <__eeprom_end+0xff7ef1bc>
       6:	0b c1       	rjmp	.+534    	; 0x21e <__bad_interrupt>
       8:	0a c1       	rjmp	.+532    	; 0x21e <__bad_interrupt>
       a:	8e c8       	rjmp	.-3812   	; 0xfffff128 <__eeprom_end+0xff7ef128>
       c:	08 c1       	rjmp	.+528    	; 0x21e <__bad_interrupt>
       e:	3c c8       	rjmp	.-3976   	; 0xfffff088 <__eeprom_end+0xff7ef088>
      10:	06 c1       	rjmp	.+524    	; 0x21e <__bad_interrupt>
      12:	05 c1       	rjmp	.+522    	; 0x21e <__bad_interrupt>
      14:	04 c1       	rjmp	.+520    	; 0x21e <__bad_interrupt>
      16:	03 c1       	rjmp	.+518    	; 0x21e <__bad_interrupt>
      18:	02 c1       	rjmp	.+516    	; 0x21e <__bad_interrupt>
      1a:	01 c1       	rjmp	.+514    	; 0x21e <__bad_interrupt>
      1c:	00 c1       	rjmp	.+512    	; 0x21e <__bad_interrupt>

0000001e <__trampolines_end>:
__trampolines_start():
      1e:	00 00       	nop
      20:	00 00       	nop
      22:	37 00       	.word	0x0037	; ????

00000024 <digital_pin_to_timer_PGM>:
      24:	01 03 00 00 04 00                                   ......

0000002a <table>:
      2a:	00 c2 01 00 00 00 0e 00 0e 00 0c 00 00 e1 00 00     ................
      3a:	05 00 22 00 22 00 20 00 00 96 00 00 0f 00 36 00     ..".". .......6.
      4a:	36 00 34 00 12 7a 00 00 17 00 43 00 43 00 41 00     6.4..z....C.C.A.
      5a:	80 70 00 00 1a 00 4a 00 4a 00 48 00 00 4b 00 00     .p....J.J.H..K..
      6a:	2c 00 71 00 71 00 70 00 40 38 00 00 4a 00 9c 00     ,.q.q.p.@8..J...
      7a:	99 00 99 00 80 25 00 00 72 00 ea 00 ea 00 e9 00     .....%..r.......
      8a:	c0 12 00 00 e9 00 da 01 da 01 d7 01 60 09 00 00     ............`...
      9a:	d7 01 ac 03 ac 03 b1 03 b0 04 00 00 b3 03 6e 07     ..............n.
      aa:	6e 07 67 07 2c 01 00 00 dc 0e c1 1d c1 1d be 1d     n.g.,...........

000000ba <_ZZ5setupE3__c__15_>:
      ba:	4e 6f 20 50 57 4d 20 66 6f 75 6e 64 00              No PWM found.

000000c7 <_ZZ5setupE3__c__14_>:
      c7:	43 75 72 72 65 6e 74 20 74 68 72 6f 74 74 6c 65     Current throttle
      d7:	20 00                                                .

000000d9 <_ZZ5setupE3__c__13_>:
      d9:	54 68 72 6f 74 74 6c 65 20 4f 4b 20 00              Throttle OK .

000000e6 <_ZZ5setupE3__c__12_>:
      e6:	43 75 72 72 65 6e 74 20 68 6f 72 6e 20 00           Current horn .

000000f4 <_ZZ5setupE3__c__11_>:
      f4:	48 6f 72 6e 20 4f 4b 20 00                          Horn OK .

000000fd <_ZZ5setupE3__c__10_>:
      fd:	50 57 4d 20 64 65 74 65 63 74 65 64 3a 00           PWM detected:.

0000010b <setup::__c>:
     10b:	20 3c 20 74 6f 20 6f 70 65 72 61 74 65 00            < to operate.

00000119 <setup::__c>:
     119:	20 3e 20 74 6f 20 6f 70 65 72 61 74 65 2e 00         > to operate..

00000128 <setup::__c>:
     128:	2c 20 6d 75 73 74 20 62 65 20 00                    , must be .

00000133 <setup::__c>:
     133:	48 6f 72 6e 20 6c 69 6d 69 74 20 00                 Horn limit .

0000013f <setup::__c>:
     13f:	72 65 76 65 72 73 65 64 2e 00                       reversed..

00000149 <setup::__c>:
     149:	6e 6f 72 6d 61 6c 2e 00                             normal..

00000151 <setup::__c>:
     151:	54 68 72 6f 74 74 6c 65 20 69 73 20 00              Throttle is .

0000015e <setup::__c>:
     15e:	52 65 76 65 72 73 65 20 54 68 72 6f 74 74 6c 65     Reverse Throttle
     16e:	20 6c 69 6d 69 74 20 00                              limit .

00000176 <setup::__c>:
     176:	4e 65 75 74 72 61 6c 20 00                          Neutral .

0000017f <setup::__c>:
     17f:	46 6f 72 77 61 72 64 20 54 68 72 6f 74 74 6c 65     Forward Throttle
     18f:	20 6c 69 6d 69 74 20 00                              limit .

00000197 <setup::__c>:
     197:	0a 45 45 50 52 4f 4d 20 53 65 74 74 69 6e 67 73     .EEPROM Settings
     1a7:	3a 00                                               :.

000001a9 <PlayHorn()::__c>:
     1a9:	4d 69 6c 6c 69 73 20 73 74 61 72 74 3a 20 00        Millis start: .

000001b8 <port_to_output_PGM>:
     1b8:	00 00 00 00 38 00                                   ....8.

000001be <port_to_input_PGM>:
     1be:	00 00 00 00 36 00                                   ....6.

000001c4 <digital_pin_to_port_PGM>:
     1c4:	02 02 02 02 02 02                                   ......

000001ca <digital_pin_to_bit_mask_PGM>:
     1ca:	01 02 04 08 10 20                                   ..... 

000001d0 <__ctors_start>:
__ctors_start():
     1d0:	68 09       	sbc	r22, r8

000001d2 <__ctors_end>:
__dtors_start():
     1d2:	9b 0d       	add	r25, r11

000001d4 <__dtors_end>:
__dtors_end():
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf e5       	ldi	r28, 0x5F	; 95
     1da:	d2 e0       	ldi	r29, 0x02	; 2
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61

000001e0 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     1e0:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     1e2:	a0 eb       	ldi	r26, 0xB0	; 176
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     1e4:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     1e6:	01 c0       	rjmp	.+2      	; 0x1ea <.do_clear_bss_start>

000001e8 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     1e8:	1d 92       	st	X+, r1

000001ea <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     1ea:	a6 3a       	cpi	r26, 0xA6	; 166
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     1ec:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     1ee:	e1 f7       	brne	.-8      	; 0x1e8 <.do_clear_bss_loop>

000001f0 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     1f0:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     1f2:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     1f6:	e0 ec       	ldi	r30, 0xC0	; 192
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     1f8:	fe e1       	ldi	r31, 0x1E	; 30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     1fc:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     1fe:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     200:	a0 3b       	cpi	r26, 0xB0	; 176
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     202:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     204:	d9 f7       	brne	.-10     	; 0x1fc <__do_copy_data+0xc>

00000206 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     206:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     208:	c9 ee       	ldi	r28, 0xE9	; 233
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     20a:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     20c:	03 c0       	rjmp	.+6      	; 0x214 <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     20e:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     210:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     212:	44 de       	rcall	.-888    	; 0xfffffe9c <__eeprom_end+0xff7efe9c>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     214:	c8 3e       	cpi	r28, 0xE8	; 232
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     216:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     218:	d1 f7       	brne	.-12     	; 0x20e <__do_global_ctors+0x8>
     21a:	16 d9       	rcall	.-3540   	; 0xfffff448 <__eeprom_end+0xff7ef448>
     21c:	45 ce       	rjmp	.-886    	; 0xfffffea8 <__eeprom_end+0xff7efea8>

0000021e <__bad_interrupt>:
__vector_1():
     21e:	f0 ce       	rjmp	.-544    	; 0x0 <__vectors>

00000220 <DFPlayerMini_Fast::findChecksum(DFPlayerMini_Fast::stack&) [clone .constprop.17]>:
findChecksum():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:910
			   to calculate the checksum over.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::findChecksum(stack& _stack)
{
	int16_t checksum = 0 - (_stack.version + _stack.length + _stack.commandValue + _stack.feedbackValue + _stack.paramMSB + _stack.paramLSB);
     220:	e0 e6       	ldi	r30, 0x60	; 96
     222:	f1 e0       	ldi	r31, 0x01	; 1
     224:	83 81       	ldd	r24, Z+3	; 0x03
     226:	94 81       	ldd	r25, Z+4	; 0x04
     228:	89 0f       	add	r24, r25
     22a:	99 27       	eor	r25, r25
     22c:	99 1f       	adc	r25, r25
     22e:	25 81       	ldd	r18, Z+5	; 0x05
     230:	82 0f       	add	r24, r18
     232:	91 1d       	adc	r25, r1
     234:	26 81       	ldd	r18, Z+6	; 0x06
     236:	28 0f       	add	r18, r24
     238:	39 2f       	mov	r19, r25
     23a:	31 1d       	adc	r19, r1
     23c:	87 81       	ldd	r24, Z+7	; 0x07
     23e:	28 0f       	add	r18, r24
     240:	31 1d       	adc	r19, r1
     242:	80 85       	ldd	r24, Z+8	; 0x08
     244:	82 0f       	add	r24, r18
     246:	93 2f       	mov	r25, r19
     248:	91 1d       	adc	r25, r1
     24a:	91 95       	neg	r25
     24c:	81 95       	neg	r24
     24e:	91 09       	sbc	r25, r1
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:912

	_stack.checksumMSB = checksum >> 8;
     250:	91 87       	std	Z+9, r25	; 0x09
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:913
	_stack.checksumLSB = checksum & 0x00FF;
     252:	82 87       	std	Z+10, r24	; 0x0a
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:914
}
     254:	08 95       	ret

00000256 <TinySoftwareSerial::flush()>:
flush():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:242
}

void TinySoftwareSerial::flush()
{

}
     256:	08 95       	ret

00000258 <TinySoftwareSerial::write(unsigned char)>:
write():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:202
  }
}

size_t TinySoftwareSerial::write(uint8_t ch)
{
  uint8_t oldSREG = SREG;
     258:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:203
  cli(); //Prevent interrupts from breaking the transmission. Note: TinySoftwareSerial is half duplex.
     25a:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:234
      [uartMask] "r" (_txmask),
      [uartUnmask] "r" (_txunmask)
    : "r23",
      "r24",
      "r25"
  );
     25c:	fc 01       	movw	r30, r24
     25e:	45 85       	ldd	r20, Z+13	; 0x0d
     260:	56 85       	ldd	r21, Z+14	; 0x0e
     262:	3a e0       	ldi	r19, 0x0A	; 10
     264:	60 95       	com	r22
     266:	08 94       	sec
     268:	20 f4       	brcc	.+8      	; 0x272 <__stack+0x13>
     26a:	78 b3       	in	r23, 0x18	; 24
     26c:	75 23       	and	r23, r21
     26e:	78 bb       	out	0x18, r23	; 24
     270:	04 c0       	rjmp	.+8      	; 0x27a <__stack+0x1b>
     272:	78 b3       	in	r23, 0x18	; 24
     274:	74 2b       	or	r23, r20
     276:	78 bb       	out	0x18, r23	; 24
     278:	00 00       	nop
     27a:	50 d7       	rcall	.+3744   	; 0x111c <uartDelay>
     27c:	4f d7       	rcall	.+3742   	; 0x111c <uartDelay>
     27e:	4e d7       	rcall	.+3740   	; 0x111c <uartDelay>
     280:	4d d7       	rcall	.+3738   	; 0x111c <uartDelay>
     282:	66 95       	lsr	r22
     284:	3a 95       	dec	r19
     286:	81 f7       	brne	.-32     	; 0x268 <__stack+0x9>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:235
  SREG = oldSREG;
     288:	2f bf       	out	0x3f, r18	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:237
  return 1;
}
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	08 95       	ret

00000290 <TinySoftwareSerial::read()>:
read():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:191
}

int TinySoftwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     290:	dc 01       	movw	r26, r24
     292:	1f 96       	adiw	r26, 0x0f	; 15
     294:	ed 91       	ld	r30, X+
     296:	fc 91       	ld	r31, X
     298:	20 a1       	ldd	r18, Z+32	; 0x20
     29a:	31 a1       	ldd	r19, Z+33	; 0x21
     29c:	82 a1       	ldd	r24, Z+34	; 0x22
     29e:	93 a1       	ldd	r25, Z+35	; 0x23
     2a0:	28 17       	cp	r18, r24
     2a2:	39 07       	cpc	r19, r25
     2a4:	79 f0       	breq	.+30     	; 0x2c4 <TinySoftwareSerial::read()+0x34>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:194
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     2a6:	a2 a1       	ldd	r26, Z+34	; 0x22
     2a8:	b3 a1       	ldd	r27, Z+35	; 0x23
     2aa:	ae 0f       	add	r26, r30
     2ac:	bf 1f       	adc	r27, r31
     2ae:	8c 91       	ld	r24, X
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:195
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     2b0:	22 a1       	ldd	r18, Z+34	; 0x22
     2b2:	33 a1       	ldd	r19, Z+35	; 0x23
     2b4:	2f 5f       	subi	r18, 0xFF	; 255
     2b6:	3f 4f       	sbci	r19, 0xFF	; 255
     2b8:	2f 71       	andi	r18, 0x1F	; 31
     2ba:	33 27       	eor	r19, r19
     2bc:	33 a3       	std	Z+35, r19	; 0x23
     2be:	22 a3       	std	Z+34, r18	; 0x22
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:196
    return c;
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	08 95       	ret
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:192

int TinySoftwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     2c4:	8f ef       	ldi	r24, 0xFF	; 255
     2c6:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:198
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
     2c8:	08 95       	ret

000002ca <TinySoftwareSerial::peek()>:
peek():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:181
  }
}

int TinySoftwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     2ca:	dc 01       	movw	r26, r24
     2cc:	1f 96       	adiw	r26, 0x0f	; 15
     2ce:	ed 91       	ld	r30, X+
     2d0:	fc 91       	ld	r31, X
     2d2:	20 a1       	ldd	r18, Z+32	; 0x20
     2d4:	31 a1       	ldd	r19, Z+33	; 0x21
     2d6:	82 a1       	ldd	r24, Z+34	; 0x22
     2d8:	93 a1       	ldd	r25, Z+35	; 0x23
     2da:	28 17       	cp	r18, r24
     2dc:	39 07       	cpc	r19, r25
     2de:	39 f0       	breq	.+14     	; 0x2ee <TinySoftwareSerial::peek()+0x24>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:184
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     2e0:	82 a1       	ldd	r24, Z+34	; 0x22
     2e2:	93 a1       	ldd	r25, Z+35	; 0x23
     2e4:	e8 0f       	add	r30, r24
     2e6:	f9 1f       	adc	r31, r25
     2e8:	80 81       	ld	r24, Z
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	08 95       	ret
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:182
}

int TinySoftwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     2ee:	8f ef       	ldi	r24, 0xFF	; 255
     2f0:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:186
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     2f2:	08 95       	ret

000002f4 <TinySoftwareSerial::available()>:
available():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:162
  _rx_buffer->head = _rx_buffer->tail;
}

int TinySoftwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     2f4:	dc 01       	movw	r26, r24
     2f6:	1f 96       	adiw	r26, 0x0f	; 15
     2f8:	ed 91       	ld	r30, X+
     2fa:	fc 91       	ld	r31, X
     2fc:	80 a1       	ldd	r24, Z+32	; 0x20
     2fe:	91 a1       	ldd	r25, Z+33	; 0x21
     300:	22 a1       	ldd	r18, Z+34	; 0x22
     302:	33 a1       	ldd	r19, Z+35	; 0x23
     304:	82 1b       	sub	r24, r18
     306:	93 0b       	sbc	r25, r19
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:163
}
     308:	8f 71       	andi	r24, 0x1F	; 31
     30a:	99 27       	eor	r25, r25
     30c:	08 95       	ret

0000030e <Print::print(char)>:
print():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:58
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     30e:	dc 01       	movw	r26, r24
     310:	ed 91       	ld	r30, X+
     312:	fc 91       	ld	r31, X
     314:	01 90       	ld	r0, Z+
     316:	f0 81       	ld	r31, Z
     318:	e0 2d       	mov	r30, r0
     31a:	09 94       	ijmp

0000031c <Print::println()>:
println():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:120
  }
  return( n );
}

size_t Print::println(void)
{
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	ec 01       	movw	r28, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:121
  size_t n = print('\r');
     326:	6d e0       	ldi	r22, 0x0D	; 13
     328:	f2 df       	rcall	.-28     	; 0x30e <Print::print(char)>
     32a:	8c 01       	movw	r16, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:122
  n += print('\n');
     32c:	6a e0       	ldi	r22, 0x0A	; 10
     32e:	ce 01       	movw	r24, r28
     330:	ee df       	rcall	.-36     	; 0x30e <Print::print(char)>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:124
  return n;
}
     332:	80 0f       	add	r24, r16
     334:	91 1f       	adc	r25, r17
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	1f 91       	pop	r17
     33c:	0f 91       	pop	r16
     33e:	08 95       	ret

00000340 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:34

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     340:	cf 92       	push	r12
     342:	df 92       	push	r13
     344:	ef 92       	push	r14
     346:	ff 92       	push	r15
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	6c 01       	movw	r12, r24
     352:	eb 01       	movw	r28, r22
     354:	7b 01       	movw	r14, r22
     356:	e4 0e       	add	r14, r20
     358:	f5 1e       	adc	r15, r21
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:35
  size_t n = 0;
     35a:	10 e0       	ldi	r17, 0x00	; 0
     35c:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:36
  while (size--) {
     35e:	ce 15       	cp	r28, r14
     360:	df 05       	cpc	r29, r15
     362:	61 f0       	breq	.+24     	; 0x37c <Print::write(unsigned char const*, unsigned int)+0x3c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:37
    n += write(*buffer++);
     364:	69 91       	ld	r22, Y+
     366:	d6 01       	movw	r26, r12
     368:	ed 91       	ld	r30, X+
     36a:	fc 91       	ld	r31, X
     36c:	01 90       	ld	r0, Z+
     36e:	f0 81       	ld	r31, Z
     370:	e0 2d       	mov	r30, r0
     372:	c6 01       	movw	r24, r12
     374:	09 95       	icall
     376:	08 0f       	add	r16, r24
     378:	19 1f       	adc	r17, r25
     37a:	f1 cf       	rjmp	.-30     	; 0x35e <Print::write(unsigned char const*, unsigned int)+0x1e>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:40
  }
  return n;
}
     37c:	c8 01       	movw	r24, r16
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	ff 90       	pop	r15
     388:	ef 90       	pop	r14
     38a:	df 90       	pop	r13
     38c:	cf 90       	pop	r12
     38e:	08 95       	ret

00000390 <micros>:
micros():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:360
    unsigned int r; // needed for some frequencies, optimized away otherwise
    unsigned char f; // temporary storage for millis fraction counter
    unsigned char q = 0; // record whether an overflow is flagged
#endif
    unsigned long m;
    uint8_t t, oldSREG = SREG;
     390:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:362

    cli();
     392:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:367
#ifdef CORRECT_EXACT_MICROS
    m = millis_timer_millis;
    f = millis_timer_fract;
#else
    m = millis_timer_overflow_count;
     394:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <millis_timer_overflow_count>
     398:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <millis_timer_overflow_count+0x1>
     39c:	a0 91 f7 00 	lds	r26, 0x00F7	; 0x8000f7 <millis_timer_overflow_count+0x2>
     3a0:	b0 91 f8 00 	lds	r27, 0x00F8	; 0x8000f8 <millis_timer_overflow_count+0x3>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:370
#endif
  #if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
    t = TCNT0;
     3a4:	22 b7       	in	r18, 0x32	; 50
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:389
      m++;
    #else
      q = 1;
    #endif
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR & _BV(TOV0)) && (t < 255))
     3a6:	08 b6       	in	r0, 0x38	; 56
     3a8:	01 fe       	sbrs	r0, 1
     3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <micros+0x26>
     3ac:	2f 3f       	cpi	r18, 0xFF	; 255
     3ae:	19 f0       	breq	.+6      	; 0x3b6 <micros+0x26>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:391
    #ifndef CORRECT_EXACT_MICROS
      m++;
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	a1 1d       	adc	r26, r1
     3b4:	b1 1d       	adc	r27, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:411
    #else
      q = 1;
    #endif
  #endif

    SREG = oldSREG;
     3b6:	3f bf       	out	0x3f, r19	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:453
  #else
  #if F_CPU < 1000000L
    return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
  #else
    #if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 && (F_CPU % 1000000 == 0 )) // Can we just do it the naive way? If so great!
      return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
     3b8:	ba 2f       	mov	r27, r26
     3ba:	a9 2f       	mov	r26, r25
     3bc:	98 2f       	mov	r25, r24
     3be:	88 27       	eor	r24, r24
     3c0:	bc 01       	movw	r22, r24
     3c2:	cd 01       	movw	r24, r26
     3c4:	62 0f       	add	r22, r18
     3c6:	71 1d       	adc	r23, r1
     3c8:	81 1d       	adc	r24, r1
     3ca:	91 1d       	adc	r25, r1
     3cc:	42 e0       	ldi	r20, 0x02	; 2
     3ce:	66 0f       	add	r22, r22
     3d0:	77 1f       	adc	r23, r23
     3d2:	88 1f       	adc	r24, r24
     3d4:	99 1f       	adc	r25, r25
     3d6:	4a 95       	dec	r20
     3d8:	d1 f7       	brne	.-12     	; 0x3ce <micros+0x3e>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:508
      //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
      return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
    #endif
  #endif
  #endif // !CORRECT_EXACT_MICROS
  }
     3da:	08 95       	ret

000003dc <delay>:
delay():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:516
    // Empty
  }
  void yield(void) __attribute__ ((weak, alias("__empty")));

  void delay(unsigned long ms)
  {
     3dc:	cf 92       	push	r12
     3de:	df 92       	push	r13
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	6b 01       	movw	r12, r22
     3ea:	7c 01       	movw	r14, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:518
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();
     3ec:	d1 df       	rcall	.-94     	; 0x390 <micros>
     3ee:	eb 01       	movw	r28, r22
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:520

    while (ms > 0) {
     3f0:	c1 14       	cp	r12, r1
     3f2:	d1 04       	cpc	r13, r1
     3f4:	e1 04       	cpc	r14, r1
     3f6:	f1 04       	cpc	r15, r1
     3f8:	41 f4       	brne	.+16     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3fa:	12 c0       	rjmp	.+36     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:523
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
        ms--;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	c8 1a       	sub	r12, r24
     400:	d1 08       	sbc	r13, r1
     402:	e1 08       	sbc	r14, r1
     404:	f1 08       	sbc	r15, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:524
        start += 1000;
     406:	c8 51       	subi	r28, 0x18	; 24
     408:	dc 4f       	sbci	r29, 0xFC	; 252
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:522
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();

    while (ms > 0) {
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
     40a:	c2 df       	rcall	.-124    	; 0x390 <micros>
     40c:	6c 1b       	sub	r22, r28
     40e:	7d 0b       	sbc	r23, r29
     410:	68 3e       	cpi	r22, 0xE8	; 232
     412:	73 40       	sbci	r23, 0x03	; 3
     414:	68 f3       	brcs	.-38     	; 0x3f0 <delay+0x14>
     416:	c1 14       	cp	r12, r1
     418:	d1 04       	cpc	r13, r1
     41a:	e1 04       	cpc	r14, r1
     41c:	f1 04       	cpc	r15, r1
     41e:	71 f7       	brne	.-36     	; 0x3fc <delay+0x20>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:532
    #else
    uint32_t start = millis();
    while((millis() - start) < ms)  /* NOP */yield();
    return;
    #endif
  }
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	ff 90       	pop	r15
     426:	ef 90       	pop	r14
     428:	df 90       	pop	r13
     42a:	cf 90       	pop	r12
     42c:	08 95       	ret

0000042e <AvgADCRead(unsigned char) [clone .constprop.14]>:
AvgADCRead():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:282
/*
 * Function to take 4 readings from the specified ADC channel, average them, convert to a voltage
 * and return it to the calling function.
 */

float AvgADCRead(byte ADCInput)
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	14 e0       	ldi	r17, 0x04	; 4
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:284
{
  unsigned int AvgADC=0;
     436:	d0 e0       	ldi	r29, 0x00	; 0
     438:	c0 e0       	ldi	r28, 0x00	; 0
analogRead():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:72
  #ifndef ADCSRA
  return digitalRead(analogInputToDigitalPin(pin)) ? 1023 : 0; //No ADC, so read as a digital pin instead.
  #endif

  #if defined(ADMUX)
  ADMUX = ((analog_reference & ADMUX_REFS_MASK) << REFS0) | ((pin & ADMUX_MUX_MASK) << MUX0); //select the channel and reference
     43a:	17 b8       	out	0x07, r1	; 7
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:74
  #if defined(REFS2)
  ADMUX |= (((analog_reference & 0x04) >> 2) << REFS2); //some have an extra reference bit in a weird position.
     43c:	87 b1       	in	r24, 0x07	; 7
     43e:	87 b9       	out	0x07, r24	; 7
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:79
  #endif
  #endif

  #if defined(HAVE_ADC) && HAVE_ADC
  sbi(ADCSRA, ADSC); //Start conversion
     440:	36 9a       	sbi	0x06, 6	; 6
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:81

  while(ADCSRA & (1<<ADSC)); //Wait for conversion to complete.
     442:	36 99       	sbic	0x06, 6	; 6
     444:	fe cf       	rjmp	.-4      	; 0x442 <AvgADCRead(unsigned char) [clone .constprop.14]+0x14>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:83

  uint8_t low = ADCL;
     446:	94 b1       	in	r25, 0x04	; 4
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:84
  uint8_t high = ADCH;
     448:	85 b1       	in	r24, 0x05	; 5
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:85
  return (high << 8) | low;
     44a:	89 27       	eor	r24, r25
     44c:	98 27       	eor	r25, r24
     44e:	89 27       	eor	r24, r25
AvgADCRead():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:290
  byte loopCNT=0;
  float AvgADCVal=0.0;
  
  for(loopCNT=0;loopCNT<4;loopCNT++)
  {
    AvgADC=AvgADC+analogRead(ADCInput);
     450:	c8 0f       	add	r28, r24
     452:	d9 1f       	adc	r29, r25
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:291
    delay(2);   // ADC settle time
     454:	62 e0       	ldi	r22, 0x02	; 2
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	bf df       	rcall	.-130    	; 0x3dc <delay>
     45e:	11 50       	subi	r17, 0x01	; 1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:288
{
  unsigned int AvgADC=0;
  byte loopCNT=0;
  float AvgADCVal=0.0;
  
  for(loopCNT=0;loopCNT<4;loopCNT++)
     460:	61 f7       	brne	.-40     	; 0x43a <AvgADCRead(unsigned char) [clone .constprop.14]+0xc>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:293
  {
    AvgADC=AvgADC+analogRead(ADCInput);
    delay(2);   // ADC settle time
  }
  AvgADCVal= (float)((AvgADC*4.88E-3)/4);   // Calculate average of 4 readings
     462:	be 01       	movw	r22, r28
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	7f db       	rcall	.-2306   	; 0xfffffb68 <__eeprom_end+0xff7efb68>
     46a:	28 e6       	ldi	r18, 0x68	; 104
     46c:	38 ee       	ldi	r19, 0xE8	; 232
     46e:	4f e9       	ldi	r20, 0x9F	; 159
     470:	5b e3       	ldi	r21, 0x3B	; 59
     472:	db db       	rcall	.-2122   	; 0xfffffc2a <__eeprom_end+0xff7efc2a>
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	40 e8       	ldi	r20, 0x80	; 128
     47a:	5e e3       	ldi	r21, 0x3E	; 62
     47c:	d6 db       	rcall	.-2132   	; 0xfffffc2a <__eeprom_end+0xff7efc2a>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:295
  return(AvgADCVal);
}
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	1f 91       	pop	r17
     484:	08 95       	ret

00000486 <millis>:
millis():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:341
  }

  unsigned long millis()
  {
    unsigned long m;
    uint8_t oldSREG = SREG;
     486:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:345

    // disable interrupts while we read millis_timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
    cli();
     488:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:346
    m = millis_timer_millis;
     48a:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <millis_timer_millis>
     48e:	70 91 f2 00 	lds	r23, 0x00F2	; 0x8000f2 <millis_timer_millis+0x1>
     492:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <millis_timer_millis+0x2>
     496:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <millis_timer_millis+0x3>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:347
    SREG = oldSREG;
     49a:	2f bf       	out	0x3f, r18	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:350

    return m;
  }
     49c:	08 95       	ret

0000049e <SoftSerial::tx_pin_write(unsigned char) [clone .part.4]>:
_ZN10SoftSerial12tx_pin_writeEh.part.4():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:317
    "pop r18 \n\t"
    ::);
#endif
}

void SoftSerial::tx_pin_write(uint8_t pin_state)
     49e:	dc 01       	movw	r26, r24
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:320
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
     4a0:	51 96       	adiw	r26, 0x11	; 17
     4a2:	ed 91       	ld	r30, X+
     4a4:	fc 91       	ld	r31, X
     4a6:	52 97       	sbiw	r26, 0x12	; 18
     4a8:	90 81       	ld	r25, Z
     4aa:	50 96       	adiw	r26, 0x10	; 16
     4ac:	8c 91       	ld	r24, X
     4ae:	80 95       	com	r24
     4b0:	89 23       	and	r24, r25
     4b2:	80 83       	st	Z, r24
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:323
  else
    *_transmitPortRegister |= _transmitBitMask;
}
     4b4:	08 95       	ret

000004b6 <SoftSerial::peek()>:
peek():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:553
  SREG = oldSREG;
}

int SoftSerial::peek()
{
  if (!isListening())
     4b6:	20 91 fb 00 	lds	r18, 0x00FB	; 0x8000fb <SoftSerial::active_object>
     4ba:	30 91 fc 00 	lds	r19, 0x00FC	; 0x8000fc <SoftSerial::active_object+0x1>
     4be:	28 17       	cp	r18, r24
     4c0:	39 07       	cpc	r19, r25
     4c2:	81 f4       	brne	.+32     	; 0x4e4 <SoftSerial::peek()+0x2e>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:557
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     4c4:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <SoftSerial::_receive_buffer_head>
     4c8:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <SoftSerial::_receive_buffer_tail>
     4cc:	98 17       	cp	r25, r24
     4ce:	51 f0       	breq	.+20     	; 0x4e4 <SoftSerial::peek()+0x2e>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:561
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     4d0:	e0 91 f9 00 	lds	r30, 0x00F9	; 0x8000f9 <SoftSerial::_receive_buffer_head>
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	e0 55       	subi	r30, 0x50	; 80
     4d8:	ff 4f       	sbci	r31, 0xFF	; 255
     4da:	80 81       	ld	r24, Z
     4dc:	08 2e       	mov	r0, r24
     4de:	00 0c       	add	r0, r0
     4e0:	99 0b       	sbc	r25, r25
     4e2:	08 95       	ret
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:554
}

int SoftSerial::peek()
{
  if (!isListening())
    return -1;
     4e4:	8f ef       	ldi	r24, 0xFF	; 255
     4e6:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:562
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
     4e8:	08 95       	ret

000004ea <SoftSerial::flush()>:
flush():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:542
  return 1;
}

void SoftSerial::flush()
{
  if (!isListening())
     4ea:	20 91 fb 00 	lds	r18, 0x00FB	; 0x8000fb <SoftSerial::active_object>
     4ee:	30 91 fc 00 	lds	r19, 0x00FC	; 0x8000fc <SoftSerial::active_object+0x1>
     4f2:	28 17       	cp	r18, r24
     4f4:	39 07       	cpc	r19, r25
     4f6:	39 f4       	brne	.+14     	; 0x506 <SoftSerial::flush()+0x1c>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:545
    return;

  uint8_t oldSREG = SREG;
     4f8:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:546
  cli();
     4fa:	f8 94       	cli
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:547
  _receive_buffer_head = _receive_buffer_tail = 0;
     4fc:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <SoftSerial::_receive_buffer_tail>
     500:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <SoftSerial::_receive_buffer_head>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:548
  SREG = oldSREG;
     504:	8f bf       	out	0x3f, r24	; 63
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:549
}
     506:	08 95       	ret

00000508 <SoftSerial::available()>:
available():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:484
  return d;
}

int SoftSerial::available()
{
  if (!isListening())
     508:	20 91 fb 00 	lds	r18, 0x00FB	; 0x8000fb <SoftSerial::active_object>
     50c:	30 91 fc 00 	lds	r19, 0x00FC	; 0x8000fc <SoftSerial::active_object+0x1>
     510:	28 17       	cp	r18, r24
     512:	39 07       	cpc	r19, r25
     514:	69 f4       	brne	.+26     	; 0x530 <SoftSerial::available()+0x28>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:487
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     516:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <SoftSerial::_receive_buffer_tail>
     51a:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <SoftSerial::_receive_buffer_head>
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	80 5c       	subi	r24, 0xC0	; 192
     522:	9f 4f       	sbci	r25, 0xFF	; 255
     524:	82 1b       	sub	r24, r18
     526:	91 09       	sbc	r25, r1
     528:	60 e4       	ldi	r22, 0x40	; 64
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	6e dc       	rcall	.-1828   	; 0xfffffe0a <__eeprom_end+0xff7efe0a>
     52e:	08 95       	ret
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:485
}

int SoftSerial::available()
{
  if (!isListening())
    return 0;
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:488

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
     534:	08 95       	ret

00000536 <SoftSerial::read()>:
read():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:469


// Read data from buffer
int SoftSerial::read()
{
  if (!isListening())
     536:	20 91 fb 00 	lds	r18, 0x00FB	; 0x8000fb <SoftSerial::active_object>
     53a:	30 91 fc 00 	lds	r19, 0x00FC	; 0x8000fc <SoftSerial::active_object+0x1>
     53e:	28 17       	cp	r18, r24
     540:	39 07       	cpc	r19, r25
     542:	b9 f4       	brne	.+46     	; 0x572 <SoftSerial::read()+0x3c>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:473
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     544:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <SoftSerial::_receive_buffer_head>
     548:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <SoftSerial::_receive_buffer_tail>
     54c:	98 17       	cp	r25, r24
     54e:	89 f0       	breq	.+34     	; 0x572 <SoftSerial::read()+0x3c>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:477
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     550:	e0 91 f9 00 	lds	r30, 0x00F9	; 0x8000f9 <SoftSerial::_receive_buffer_head>
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	e0 55       	subi	r30, 0x50	; 80
     558:	ff 4f       	sbci	r31, 0xFF	; 255
     55a:	80 81       	ld	r24, Z
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:478
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     55c:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <SoftSerial::_receive_buffer_head>
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	2f 5f       	subi	r18, 0xFF	; 255
     564:	3f 4f       	sbci	r19, 0xFF	; 255
     566:	2f 73       	andi	r18, 0x3F	; 63
     568:	33 27       	eor	r19, r19
     56a:	20 93 f9 00 	sts	0x00F9, r18	; 0x8000f9 <SoftSerial::_receive_buffer_head>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:479
  return d;
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	08 95       	ret
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:470

// Read data from buffer
int SoftSerial::read()
{
  if (!isListening())
    return -1;
     572:	8f ef       	ldi	r24, 0xFF	; 255
     574:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:480

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
     576:	08 95       	ret

00000578 <SoftSerial::tunedDelay(unsigned int)>:
tunedDelay():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:213
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	2f ef       	ldi	r18, 0xFF	; 255
     57e:	8f 3f       	cpi	r24, 0xFF	; 255
     580:	92 07       	cpc	r25, r18
     582:	d9 f7       	brne	.-10     	; 0x57a <SoftSerial::tunedDelay(unsigned int)+0x2>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:214
}
     584:	08 95       	ret

00000586 <SoftSerial::handle_interrupt()>:
handle_interrupt():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:336
// Interrupt handling
//

/* static */
inline void SoftSerial::handle_interrupt()
{
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:337
  if (active_object)
     592:	c0 91 fb 00 	lds	r28, 0x00FB	; 0x8000fb <SoftSerial::active_object>
     596:	d0 91 fc 00 	lds	r29, 0x00FC	; 0x8000fc <SoftSerial::active_object+0x1>
     59a:	20 97       	sbiw	r28, 0x00	; 0
     59c:	49 f0       	breq	.+18     	; 0x5b0 <SoftSerial::handle_interrupt()+0x2a>
     59e:	ee 85       	ldd	r30, Y+14	; 0x0e
     5a0:	ff 85       	ldd	r31, Y+15	; 0x0f
     5a2:	9d 85       	ldd	r25, Y+13	; 0x0d
recv():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:260

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     5a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5a6:	81 ff       	sbrs	r24, 1
     5a8:	0a c0       	rjmp	.+20     	; 0x5be <SoftSerial::handle_interrupt()+0x38>
rx_pin_read():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:327
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     5aa:	80 81       	ld	r24, Z
     5ac:	89 23       	and	r24, r25
recv():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:260

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     5ae:	51 f4       	brne	.+20     	; 0x5c4 <SoftSerial::handle_interrupt()+0x3e>
handle_interrupt():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:341
{
  if (active_object)
  {
    active_object->recv();
  }
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	08 95       	ret
rx_pin_read():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:327
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     5be:	80 81       	ld	r24, Z
     5c0:	89 23       	and	r24, r25
recv():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:260

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     5c2:	b1 f7       	brne	.-20     	; 0x5b0 <SoftSerial::handle_interrupt()+0x2a>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:263
  {
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     5c4:	8b 89       	ldd	r24, Y+19	; 0x13
     5c6:	9c 89       	ldd	r25, Y+20	; 0x14
     5c8:	d7 df       	rcall	.-82     	; 0x578 <SoftSerial::tunedDelay(unsigned int)>
     5ca:	88 e0       	ldi	r24, 0x08	; 8
     5cc:	e8 2e       	mov	r14, r24
     5ce:	f1 2c       	mov	r15, r1
handle_interrupt():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:256
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     5d0:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:267
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
     5d2:	01 e0       	ldi	r16, 0x01	; 1
recv():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:269
    {
      tunedDelay(_rx_delay_intrabit);
     5d4:	8d 89       	ldd	r24, Y+21	; 0x15
     5d6:	9e 89       	ldd	r25, Y+22	; 0x16
     5d8:	cf df       	rcall	.-98     	; 0x578 <SoftSerial::tunedDelay(unsigned int)>
rx_pin_read():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:327
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     5da:	ee 85       	ldd	r30, Y+14	; 0x0e
     5dc:	ff 85       	ldd	r31, Y+15	; 0x0f
     5de:	80 81       	ld	r24, Z
     5e0:	9d 85       	ldd	r25, Y+13	; 0x0d
     5e2:	89 23       	and	r24, r25
recv():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:272
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
      DebugPulse(_DEBUG_PIN2, 1);
      uint8_t noti = ~i;
      if (rx_pin_read())
     5e4:	31 f1       	breq	.+76     	; 0x632 <SoftSerial::handle_interrupt()+0xac>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:273
        d |= i;
     5e6:	10 2b       	or	r17, r16
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:267
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
     5e8:	00 0f       	add	r16, r16
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	e8 1a       	sub	r14, r24
     5ee:	f1 08       	sbc	r15, r1
     5f0:	89 f7       	brne	.-30     	; 0x5d4 <SoftSerial::handle_interrupt()+0x4e>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:279
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     5f2:	8f 89       	ldd	r24, Y+23	; 0x17
     5f4:	98 8d       	ldd	r25, Y+24	; 0x18
     5f6:	c0 df       	rcall	.-128    	; 0x578 <SoftSerial::tunedDelay(unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:282
    DebugPulse(_DEBUG_PIN2, 1);

    if (_inverse_logic)
     5f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5fa:	81 fd       	sbrc	r24, 1
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:283
      d = ~d;
     5fc:	10 95       	com	r17
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:286

    // if buffer full, set the overflow flag and return
    if ((_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF != _receive_buffer_head) 
     5fe:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <SoftSerial::_receive_buffer_tail>
     602:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <SoftSerial::_receive_buffer_head>
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	8f 73       	andi	r24, 0x3F	; 63
     60c:	99 27       	eor	r25, r25
     60e:	28 17       	cp	r18, r24
     610:	19 06       	cpc	r1, r25
     612:	99 f0       	breq	.+38     	; 0x63a <SoftSerial::handle_interrupt()+0xb4>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:289
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     614:	e0 91 fa 00 	lds	r30, 0x00FA	; 0x8000fa <SoftSerial::_receive_buffer_tail>
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	e0 55       	subi	r30, 0x50	; 80
     61c:	ff 4f       	sbci	r31, 0xFF	; 255
     61e:	10 83       	st	Z, r17
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:290
      _receive_buffer_tail = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     620:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <SoftSerial::_receive_buffer_tail>
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	8f 73       	andi	r24, 0x3F	; 63
     62a:	99 27       	eor	r25, r25
     62c:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <SoftSerial::_receive_buffer_tail>
     630:	bf cf       	rjmp	.-130    	; 0x5b0 <SoftSerial::handle_interrupt()+0x2a>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:271
    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
      DebugPulse(_DEBUG_PIN2, 1);
      uint8_t noti = ~i;
     632:	80 2f       	mov	r24, r16
     634:	80 95       	com	r24
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:275
      if (rx_pin_read())
        d |= i;
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
     636:	18 23       	and	r17, r24
     638:	d7 cf       	rjmp	.-82     	; 0x5e8 <SoftSerial::handle_interrupt()+0x62>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:297
    else 
    {
#if _DEBUG // for scope: pulse pin as overflow indictator
      DebugPulse(_DEBUG_PIN1, 1);
#endif
      _buffer_overflow = true;
     63a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     63c:	81 60       	ori	r24, 0x01	; 1
     63e:	8b 8f       	std	Y+27, r24	; 0x1b
     640:	b7 cf       	rjmp	.-146    	; 0x5b0 <SoftSerial::handle_interrupt()+0x2a>

00000642 <ReadSetupSwitch()>:
ReadSetupSwitch():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:303
 * Function to read the analogue input and see if the voltage matches the expected range of the setup switch.
 * Will return SWITCHPRESSED or SWITCHOPEN in response
 */

byte ReadSetupSwitch()
{
     642:	cf 92       	push	r12
     644:	df 92       	push	r13
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:305
  float ADCReading;
  ADCReading=AvgADCRead(SELECTION_IN);
     64a:	f1 de       	rcall	.-542    	; 0x42e <AvgADCRead(unsigned char) [clone .constprop.14]>
     64c:	6b 01       	movw	r12, r22
     64e:	7c 01       	movw	r14, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:306
  if (ADCReading >SETUP_LOWER && ADCReading < SETUP_UPPER)
     650:	26 e6       	ldi	r18, 0x66	; 102
     652:	36 e6       	ldi	r19, 0x66	; 102
     654:	46 e3       	ldi	r20, 0x36	; 54
     656:	50 e4       	ldi	r21, 0x40	; 64
     658:	c3 db       	rcall	.-2170   	; 0xfffffde0 <__eeprom_end+0xff7efde0>
     65a:	18 16       	cp	r1, r24
     65c:	7c f4       	brge	.+30     	; 0x67c <ReadSetupSwitch()+0x3a>
     65e:	2a e9       	ldi	r18, 0x9A	; 154
     660:	39 e9       	ldi	r19, 0x99	; 153
     662:	49 e4       	ldi	r20, 0x49	; 73
     664:	50 e4       	ldi	r21, 0x40	; 64
     666:	c7 01       	movw	r24, r14
     668:	b6 01       	movw	r22, r12
     66a:	7a da       	rcall	.-2828   	; 0xfffffb60 <__eeprom_end+0xff7efb60>
     66c:	87 ff       	sbrs	r24, 7
     66e:	06 c0       	rjmp	.+12     	; 0x67c <ReadSetupSwitch()+0x3a>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:308
  {
    return(SWITCHCLOSED);
     670:	87 e7       	ldi	r24, 0x77	; 119
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:314
  }
  else
  {
    return(SWITCHOPEN);
  }
}
     672:	ff 90       	pop	r15
     674:	ef 90       	pop	r14
     676:	df 90       	pop	r13
     678:	cf 90       	pop	r12
     67a:	08 95       	ret
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:312
  {
    return(SWITCHCLOSED);
  }
  else
  {
    return(SWITCHOPEN);
     67c:	86 e6       	ldi	r24, 0x66	; 102
     67e:	f9 cf       	rjmp	.-14     	; 0x672 <ReadSetupSwitch()+0x30>

00000680 <CalculateGears()>:
CalculateGears():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:145
}

byte CalculateGears(void)
{
   unsigned int GearCalc=0;
   if(ThrotNormReverse==NORMAL_THROT)
     680:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ThrotNormReverse>
     684:	84 33       	cpi	r24, 0x34	; 52
     686:	19 f5       	brne	.+70     	; 0x6ce <CalculateGears()+0x4e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:147
      {
          GearCalc=(ForwardThrot-NeutralThrot)/4;    // Get the difference and divide by 4
     688:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <NeutralThrot>
     68c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <NeutralThrot+0x1>
     690:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <ForwardThrot>
     694:	30 91 fe 00 	lds	r19, 0x00FE	; 0x8000fe <ForwardThrot+0x1>
     698:	28 1b       	sub	r18, r24
     69a:	39 0b       	sbc	r19, r25
     69c:	36 95       	lsr	r19
     69e:	27 95       	ror	r18
     6a0:	36 95       	lsr	r19
     6a2:	27 95       	ror	r18
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:148
          FirstGear=NeutralThrot+GearCalc; 
     6a4:	82 0f       	add	r24, r18
     6a6:	93 1f       	adc	r25, r19
     6a8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <FirstGear+0x1>
     6ac:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <FirstGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:149
          SecondGear=FirstGear+GearCalc;      
     6b0:	82 0f       	add	r24, r18
     6b2:	93 1f       	adc	r25, r19
     6b4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <SecondGear+0x1>
     6b8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <SecondGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:150
          ThirdGear=SecondGear+GearCalc;
     6bc:	82 0f       	add	r24, r18
     6be:	93 1f       	adc	r25, r19
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:158
      else if (ThrotNormReverse==REVERSE_THROT)
      {
          GearCalc=(NeutralThrot-ForwardThrot)/4;    // Get the difference and divide by 4
          FirstGear=NeutralThrot-GearCalc; 
          SecondGear=FirstGear-GearCalc;      
          ThirdGear=SecondGear-GearCalc;
     6c0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <ThirdGear+0x1>
     6c4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ThirdGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:177
      mySerial.print(F(" Neutral: "));
      mySerial.print(NeutralThrot);
      mySerial.print(F(" Reverse: "));
      mySerial.println(ReverseThrot);
      #endif
      CurrentGear=0; // For initialisation to be sure in case PWM count is way off.
     6c8:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <CurrentGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:178
}
     6cc:	08 95       	ret
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:153
          FirstGear=NeutralThrot+GearCalc; 
          SecondGear=FirstGear+GearCalc;      
          ThirdGear=SecondGear+GearCalc;
          FourthGear=ThirdGear+GearCalc;
      }
      else if (ThrotNormReverse==REVERSE_THROT)
     6ce:	83 32       	cpi	r24, 0x23	; 35
     6d0:	d9 f7       	brne	.-10     	; 0x6c8 <CalculateGears()+0x48>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:155
      {
          GearCalc=(NeutralThrot-ForwardThrot)/4;    // Get the difference and divide by 4
     6d2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <NeutralThrot>
     6d6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <NeutralThrot+0x1>
     6da:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <ForwardThrot>
     6de:	30 91 fe 00 	lds	r19, 0x00FE	; 0x8000fe <ForwardThrot+0x1>
     6e2:	ac 01       	movw	r20, r24
     6e4:	42 1b       	sub	r20, r18
     6e6:	53 0b       	sbc	r21, r19
     6e8:	9a 01       	movw	r18, r20
     6ea:	36 95       	lsr	r19
     6ec:	27 95       	ror	r18
     6ee:	36 95       	lsr	r19
     6f0:	27 95       	ror	r18
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:156
          FirstGear=NeutralThrot-GearCalc; 
     6f2:	82 1b       	sub	r24, r18
     6f4:	93 0b       	sbc	r25, r19
     6f6:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <FirstGear+0x1>
     6fa:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <FirstGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:157
          SecondGear=FirstGear-GearCalc;      
     6fe:	82 1b       	sub	r24, r18
     700:	93 0b       	sbc	r25, r19
     702:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <SecondGear+0x1>
     706:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <SecondGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:158
          ThirdGear=SecondGear-GearCalc;
     70a:	82 1b       	sub	r24, r18
     70c:	93 0b       	sbc	r25, r19
     70e:	d8 cf       	rjmp	.-80     	; 0x6c0 <CalculateGears()+0x40>

00000710 <SoftSerial::write(unsigned char)>:
write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:491

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftSerial::write(uint8_t b)
{
     710:	df 92       	push	r13
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	ec 01       	movw	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:492
  if (_tx_delay == 0) {
     720:	89 8d       	ldd	r24, Y+25	; 0x19
     722:	9a 8d       	ldd	r25, Y+26	; 0x1a
     724:	89 2b       	or	r24, r25
     726:	71 f4       	brne	.+28     	; 0x744 <SoftSerial::write(unsigned char)+0x34>
_ZN5Print13setWriteErrorEi():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.h:73
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	9b 83       	std	Y+3, r25	; 0x03
     72e:	8a 83       	std	Y+2, r24	; 0x02
write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:494
    setWriteError();
    return 0;
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:538

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	ff 90       	pop	r15
     73e:	ef 90       	pop	r14
     740:	df 90       	pop	r13
     742:	08 95       	ret
     744:	16 2f       	mov	r17, r22
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:497
  if (_tx_delay == 0) {
    setWriteError();
    return 0;
  }

  uint8_t oldSREG = SREG;
     746:	df b6       	in	r13, 0x3f	; 63
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:498
  cli();  // turn off interrupts for a clean txmit
     748:	f8 94       	cli
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:501

  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
     74a:	8b 8d       	ldd	r24, Y+27	; 0x1b
tx_pin_write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:319
#endif
}

void SoftSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
     74c:	81 fd       	sbrc	r24, 1
     74e:	22 c0       	rjmp	.+68     	; 0x794 <SoftSerial::write(unsigned char)+0x84>
     750:	ce 01       	movw	r24, r28
     752:	a5 de       	rcall	.-694    	; 0x49e <SoftSerial::tx_pin_write(unsigned char) [clone .part.4]>
write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:502
  uint8_t oldSREG = SREG;
  cli();  // turn off interrupts for a clean txmit

  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);
     754:	89 8d       	ldd	r24, Y+25	; 0x19
     756:	9a 8d       	ldd	r25, Y+26	; 0x1a
     758:	0f df       	rcall	.-482    	; 0x578 <SoftSerial::tunedDelay(unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:505

  // Write each of the 8 bits
  if (_inverse_logic)
     75a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     75c:	98 e0       	ldi	r25, 0x08	; 8
     75e:	e9 2e       	mov	r14, r25
     760:	f1 2c       	mov	r15, r1
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:507
  {
    for (byte mask = 0x01; mask; mask <<= 1)
     762:	01 e0       	ldi	r16, 0x01	; 1
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:505
  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);

  // Write each of the 8 bits
  if (_inverse_logic)
     764:	81 ff       	sbrs	r24, 1
     766:	24 c0       	rjmp	.+72     	; 0x7b0 <SoftSerial::write(unsigned char)+0xa0>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:509
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     768:	81 2f       	mov	r24, r17
     76a:	80 23       	and	r24, r16
     76c:	d1 f0       	breq	.+52     	; 0x7a2 <SoftSerial::write(unsigned char)+0x92>
tx_pin_write():
     76e:	ce 01       	movw	r24, r28
     770:	96 de       	rcall	.-724    	; 0x49e <SoftSerial::tx_pin_write(unsigned char) [clone .part.4]>
write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:514
        tx_pin_write(LOW); // send 1
      else
        tx_pin_write(HIGH); // send 0
    
      tunedDelay(_tx_delay);
     772:	89 8d       	ldd	r24, Y+25	; 0x19
     774:	9a 8d       	ldd	r25, Y+26	; 0x1a
     776:	00 df       	rcall	.-512    	; 0x578 <SoftSerial::tunedDelay(unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:507
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);

  // Write each of the 8 bits
  if (_inverse_logic)
  {
    for (byte mask = 0x01; mask; mask <<= 1)
     778:	00 0f       	add	r16, r16
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	e8 1a       	sub	r14, r24
     77e:	f1 08       	sbc	r15, r1
     780:	99 f7       	brne	.-26     	; 0x768 <SoftSerial::write(unsigned char)+0x58>
tx_pin_write():
     782:	ce 01       	movw	r24, r28
     784:	8c de       	rcall	.-744    	; 0x49e <SoftSerial::tx_pin_write(unsigned char) [clone .part.4]>
write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:534
    }

    tx_pin_write(HIGH); // restore pin to natural state
  }

  SREG = oldSREG; // turn interrupts back on
     786:	df be       	out	0x3f, r13	; 63
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:535
  tunedDelay(_tx_delay);
     788:	89 8d       	ldd	r24, Y+25	; 0x19
     78a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     78c:	f5 de       	rcall	.-534    	; 0x578 <SoftSerial::tunedDelay(unsigned int)>
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	d0 cf       	rjmp	.-96     	; 0x734 <SoftSerial::write(unsigned char)+0x24>
tx_pin_write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:322
void SoftSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
     794:	e9 89       	ldd	r30, Y+17	; 0x11
     796:	fa 89       	ldd	r31, Y+18	; 0x12
     798:	80 81       	ld	r24, Z
     79a:	98 89       	ldd	r25, Y+16	; 0x10
     79c:	89 2b       	or	r24, r25
     79e:	80 83       	st	Z, r24
     7a0:	d9 cf       	rjmp	.-78     	; 0x754 <SoftSerial::write(unsigned char)+0x44>
     7a2:	e9 89       	ldd	r30, Y+17	; 0x11
     7a4:	fa 89       	ldd	r31, Y+18	; 0x12
     7a6:	80 81       	ld	r24, Z
     7a8:	98 89       	ldd	r25, Y+16	; 0x10
     7aa:	89 2b       	or	r24, r25
     7ac:	80 83       	st	Z, r24
     7ae:	e1 cf       	rjmp	.-62     	; 0x772 <SoftSerial::write(unsigned char)+0x62>
write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:523
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     7b0:	81 2f       	mov	r24, r17
     7b2:	80 23       	and	r24, r16
     7b4:	a9 f0       	breq	.+42     	; 0x7e0 <SoftSerial::write(unsigned char)+0xd0>
tx_pin_write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:322
void SoftSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
     7b6:	e9 89       	ldd	r30, Y+17	; 0x11
     7b8:	fa 89       	ldd	r31, Y+18	; 0x12
     7ba:	80 81       	ld	r24, Z
     7bc:	98 89       	ldd	r25, Y+16	; 0x10
     7be:	89 2b       	or	r24, r25
     7c0:	80 83       	st	Z, r24
write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:528
      if (b & mask) // choose bit
        tx_pin_write(HIGH); // send 1
      else
        tx_pin_write(LOW); // send 0
    
      tunedDelay(_tx_delay);
     7c2:	89 8d       	ldd	r24, Y+25	; 0x19
     7c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7c6:	d8 de       	rcall	.-592    	; 0x578 <SoftSerial::tunedDelay(unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:521

    tx_pin_write(LOW); // restore pin to natural state
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
     7c8:	00 0f       	add	r16, r16
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	e8 1a       	sub	r14, r24
     7ce:	f1 08       	sbc	r15, r1
     7d0:	79 f7       	brne	.-34     	; 0x7b0 <SoftSerial::write(unsigned char)+0xa0>
tx_pin_write():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:322
void SoftSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
     7d2:	e9 89       	ldd	r30, Y+17	; 0x11
     7d4:	fa 89       	ldd	r31, Y+18	; 0x12
     7d6:	80 81       	ld	r24, Z
     7d8:	98 89       	ldd	r25, Y+16	; 0x10
     7da:	89 2b       	or	r24, r25
     7dc:	80 83       	st	Z, r24
     7de:	d3 cf       	rjmp	.-90     	; 0x786 <SoftSerial::write(unsigned char)+0x76>
     7e0:	ce 01       	movw	r24, r28
     7e2:	5d de       	rcall	.-838    	; 0x49e <SoftSerial::tx_pin_write(unsigned char) [clone .part.4]>
     7e4:	ee cf       	rjmp	.-36     	; 0x7c2 <SoftSerial::write(unsigned char)+0xb2>

000007e6 <Print::print(__FlashStringHelper const*) [clone .constprop.23]>:
print():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:222
  return vfprintf(&f, ifsh, ap);
}

#ifdef FLASHSTRING_SUPPORT

size_t Print::print(const __FlashStringHelper *ifsh)
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	8c 01       	movw	r16, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:225
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     7f0:	d0 e0       	ldi	r29, 0x00	; 0
     7f2:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:227
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     7f4:	f8 01       	movw	r30, r16
     7f6:	ec 0f       	add	r30, r28
     7f8:	fd 1f       	adc	r31, r29
     7fa:	64 91       	lpm	r22, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:228
    if (c == 0) break;
     7fc:	66 23       	and	r22, r22
     7fe:	39 f0       	breq	.+14     	; 0x80e <Print::print(__FlashStringHelper const*) [clone .constprop.23]+0x28>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:229
    if (write(c)) n++;
     800:	8a e8       	ldi	r24, 0x8A	; 138
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	85 df       	rcall	.-246    	; 0x710 <SoftSerial::write(unsigned char)>
     806:	89 2b       	or	r24, r25
     808:	11 f0       	breq	.+4      	; 0x80e <Print::print(__FlashStringHelper const*) [clone .constprop.23]+0x28>
     80a:	21 96       	adiw	r28, 0x01	; 1
     80c:	f3 cf       	rjmp	.-26     	; 0x7f4 <Print::print(__FlashStringHelper const*) [clone .constprop.23]+0xe>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:233
    else break;
  }
  return n;
}
     80e:	ce 01       	movw	r24, r28
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	08 95       	ret

0000081a <Print::println(__FlashStringHelper const*) [clone .constprop.12]>:
println():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:235

size_t Print::println(const __FlashStringHelper *ifsh)
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:237
{
  size_t n = print(ifsh);
     81e:	e3 df       	rcall	.-58     	; 0x7e6 <Print::print(__FlashStringHelper const*) [clone .constprop.23]>
     820:	ec 01       	movw	r28, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:238
  n += println();
     822:	8a e8       	ldi	r24, 0x8A	; 138
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	7a dd       	rcall	.-1292   	; 0x31c <Print::println()>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:240
  return n;
}
     828:	8c 0f       	add	r24, r28
     82a:	9d 1f       	adc	r25, r29
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	08 95       	ret

00000832 <digitalWrite>:
digitalWrite():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:139
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	fc 01       	movw	r30, r24
     836:	ec 5d       	subi	r30, 0xDC	; 220
     838:	ff 4f       	sbci	r31, 0xFF	; 255
     83a:	34 91       	lpm	r19, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:140
  uint8_t bit = digitalPinToBitMask(pin);
     83c:	fc 01       	movw	r30, r24
     83e:	e6 53       	subi	r30, 0x36	; 54
     840:	fe 4f       	sbci	r31, 0xFE	; 254
     842:	24 91       	lpm	r18, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:141
  uint8_t port = digitalPinToPort(pin);
     844:	fc 01       	movw	r30, r24
     846:	ec 53       	subi	r30, 0x3C	; 60
     848:	fe 4f       	sbci	r31, 0xFE	; 254
     84a:	e4 91       	lpm	r30, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:144
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     84c:	ee 23       	and	r30, r30
     84e:	b9 f0       	breq	.+46     	; 0x87e <digitalWrite+0x4c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:148

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     850:	33 23       	and	r19, r19
     852:	29 f0       	breq	.+10     	; 0x85e <digitalWrite+0x2c>
turnOffPWM():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:67
}

static void turnOffPWM(uint8_t timer)
{
  #if defined(TCCR0A) && defined(COM0A1)
    if( timer == TIMER0A){
     854:	31 30       	cpi	r19, 0x01	; 1
     856:	a1 f4       	brne	.+40     	; 0x880 <digitalWrite+0x4e>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:68
      cbi(TCCR0A, COM0A1);
     858:	8a b5       	in	r24, 0x2a	; 42
     85a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:74
      //cbi(TCCR0A, COM0A0);
    } else
  #endif
  #if defined(TCCR0A) && defined(COM0B1)
    if( timer == TIMER0B){
      cbi(TCCR0A, COM0B1);
     85c:	8a bd       	out	0x2a, r24	; 42
digitalWrite():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:150

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	ee 0f       	add	r30, r30
     862:	ff 1f       	adc	r31, r31
     864:	e8 54       	subi	r30, 0x48	; 72
     866:	fe 4f       	sbci	r31, 0xFE	; 254
     868:	a5 91       	lpm	r26, Z+
     86a:	b4 91       	lpm	r27, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:153

  if (val == LOW) {
    uint8_t oldSREG = SREG;
     86c:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:152
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);

  if (val == LOW) {
     86e:	61 11       	cpse	r22, r1
     870:	18 c0       	rjmp	.+48     	; 0x8a2 <digitalWrite+0x70>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:154
    uint8_t oldSREG = SREG;
    cli();
     872:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:155
    *out &= ~bit;
     874:	ec 91       	ld	r30, X
     876:	20 95       	com	r18
     878:	2e 23       	and	r18, r30
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:160
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    *out |= bit;
     87a:	2c 93       	st	X, r18
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:161
    SREG = oldSREG;
     87c:	8f bf       	out	0x3f, r24	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:163
  }
}
     87e:	08 95       	ret
turnOffPWM():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:73
      cbi(TCCR0A, COM0A1);
      //cbi(TCCR0A, COM0A0);
    } else
  #endif
  #if defined(TCCR0A) && defined(COM0B1)
    if( timer == TIMER0B){
     880:	32 30       	cpi	r19, 0x02	; 2
     882:	19 f4       	brne	.+6      	; 0x88a <digitalWrite+0x58>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:74
      cbi(TCCR0A, COM0B1);
     884:	8a b5       	in	r24, 0x2a	; 42
     886:	8f 7d       	andi	r24, 0xDF	; 223
     888:	e9 cf       	rjmp	.-46     	; 0x85c <digitalWrite+0x2a>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:106
      //cbi(TCCR1C,COM1D0);
    } else
  #else
    // Timer1 for non-x61/x7
    #if defined(TCCR1) && defined(COM1A1) // x5
      if(timer == TIMER1A){
     88a:	33 30       	cpi	r19, 0x03	; 3
     88c:	21 f4       	brne	.+8      	; 0x896 <digitalWrite+0x64>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:107
        TCCR1 &= ~(1<<COM1A1);
     88e:	80 b7       	in	r24, 0x30	; 48
     890:	8f 7d       	andi	r24, 0xDF	; 223
     892:	80 bf       	out	0x30, r24	; 48
     894:	e4 cf       	rjmp	.-56     	; 0x85e <digitalWrite+0x2c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:112
        //cbi(TCCR1, COM1A0);
      } else
    #endif
    #if defined(TCCR1) && defined(COM1B1) // x5
      if( timer == TIMER1B){
     896:	34 30       	cpi	r19, 0x04	; 4
     898:	11 f7       	brne	.-60     	; 0x85e <digitalWrite+0x2c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:113
        GTCCR &= ~(1<<COM1B1);
     89a:	8c b5       	in	r24, 0x2c	; 44
     89c:	8f 7d       	andi	r24, 0xDF	; 223
     89e:	8c bd       	out	0x2c, r24	; 44
     8a0:	de cf       	rjmp	.-68     	; 0x85e <digitalWrite+0x2c>
digitalWrite():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:159
    cli();
    *out &= ~bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
     8a2:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:160
    *out |= bit;
     8a4:	ec 91       	ld	r30, X
     8a6:	2e 2b       	or	r18, r30
     8a8:	e8 cf       	rjmp	.-48     	; 0x87a <digitalWrite+0x48>

000008aa <BlinkLED(unsigned char, unsigned int, unsigned int)>:
BlinkLED():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:770


}// End loop()

void BlinkLED(byte numTimes, word ontime, word offtime)
{
     8aa:	8f 92       	push	r8
     8ac:	9f 92       	push	r9
     8ae:	af 92       	push	r10
     8b0:	bf 92       	push	r11
     8b2:	cf 92       	push	r12
     8b4:	df 92       	push	r13
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	d8 2f       	mov	r29, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:771
  byte numblinks=0;
     8c0:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:775
  while(numblinks<numTimes)
  {
      digitalWrite(LEDPIN,LEDON);
      delay(ontime);
     8c2:	4b 01       	movw	r8, r22
     8c4:	b1 2c       	mov	r11, r1
     8c6:	a1 2c       	mov	r10, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:777
      digitalWrite(LEDPIN,LEDOFF);
      delay(offtime);
     8c8:	6a 01       	movw	r12, r20
     8ca:	f1 2c       	mov	r15, r1
     8cc:	e1 2c       	mov	r14, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:774
void BlinkLED(byte numTimes, word ontime, word offtime)
{
  byte numblinks=0;
  while(numblinks<numTimes)
  {
      digitalWrite(LEDPIN,LEDON);
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	af df       	rcall	.-162    	; 0x832 <digitalWrite>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:775
      delay(ontime);
     8d4:	c5 01       	movw	r24, r10
     8d6:	b4 01       	movw	r22, r8
     8d8:	81 dd       	rcall	.-1278   	; 0x3dc <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:776
      digitalWrite(LEDPIN,LEDOFF);
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	a9 df       	rcall	.-174    	; 0x832 <digitalWrite>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:777
      delay(offtime);
     8e0:	c7 01       	movw	r24, r14
     8e2:	b6 01       	movw	r22, r12
     8e4:	7b dd       	rcall	.-1290   	; 0x3dc <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:778
      numblinks++;
     8e6:	cf 5f       	subi	r28, 0xFF	; 255
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:772
}// End loop()

void BlinkLED(byte numTimes, word ontime, word offtime)
{
  byte numblinks=0;
  while(numblinks<numTimes)
     8e8:	dc 13       	cpse	r29, r28
     8ea:	f1 cf       	rjmp	.-30     	; 0x8ce <BlinkLED(unsigned char, unsigned int, unsigned int)+0x24>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:781
      digitalWrite(LEDPIN,LEDOFF);
      delay(offtime);
      numblinks++;
  }    
  
}
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	cf 90       	pop	r12
     8f8:	bf 90       	pop	r11
     8fa:	af 90       	pop	r10
     8fc:	9f 90       	pop	r9
     8fe:	8f 90       	pop	r8
     900:	08 95       	ret

00000902 <pinMode>:
pinMode():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:33
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:35
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t bit = digitalPinToBitMask(pin);
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	fc 01       	movw	r30, r24
     90a:	e6 53       	subi	r30, 0x36	; 54
     90c:	fe 4f       	sbci	r31, 0xFE	; 254
     90e:	24 91       	lpm	r18, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:36
  uint8_t port = digitalPinToPort(pin);
     910:	8c 53       	subi	r24, 0x3C	; 60
     912:	9e 4f       	sbci	r25, 0xFE	; 254
     914:	fc 01       	movw	r30, r24
     916:	84 91       	lpm	r24, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:39
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     918:	88 23       	and	r24, r24
     91a:	c9 f0       	breq	.+50     	; 0x94e <pinMode+0x4c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:41

  reg = portModeRegister(port);
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	fc 01       	movw	r30, r24
     924:	e2 5e       	subi	r30, 0xE2	; 226
     926:	ff 4f       	sbci	r31, 0xFF	; 255
     928:	a5 91       	lpm	r26, Z+
     92a:	b4 91       	lpm	r27, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:42
  out = portOutputRegister(port);
     92c:	fc 01       	movw	r30, r24
     92e:	e8 54       	subi	r30, 0x48	; 72
     930:	fe 4f       	sbci	r31, 0xFE	; 254
     932:	c5 91       	lpm	r28, Z+
     934:	d4 91       	lpm	r29, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:44

  if (mode == INPUT) {
     936:	61 11       	cpse	r22, r1
     938:	0d c0       	rjmp	.+26     	; 0x954 <pinMode+0x52>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:45
    uint8_t oldSREG = SREG;
     93a:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:46
                cli();
     93c:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:47
    *reg &= ~bit;
     93e:	8c 91       	ld	r24, X
     940:	20 95       	com	r18
     942:	82 23       	and	r24, r18
     944:	8c 93       	st	X, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:48
    *out &= ~bit;
     946:	88 81       	ld	r24, Y
     948:	28 23       	and	r18, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:54
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
                cli();
    *reg &= ~bit;
    *out |= bit;
     94a:	28 83       	st	Y, r18
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:55
    SREG = oldSREG;
     94c:	9f bf       	out	0x3f, r25	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:62
    uint8_t oldSREG = SREG;
                cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:50
    uint8_t oldSREG = SREG;
                cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     954:	62 30       	cpi	r22, 0x02	; 2
     956:	51 f4       	brne	.+20     	; 0x96c <pinMode+0x6a>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:51
    uint8_t oldSREG = SREG;
     958:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:52
                cli();
     95a:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:53
    *reg &= ~bit;
     95c:	3c 91       	ld	r19, X
     95e:	82 2f       	mov	r24, r18
     960:	80 95       	com	r24
     962:	83 23       	and	r24, r19
     964:	8c 93       	st	X, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:54
    *out |= bit;
     966:	e8 81       	ld	r30, Y
     968:	2e 2b       	or	r18, r30
     96a:	ef cf       	rjmp	.-34     	; 0x94a <pinMode+0x48>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:57
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     96c:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:58
                cli();
     96e:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:59
    *reg |= bit;
     970:	ec 91       	ld	r30, X
     972:	2e 2b       	or	r18, r30
     974:	2c 93       	st	X, r18
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:60
    SREG = oldSREG;
     976:	8f bf       	out	0x3f, r24	; 63
     978:	ea cf       	rjmp	.-44     	; 0x94e <pinMode+0x4c>

0000097a <pulseIn.constprop.33>:
pulseIn():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:33
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
     97a:	0f 93       	push	r16
     97c:	1f 93       	push	r17
     97e:	8a 01       	movw	r16, r20
     980:	9b 01       	movw	r18, r22
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:38
{
    // cache the port and bit of the pin in order to speed up the
    // pulse width measuring loop and achieve finer resolution.  calling
    // digitalRead() instead yields much coarser resolution.
    uint8_t bit = digitalPinToBitMask(pin);
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	fc 01       	movw	r30, r24
     986:	e6 53       	subi	r30, 0x36	; 54
     988:	fe 4f       	sbci	r31, 0xFE	; 254
     98a:	64 91       	lpm	r22, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:39
    uint8_t port = digitalPinToPort(pin);
     98c:	fc 01       	movw	r30, r24
     98e:	ec 53       	subi	r30, 0x3C	; 60
     990:	fe 4f       	sbci	r31, 0xFE	; 254
     992:	e4 91       	lpm	r30, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:46

    // convert the timeout from microseconds to a number of times through
    // the initial loop; it takes approximately 16 clock cycles per iteration
    unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

    unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	ee 0f       	add	r30, r30
     998:	ff 1f       	adc	r31, r31
     99a:	e2 54       	subi	r30, 0x42	; 66
     99c:	fe 4f       	sbci	r31, 0xFE	; 254
     99e:	85 91       	lpm	r24, Z+
     9a0:	94 91       	lpm	r25, Z
     9a2:	46 2f       	mov	r20, r22
     9a4:	50 d4       	rcall	.+2208   	; 0x1246 <countPulseASM>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:49

    // prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
    if (width)
     9a6:	61 15       	cp	r22, r1
     9a8:	71 05       	cpc	r23, r1
     9aa:	81 05       	cpc	r24, r1
     9ac:	91 05       	cpc	r25, r1
     9ae:	29 f0       	breq	.+10     	; 0x9ba <pulseIn.constprop.33+0x40>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:50
        return clockCyclesToMicroseconds(width * 16 + 16);
     9b0:	6f 5f       	subi	r22, 0xFF	; 255
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	8f 4f       	sbci	r24, 0xFF	; 255
     9b6:	9f 4f       	sbci	r25, 0xFF	; 255
     9b8:	9f 70       	andi	r25, 0x0F	; 15
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:53
    else
        return 0;
}
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
     9be:	08 95       	ret

000009c0 <GetCurrentPWMVals()>:
GetCurrentPWMVals():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:692
*/
byte GetCurrentPWMVals()
{
  if (PWMFound==1 || PWMFound == 11);     // Looking for just the HORN or HORN + Throttle
	{
    HornPWM=pulseIn(HORN_IN,HIGH,22000);
     9c0:	40 ef       	ldi	r20, 0xF0	; 240
     9c2:	55 e5       	ldi	r21, 0x55	; 85
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	d7 df       	rcall	.-82     	; 0x97a <pulseIn.constprop.33>
     9cc:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <HornPWM+0x1>
     9d0:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <HornPWM>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:694
	}
	if(PWMFound==10 || PWMFound==11)
     9d4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <PWMFound>
     9d8:	8a 50       	subi	r24, 0x0A	; 10
     9da:	82 30       	cpi	r24, 0x02	; 2
     9dc:	50 f4       	brcc	.+20     	; 0x9f2 <GetCurrentPWMVals()+0x32>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:696
  {
		ThrottlePWM=pulseIn(THROTTLE_IN,HIGH,22000);
     9de:	40 ef       	ldi	r20, 0xF0	; 240
     9e0:	55 e5       	ldi	r21, 0x55	; 85
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	c8 df       	rcall	.-112    	; 0x97a <pulseIn.constprop.33>
     9ea:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <ThrottlePWM+0x1>
     9ee:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <ThrottlePWM>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:698
  }
}
     9f2:	08 95       	ret

000009f4 <CheckforPWMInputs()>:
CheckforPWMInputs():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:328
 * 11   Horn and throttle present
 * ONLY USED IN SETUP NOW
 */

byte CheckforPWMInputs(void)
{
     9f4:	cf 92       	push	r12
     9f6:	df 92       	push	r13
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:332
  int pwm1,pwm2;
  byte pwmfound=0;

  pwm1=pulseIn(HORN_IN,HIGH);
     9fc:	40 e4       	ldi	r20, 0x40	; 64
     9fe:	52 e4       	ldi	r21, 0x42	; 66
     a00:	6f e0       	ldi	r22, 0x0F	; 15
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	b9 df       	rcall	.-142    	; 0x97a <pulseIn.constprop.33>
     a08:	6b 01       	movw	r12, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:333
  pwm2=pulseIn(THROTTLE_IN,HIGH);
     a0a:	40 e4       	ldi	r20, 0x40	; 64
     a0c:	52 e4       	ldi	r21, 0x42	; 66
     a0e:	6f e0       	ldi	r22, 0x0F	; 15
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	b2 df       	rcall	.-156    	; 0x97a <pulseIn.constprop.33>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:338
/*
 pwm1=HornIn.width_us();
 pwm2=ThrotIn.width_us();
 */
  if(pwm1>800 && pwm1 <2500)
     a16:	21 e2       	ldi	r18, 0x21	; 33
     a18:	c2 1a       	sub	r12, r18
     a1a:	23 e0       	ldi	r18, 0x03	; 3
     a1c:	d2 0a       	sbc	r13, r18
     a1e:	21 e0       	ldi	r18, 0x01	; 1
     a20:	33 ea       	ldi	r19, 0xA3	; 163
     a22:	c3 16       	cp	r12, r19
     a24:	36 e0       	ldi	r19, 0x06	; 6
     a26:	d3 06       	cpc	r13, r19
     a28:	08 f0       	brcs	.+2      	; 0xa2c <CheckforPWMInputs()+0x38>
     a2a:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:342
  {
    pwmfound=1;   // Found horn PWM
  }
  if (pwm2>800 && pwm2 <2500)
     a2c:	ab 01       	movw	r20, r22
     a2e:	41 52       	subi	r20, 0x21	; 33
     a30:	53 40       	sbci	r21, 0x03	; 3
     a32:	43 3a       	cpi	r20, 0xA3	; 163
     a34:	56 40       	sbci	r21, 0x06	; 6
     a36:	08 f4       	brcc	.+2      	; 0xa3a <CheckforPWMInputs()+0x46>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:344
  {
    pwmfound+=10; // Found throttle PWM
     a38:	26 5f       	subi	r18, 0xF6	; 246
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:347
  }
  return(pwmfound); // Return result. Is initialised to zero in case no signals found
}
     a3a:	82 2f       	mov	r24, r18
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	df 90       	pop	r13
     a42:	cf 90       	pop	r12
     a44:	08 95       	ret

00000a46 <Print::write(char const*)>:
write():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.h:81

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     a46:	fb 01       	movw	r30, r22
     a48:	01 90       	ld	r0, Z+
     a4a:	00 20       	and	r0, r0
     a4c:	e9 f7       	brne	.-6      	; 0xa48 <Print::write(char const*)+0x2>
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	af 01       	movw	r20, r30
     a52:	46 1b       	sub	r20, r22
     a54:	57 0b       	sbc	r21, r23
     a56:	dc 01       	movw	r26, r24
     a58:	ed 91       	ld	r30, X+
     a5a:	fc 91       	ld	r31, X
     a5c:	02 80       	ldd	r0, Z+2	; 0x02
     a5e:	f3 81       	ldd	r31, Z+3	; 0x03
     a60:	e0 2d       	mov	r30, r0
     a62:	09 94       	ijmp

00000a64 <Print::printNumber(unsigned long, unsigned char)>:
printNumber():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:257

#endif

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     a64:	8f 92       	push	r8
     a66:	9f 92       	push	r9
     a68:	af 92       	push	r10
     a6a:	bf 92       	push	r11
     a6c:	cf 92       	push	r12
     a6e:	df 92       	push	r13
     a70:	ef 92       	push	r14
     a72:	ff 92       	push	r15
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	cd b7       	in	r28, 0x3d	; 61
     a7e:	de b7       	in	r29, 0x3e	; 62
     a80:	a1 97       	sbiw	r28, 0x21	; 33
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	f8 94       	cli
     a86:	de bf       	out	0x3e, r29	; 62
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	cd bf       	out	0x3d, r28	; 61
     a8c:	6c 01       	movw	r12, r24
     a8e:	14 2f       	mov	r17, r20
     a90:	e5 2f       	mov	r30, r21
     a92:	cb 01       	movw	r24, r22
     a94:	02 2f       	mov	r16, r18
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:261
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     a96:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:264

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     a98:	22 30       	cpi	r18, 0x02	; 2
     a9a:	08 f4       	brcc	.+2      	; 0xa9e <Print::printNumber(unsigned long, unsigned char)+0x3a>
     a9c:	0a e0       	ldi	r16, 0x0A	; 10
     a9e:	7e 01       	movw	r14, r28
     aa0:	21 e2       	ldi	r18, 0x21	; 33
     aa2:	e2 0e       	add	r14, r18
     aa4:	f1 1c       	adc	r15, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:268

  do {
    unsigned long m = n;
    n /= base;
     aa6:	80 2e       	mov	r8, r16
     aa8:	91 2c       	mov	r9, r1
     aaa:	b1 2c       	mov	r11, r1
     aac:	a1 2c       	mov	r10, r1
     aae:	61 2f       	mov	r22, r17
     ab0:	7e 2f       	mov	r23, r30
     ab2:	a5 01       	movw	r20, r10
     ab4:	94 01       	movw	r18, r8
     ab6:	bc d9       	rcall	.-3208   	; 0xfffffe30 <__eeprom_end+0xff7efe30>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:269
    char c = m - base * n;
     ab8:	80 2f       	mov	r24, r16
     aba:	62 2f       	mov	r22, r18
     abc:	88 d9       	rcall	.-3312   	; 0xfffffdce <__eeprom_end+0xff7efdce>
     abe:	18 1b       	sub	r17, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:270
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     ac0:	1a 30       	cpi	r17, 0x0A	; 10
     ac2:	0c f5       	brge	.+66     	; 0xb06 <Print::printNumber(unsigned long, unsigned char)+0xa2>
     ac4:	10 5d       	subi	r17, 0xD0	; 208
     ac6:	f7 01       	movw	r30, r14
     ac8:	12 93       	st	-Z, r17
     aca:	7f 01       	movw	r14, r30
     acc:	12 2f       	mov	r17, r18
     ace:	e3 2f       	mov	r30, r19
     ad0:	ca 01       	movw	r24, r20
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:271
  } while(n);
     ad2:	23 2b       	or	r18, r19
     ad4:	24 2b       	or	r18, r20
     ad6:	25 2b       	or	r18, r21
     ad8:	51 f7       	brne	.-44     	; 0xaae <Print::printNumber(unsigned long, unsigned char)+0x4a>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:273

  return write(str);
     ada:	b7 01       	movw	r22, r14
     adc:	c6 01       	movw	r24, r12
     ade:	b3 df       	rcall	.-154    	; 0xa46 <Print::write(char const*)>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:274
}
     ae0:	a1 96       	adiw	r28, 0x21	; 33
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	de bf       	out	0x3e, r29	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	cd bf       	out	0x3d, r28	; 61
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	cf 90       	pop	r12
     afc:	bf 90       	pop	r11
     afe:	af 90       	pop	r10
     b00:	9f 90       	pop	r9
     b02:	8f 90       	pop	r8
     b04:	08 95       	ret
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:270

  do {
    unsigned long m = n;
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     b06:	19 5c       	subi	r17, 0xC9	; 201
     b08:	de cf       	rjmp	.-68     	; 0xac6 <Print::printNumber(unsigned long, unsigned char)+0x62>

00000b0a <Print::print(unsigned char, int) [clone .constprop.22]>:
print():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:63
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
     b0a:	48 2f       	mov	r20, r24
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:95
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     b12:	20 e1       	ldi	r18, 0x10	; 16
     b14:	84 e4       	ldi	r24, 0x44	; 68
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	a5 cf       	rjmp	.-182    	; 0xa64 <Print::printNumber(unsigned long, unsigned char)>

00000b1a <DFPlayerMini_Fast::sendData() [clone .constprop.18]>:
sendData():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:924
/**************************************************************************/
 /*!
	 @brief  Send a config/command packet to the MP3 player.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::sendData()
     b1a:	af 92       	push	r10
     b1c:	bf 92       	push	r11
     b1e:	cf 92       	push	r12
     b20:	df 92       	push	r13
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:926
{
	_serial->write(sendStack.start_byte);
     b2e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <myMP3>
     b32:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <myMP3+0x1>
     b36:	dc 01       	movw	r26, r24
     b38:	ed 91       	ld	r30, X+
     b3a:	fc 91       	ld	r31, X
     b3c:	01 90       	ld	r0, Z+
     b3e:	f0 81       	ld	r31, Z
     b40:	e0 2d       	mov	r30, r0
     b42:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <myMP3+0x2>
     b46:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:927
	_serial->write(sendStack.version);
     b48:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <myMP3>
     b4c:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <myMP3+0x1>
     b50:	dc 01       	movw	r26, r24
     b52:	ed 91       	ld	r30, X+
     b54:	fc 91       	ld	r31, X
     b56:	01 90       	ld	r0, Z+
     b58:	f0 81       	ld	r31, Z
     b5a:	e0 2d       	mov	r30, r0
     b5c:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <myMP3+0x3>
     b60:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:928
	_serial->write(sendStack.length);
     b62:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <myMP3>
     b66:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <myMP3+0x1>
     b6a:	dc 01       	movw	r26, r24
     b6c:	ed 91       	ld	r30, X+
     b6e:	fc 91       	ld	r31, X
     b70:	01 90       	ld	r0, Z+
     b72:	f0 81       	ld	r31, Z
     b74:	e0 2d       	mov	r30, r0
     b76:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <myMP3+0x4>
     b7a:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:929
	_serial->write(sendStack.commandValue);
     b7c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <myMP3>
     b80:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <myMP3+0x1>
     b84:	dc 01       	movw	r26, r24
     b86:	ed 91       	ld	r30, X+
     b88:	fc 91       	ld	r31, X
     b8a:	01 90       	ld	r0, Z+
     b8c:	f0 81       	ld	r31, Z
     b8e:	e0 2d       	mov	r30, r0
     b90:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <myMP3+0x5>
     b94:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:930
	_serial->write(sendStack.feedbackValue);
     b96:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <myMP3>
     b9a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <myMP3+0x1>
     b9e:	dc 01       	movw	r26, r24
     ba0:	ed 91       	ld	r30, X+
     ba2:	fc 91       	ld	r31, X
     ba4:	01 90       	ld	r0, Z+
     ba6:	f0 81       	ld	r31, Z
     ba8:	e0 2d       	mov	r30, r0
     baa:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <myMP3+0x6>
     bae:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:931
	_serial->write(sendStack.paramMSB);
     bb0:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <myMP3>
     bb4:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <myMP3+0x1>
     bb8:	dc 01       	movw	r26, r24
     bba:	ed 91       	ld	r30, X+
     bbc:	fc 91       	ld	r31, X
     bbe:	01 90       	ld	r0, Z+
     bc0:	f0 81       	ld	r31, Z
     bc2:	e0 2d       	mov	r30, r0
     bc4:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <myMP3+0x7>
     bc8:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:932
	_serial->write(sendStack.paramLSB);
     bca:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <myMP3>
     bce:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <myMP3+0x1>
     bd2:	dc 01       	movw	r26, r24
     bd4:	ed 91       	ld	r30, X+
     bd6:	fc 91       	ld	r31, X
     bd8:	01 90       	ld	r0, Z+
     bda:	f0 81       	ld	r31, Z
     bdc:	e0 2d       	mov	r30, r0
     bde:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <myMP3+0x8>
     be2:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:933
	_serial->write(sendStack.checksumMSB);
     be4:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <myMP3>
     be8:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <myMP3+0x1>
     bec:	dc 01       	movw	r26, r24
     bee:	ed 91       	ld	r30, X+
     bf0:	fc 91       	ld	r31, X
     bf2:	01 90       	ld	r0, Z+
     bf4:	f0 81       	ld	r31, Z
     bf6:	e0 2d       	mov	r30, r0
     bf8:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <myMP3+0x9>
     bfc:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:934
	_serial->write(sendStack.checksumLSB);
     bfe:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <myMP3>
     c02:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <myMP3+0x1>
     c06:	dc 01       	movw	r26, r24
     c08:	ed 91       	ld	r30, X+
     c0a:	fc 91       	ld	r31, X
     c0c:	01 90       	ld	r0, Z+
     c0e:	f0 81       	ld	r31, Z
     c10:	e0 2d       	mov	r30, r0
     c12:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <myMP3+0xa>
     c16:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:935
	_serial->write(sendStack.end_byte);
     c18:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <myMP3>
     c1c:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <myMP3+0x1>
     c20:	dc 01       	movw	r26, r24
     c22:	ed 91       	ld	r30, X+
     c24:	fc 91       	ld	r31, X
     c26:	01 90       	ld	r0, Z+
     c28:	f0 81       	ld	r31, Z
     c2a:	e0 2d       	mov	r30, r0
     c2c:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <myMP3+0xb>
     c30:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:937

	if (_debug)
     c32:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <myMP3+0x16>
     c36:	88 23       	and	r24, r24
     c38:	09 f4       	brne	.+2      	; 0xc3c <DFPlayerMini_Fast::sendData() [clone .constprop.18]+0x122>
     c3a:	69 c0       	rjmp	.+210    	; 0xd0e <DFPlayerMini_Fast::sendData() [clone .constprop.18]+0x1f4>
print():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:53
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
     c3c:	66 e9       	ldi	r22, 0x96	; 150
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	84 e4       	ldi	r24, 0x44	; 68
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	00 df       	rcall	.-512    	; 0xa46 <Print::write(char const*)>
     c46:	a0 90 62 01 	lds	r10, 0x0162	; 0x800162 <myMP3+0x2>
     c4a:	b0 90 63 01 	lds	r11, 0x0163	; 0x800163 <myMP3+0x3>
     c4e:	c0 90 64 01 	lds	r12, 0x0164	; 0x800164 <myMP3+0x4>
     c52:	d0 90 65 01 	lds	r13, 0x0165	; 0x800165 <myMP3+0x5>
     c56:	e0 90 66 01 	lds	r14, 0x0166	; 0x800166 <myMP3+0x6>
     c5a:	f0 90 67 01 	lds	r15, 0x0167	; 0x800167 <myMP3+0x7>
     c5e:	00 91 68 01 	lds	r16, 0x0168	; 0x800168 <myMP3+0x8>
     c62:	10 91 69 01 	lds	r17, 0x0169	; 0x800169 <myMP3+0x9>
     c66:	d0 91 6a 01 	lds	r29, 0x016A	; 0x80016a <myMP3+0xa>
     c6a:	c0 91 6b 01 	lds	r28, 0x016B	; 0x80016b <myMP3+0xb>
     c6e:	6c e9       	ldi	r22, 0x9C	; 156
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	84 e4       	ldi	r24, 0x44	; 68
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	e7 de       	rcall	.-562    	; 0xa46 <Print::write(char const*)>
println():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:136
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     c78:	84 e4       	ldi	r24, 0x44	; 68
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	4f db       	rcall	.-2402   	; 0x31c <Print::println()>
printStack():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:1193
 */
 /**************************************************************************/
void DFPlayerMini_Fast::printStack(stack _stack)
{
	Serial.println("Stack:");
	Serial.print(_stack.start_byte, HEX);    Serial.print(' ');
     c7e:	8a 2d       	mov	r24, r10
     c80:	44 df       	rcall	.-376    	; 0xb0a <Print::print(unsigned char, int) [clone .constprop.22]>
     c82:	60 e2       	ldi	r22, 0x20	; 32
     c84:	84 e4       	ldi	r24, 0x44	; 68
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	42 db       	rcall	.-2428   	; 0x30e <Print::print(char)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:1194
	Serial.print(_stack.version, HEX);       Serial.print(' ');
     c8a:	8b 2d       	mov	r24, r11
     c8c:	3e df       	rcall	.-388    	; 0xb0a <Print::print(unsigned char, int) [clone .constprop.22]>
     c8e:	60 e2       	ldi	r22, 0x20	; 32
     c90:	84 e4       	ldi	r24, 0x44	; 68
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	3c db       	rcall	.-2440   	; 0x30e <Print::print(char)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:1195
	Serial.print(_stack.length, HEX);        Serial.print(' ');
     c96:	8c 2d       	mov	r24, r12
     c98:	38 df       	rcall	.-400    	; 0xb0a <Print::print(unsigned char, int) [clone .constprop.22]>
     c9a:	60 e2       	ldi	r22, 0x20	; 32
     c9c:	84 e4       	ldi	r24, 0x44	; 68
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	36 db       	rcall	.-2452   	; 0x30e <Print::print(char)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:1196
	Serial.print(_stack.commandValue, HEX);  Serial.print(' ');
     ca2:	8d 2d       	mov	r24, r13
     ca4:	32 df       	rcall	.-412    	; 0xb0a <Print::print(unsigned char, int) [clone .constprop.22]>
     ca6:	60 e2       	ldi	r22, 0x20	; 32
     ca8:	84 e4       	ldi	r24, 0x44	; 68
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	30 db       	rcall	.-2464   	; 0x30e <Print::print(char)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:1197
	Serial.print(_stack.feedbackValue, HEX); Serial.print(' ');
     cae:	8e 2d       	mov	r24, r14
     cb0:	2c df       	rcall	.-424    	; 0xb0a <Print::print(unsigned char, int) [clone .constprop.22]>
     cb2:	60 e2       	ldi	r22, 0x20	; 32
     cb4:	84 e4       	ldi	r24, 0x44	; 68
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	2a db       	rcall	.-2476   	; 0x30e <Print::print(char)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:1198
	Serial.print(_stack.paramMSB, HEX);      Serial.print(' ');
     cba:	8f 2d       	mov	r24, r15
     cbc:	26 df       	rcall	.-436    	; 0xb0a <Print::print(unsigned char, int) [clone .constprop.22]>
     cbe:	60 e2       	ldi	r22, 0x20	; 32
     cc0:	84 e4       	ldi	r24, 0x44	; 68
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	24 db       	rcall	.-2488   	; 0x30e <Print::print(char)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:1199
	Serial.print(_stack.paramLSB, HEX);      Serial.print(' ');
     cc6:	80 2f       	mov	r24, r16
     cc8:	20 df       	rcall	.-448    	; 0xb0a <Print::print(unsigned char, int) [clone .constprop.22]>
     cca:	60 e2       	ldi	r22, 0x20	; 32
     ccc:	84 e4       	ldi	r24, 0x44	; 68
     cce:	91 e0       	ldi	r25, 0x01	; 1
     cd0:	1e db       	rcall	.-2500   	; 0x30e <Print::print(char)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:1200
	Serial.print(_stack.checksumMSB, HEX);   Serial.print(' ');
     cd2:	81 2f       	mov	r24, r17
     cd4:	1a df       	rcall	.-460    	; 0xb0a <Print::print(unsigned char, int) [clone .constprop.22]>
     cd6:	60 e2       	ldi	r22, 0x20	; 32
     cd8:	84 e4       	ldi	r24, 0x44	; 68
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	18 db       	rcall	.-2512   	; 0x30e <Print::print(char)>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:1201
	Serial.print(_stack.checksumLSB, HEX);   Serial.print(' ');
     cde:	8d 2f       	mov	r24, r29
     ce0:	14 df       	rcall	.-472    	; 0xb0a <Print::print(unsigned char, int) [clone .constprop.22]>
     ce2:	60 e2       	ldi	r22, 0x20	; 32
     ce4:	84 e4       	ldi	r24, 0x44	; 68
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	12 db       	rcall	.-2524   	; 0x30e <Print::print(char)>
println():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:149
  return n;
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
     cea:	8c 2f       	mov	r24, r28
     cec:	0e df       	rcall	.-484    	; 0xb0a <Print::print(unsigned char, int) [clone .constprop.22]>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:150
  n += println();
     cee:	84 e4       	ldi	r24, 0x44	; 68
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	14 db       	rcall	.-2520   	; 0x31c <Print::println()>
sendData():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:941

	if (_debug)
	{
		Serial.print("Sent ");
		printStack(sendStack);
		Serial.println();
     cf4:	84 e4       	ldi	r24, 0x44	; 68
     cf6:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:943
	}
}
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	df 90       	pop	r13
     d06:	cf 90       	pop	r12
     d08:	bf 90       	pop	r11
     d0a:	af 90       	pop	r10
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:941

	if (_debug)
	{
		Serial.print("Sent ");
		printStack(sendStack);
		Serial.println();
     d0c:	07 cb       	rjmp	.-2546   	; 0x31c <Print::println()>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:943
	}
}
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	df 90       	pop	r13
     d1c:	cf 90       	pop	r12
     d1e:	bf 90       	pop	r11
     d20:	af 90       	pop	r10
     d22:	08 95       	ret

00000d24 <DFPlayerMini_Fast::loop(unsigned int) [clone .constprop.13]>:
loop():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:314
			   The track number to play.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::loop(uint16_t trackNum)
{
  sendStack.commandValue  = dfplayer::PLAYBACK_MODE;
     d24:	e0 e6       	ldi	r30, 0x60	; 96
     d26:	f1 e0       	ldi	r31, 0x01	; 1
     d28:	98 e0       	ldi	r25, 0x08	; 8
     d2a:	95 83       	std	Z+5, r25	; 0x05
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:315
  sendStack.feedbackValue = dfplayer::NO_FEEDBACK;
     d2c:	16 82       	std	Z+6, r1	; 0x06
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:316
  sendStack.paramMSB = (trackNum >> 8) & 0xFF;
     d2e:	17 82       	std	Z+7, r1	; 0x07
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:317
  sendStack.paramLSB = trackNum & 0xFF;
     d30:	80 87       	std	Z+8, r24	; 0x08
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:319
  
  findChecksum(sendStack);
     d32:	76 da       	rcall	.-2836   	; 0x220 <DFPlayerMini_Fast::findChecksum(DFPlayerMini_Fast::stack&) [clone .constprop.17]>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:320
  sendData();
     d34:	f2 ce       	rjmp	.-540    	; 0xb1a <DFPlayerMini_Fast::sendData() [clone .constprop.18]>

00000d36 <Print::println(unsigned int, int) [clone .constprop.10]>:
println():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:161
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
print():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:73
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
     d3a:	ac 01       	movw	r20, r24
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:95
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     d40:	2a e0       	ldi	r18, 0x0A	; 10
     d42:	8a e8       	ldi	r24, 0x8A	; 138
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	8e de       	rcall	.-740    	; 0xa64 <Print::printNumber(unsigned long, unsigned char)>
     d48:	ec 01       	movw	r28, r24
println():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:164
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
     d4a:	8a e8       	ldi	r24, 0x8A	; 138
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	e6 da       	rcall	.-2612   	; 0x31c <Print::println()>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:166
  return n;
}
     d50:	8c 0f       	add	r24, r28
     d52:	9d 1f       	adc	r25, r29
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
operator=():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:61
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    #if  (defined(__AVR_ATtinyX41__) && F_CPU==16000000 && CLOCK_SOURCE==0)
      EERef &operator=( uint8_t in )       { return safe_eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    #else
      EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     d5a:	2b c8       	rjmp	.-4010   	; 0xfffffdb2 <__eeprom_end+0xff7efdb2>

00000d5c <DoThrottleSetup()>:
DoThrottleSetup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:495
 * Function to read the PWM input from the throttle and store the values in EEPROM.
 * Can handle normal or reverse PWM inputs. We have to detect and store neutral, full forward throttle and full reverse throttle
 */

byte DoThrottleSetup(void)
{
     d5c:	6f 92       	push	r6
     d5e:	7f 92       	push	r7
     d60:	8f 92       	push	r8
     d62:	9f 92       	push	r9
     d64:	af 92       	push	r10
     d66:	bf 92       	push	r11
     d68:	cf 92       	push	r12
     d6a:	df 92       	push	r13
     d6c:	ef 92       	push	r14
     d6e:	ff 92       	push	r15
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:505
    byte i=0;
    
    // First we need the neutral position, wait for user to press button
    do
    {
        Dbounce1=ReadSetupSwitch();
     d78:	64 dc       	rcall	.-1848   	; 0x642 <ReadSetupSwitch()>
     d7a:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:506
        delay(DEBOUNCETIME);
     d7c:	68 ec       	ldi	r22, 0xC8	; 200
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	2b db       	rcall	.-2474   	; 0x3dc <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:507
        Dbounce2=ReadSetupSwitch();        
     d86:	5d dc       	rcall	.-1862   	; 0x642 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:508
    } while(Dbounce1==SWITCHOPEN && Dbounce2==SWITCHOPEN );
     d88:	c6 36       	cpi	r28, 0x66	; 102
     d8a:	11 f4       	brne	.+4      	; 0xd90 <DoThrottleSetup()+0x34>
     d8c:	86 36       	cpi	r24, 0x66	; 102
     d8e:	a1 f3       	breq	.-24     	; 0xd78 <DoThrottleSetup()+0x1c>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:510

    NeutralPulse=pulseIn(THROTTLE_IN, HIGH,22000);
     d90:	40 ef       	ldi	r20, 0xF0	; 240
     d92:	55 e5       	ldi	r21, 0x55	; 85
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	ef dd       	rcall	.-1058   	; 0x97a <pulseIn.constprop.33>
     d9c:	3b 01       	movw	r6, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:512
    //NeutralPulse=ThrotIn.width_us();
    BlinkLED(3, 300, 300);
     d9e:	4c e2       	ldi	r20, 0x2C	; 44
     da0:	51 e0       	ldi	r21, 0x01	; 1
     da2:	6c e2       	ldi	r22, 0x2C	; 44
     da4:	71 e0       	ldi	r23, 0x01	; 1
     da6:	83 e0       	ldi	r24, 0x03	; 3
     da8:	80 dd       	rcall	.-1280   	; 0x8aa <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:517
 
    //Now we need the full extent/on value, let user release switch
    do
    {
        Dbounce1=ReadSetupSwitch();
     daa:	4b dc       	rcall	.-1898   	; 0x642 <ReadSetupSwitch()>
     dac:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:518
        delay(DEBOUNCETIME);
     dae:	68 ec       	ldi	r22, 0xC8	; 200
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	12 db       	rcall	.-2524   	; 0x3dc <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:519
        Dbounce2=ReadSetupSwitch();        
     db8:	44 dc       	rcall	.-1912   	; 0x642 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:520
    } while(Dbounce1==SWITCHCLOSED && Dbounce2==SWITCHCLOSED );      
     dba:	c7 37       	cpi	r28, 0x77	; 119
     dbc:	11 f4       	brne	.+4      	; 0xdc2 <DoThrottleSetup()+0x66>
     dbe:	87 37       	cpi	r24, 0x77	; 119
     dc0:	a1 f3       	breq	.-24     	; 0xdaa <DoThrottleSetup()+0x4e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:526
    
    //Now move to final value and close switch.
    // Now we need the off position, wait for user to press button
    do
    {
        Dbounce1=ReadSetupSwitch();
     dc2:	3f dc       	rcall	.-1922   	; 0x642 <ReadSetupSwitch()>
     dc4:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:527
        delay(DEBOUNCETIME);
     dc6:	68 ec       	ldi	r22, 0xC8	; 200
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	06 db       	rcall	.-2548   	; 0x3dc <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:528
        Dbounce2=ReadSetupSwitch();        
     dd0:	38 dc       	rcall	.-1936   	; 0x642 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:529
    } while(Dbounce1==SWITCHOPEN && Dbounce2==SWITCHOPEN );  
     dd2:	c6 36       	cpi	r28, 0x66	; 102
     dd4:	11 f4       	brne	.+4      	; 0xdda <DoThrottleSetup()+0x7e>
     dd6:	86 36       	cpi	r24, 0x66	; 102
     dd8:	a1 f3       	breq	.-24     	; 0xdc2 <DoThrottleSetup()+0x66>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:530
    BlinkLED(4, 300, 300);
     dda:	4c e2       	ldi	r20, 0x2C	; 44
     ddc:	51 e0       	ldi	r21, 0x01	; 1
     dde:	6c e2       	ldi	r22, 0x2C	; 44
     de0:	71 e0       	ldi	r23, 0x01	; 1
     de2:	84 e0       	ldi	r24, 0x04	; 4
     de4:	62 dd       	rcall	.-1340   	; 0x8aa <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:531
    ForwardPulse = pulseIn(THROTTLE_IN, HIGH,22000);   // get the timer value
     de6:	40 ef       	ldi	r20, 0xF0	; 240
     de8:	55 e5       	ldi	r21, 0x55	; 85
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	c4 dd       	rcall	.-1144   	; 0x97a <pulseIn.constprop.33>
     df2:	4b 01       	movw	r8, r22
     df4:	8b 01       	movw	r16, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:537


  //Now we need the reverse value, let user release switch
    do
    {
        Dbounce1=ReadSetupSwitch();
     df6:	25 dc       	rcall	.-1974   	; 0x642 <ReadSetupSwitch()>
     df8:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:538
        delay(DEBOUNCETIME);
     dfa:	68 ec       	ldi	r22, 0xC8	; 200
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	ec da       	rcall	.-2600   	; 0x3dc <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:539
        Dbounce2=ReadSetupSwitch();        
     e04:	1e dc       	rcall	.-1988   	; 0x642 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:540
    } while(Dbounce1==SWITCHCLOSED && Dbounce2==SWITCHCLOSED );      
     e06:	c7 37       	cpi	r28, 0x77	; 119
     e08:	11 f4       	brne	.+4      	; 0xe0e <DoThrottleSetup()+0xb2>
     e0a:	87 37       	cpi	r24, 0x77	; 119
     e0c:	a1 f3       	breq	.-24     	; 0xdf6 <DoThrottleSetup()+0x9a>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:547
    //Now move to final value and close switch.
    // Now we need the off position, wait for user to press button
    
     do
    {
        Dbounce1=ReadSetupSwitch();
     e0e:	19 dc       	rcall	.-1998   	; 0x642 <ReadSetupSwitch()>
     e10:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:548
        delay(DEBOUNCETIME);
     e12:	68 ec       	ldi	r22, 0xC8	; 200
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	e0 da       	rcall	.-2624   	; 0x3dc <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:549
        Dbounce2=ReadSetupSwitch();        
     e1c:	12 dc       	rcall	.-2012   	; 0x642 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:550
    } while(Dbounce1==SWITCHOPEN && Dbounce2==SWITCHOPEN );  
     e1e:	c6 36       	cpi	r28, 0x66	; 102
     e20:	11 f4       	brne	.+4      	; 0xe26 <DoThrottleSetup()+0xca>
     e22:	86 36       	cpi	r24, 0x66	; 102
     e24:	a1 f3       	breq	.-24     	; 0xe0e <DoThrottleSetup()+0xb2>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:552
    
     ReversePulse = pulseIn(THROTTLE_IN, HIGH,22000);   // get the timer value
     e26:	40 ef       	ldi	r20, 0xF0	; 240
     e28:	55 e5       	ldi	r21, 0x55	; 85
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	a4 dd       	rcall	.-1208   	; 0x97a <pulseIn.constprop.33>
     e32:	6b 01       	movw	r12, r22
     e34:	eb 01       	movw	r28, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:554
     //ReversePulse=ThrotIn.width_us();
     BlinkLED(5, 300, 300);
     e36:	4c e2       	ldi	r20, 0x2C	; 44
     e38:	51 e0       	ldi	r21, 0x01	; 1
     e3a:	6c e2       	ldi	r22, 0x2C	; 44
     e3c:	71 e0       	ldi	r23, 0x01	; 1
     e3e:	85 e0       	ldi	r24, 0x05	; 5
     e40:	34 dd       	rcall	.-1432   	; 0x8aa <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:563
     * If we subtract ForwardPulse from ReversePulse and it is negative, we are looking at a reverse throtle so
     * we store REVERSE_THROT in THROT_EEPROM_DIRECTION
     * We store neutral position as-is regardl;ess of direction
     */ 
 
    if(ForwardPulse>ReversePulse)
     e42:	c0 16       	cp	r12, r16
     e44:	d1 06       	cpc	r13, r17
     e46:	80 f5       	brcc	.+96     	; 0xea8 <DoThrottleSetup()+0x14c>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:565
    {
        ForwardPulse+=TimerAdjustment;    // Add PWM neutral adjustment
     e48:	84 01       	movw	r16, r8
     e4a:	05 5e       	subi	r16, 0xE5	; 229
     e4c:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:566
        ReversePulse-=TimerAdjustment;
     e4e:	6b 97       	sbiw	r28, 0x1b	; 27
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:567
        EEPROM.write(THROT_EEPROM_DIRECTION ,NORMAL_THROT);
     e50:	64 e3       	ldi	r22, 0x34	; 52
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:573
    }
    else if (ReversePulse>ForwardPulse)
    {
        ForwardPulse-=TimerAdjustment;    // Add PWM neutral adjustment
        ReversePulse+=TimerAdjustment;
        EEPROM.write(THROT_EEPROM_DIRECTION,REVERSE_THROT);
     e52:	89 e0       	ldi	r24, 0x09	; 9
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	81 df       	rcall	.-254    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:578
    }

        Byte1=(byte)(ForwardPulse&0xFF);
        Byte2=(byte)(ForwardPulse>>8);
        EEPROM.write(THROT_EEPROM_FORWARD_LO,Byte1);
     e58:	60 2f       	mov	r22, r16
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	7d df       	rcall	.-262    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:579
        EEPROM.write(THROT_EEPROM_FORWARD_HI,Byte2);
     e60:	61 2f       	mov	r22, r17
     e62:	84 e0       	ldi	r24, 0x04	; 4
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	79 df       	rcall	.-270    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:582
        Byte1=(byte)(NeutralPulse&0xFF);
        Byte2=(byte)(NeutralPulse>>8);
        EEPROM.write(THROT_EEPROM_NEUTRAL_LO,Byte1);
     e68:	66 2d       	mov	r22, r6
     e6a:	85 e0       	ldi	r24, 0x05	; 5
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	75 df       	rcall	.-278    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:583
        EEPROM.write(THROT_EEPROM_NEUTRAL_HI,Byte2);
     e70:	67 2d       	mov	r22, r7
     e72:	86 e0       	ldi	r24, 0x06	; 6
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	71 df       	rcall	.-286    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:586
        Byte1=(byte)(ReversePulse&0xFF);
        Byte2=(byte)(ReversePulse>>8);
        EEPROM.write(THROT_EEPROM_REVERSE_LO,Byte1);
     e78:	6c 2f       	mov	r22, r28
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	6d df       	rcall	.-294    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:587
        EEPROM.write(THROT_EEPROM_REVERSE_HI,Byte2);     
     e80:	6d 2f       	mov	r22, r29
     e82:	88 e0       	ldi	r24, 0x08	; 8
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	69 df       	rcall	.-302    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:591
      
    return(1);
  
}
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	df 90       	pop	r13
     e98:	cf 90       	pop	r12
     e9a:	bf 90       	pop	r11
     e9c:	af 90       	pop	r10
     e9e:	9f 90       	pop	r9
     ea0:	8f 90       	pop	r8
     ea2:	7f 90       	pop	r7
     ea4:	6f 90       	pop	r6
     ea6:	08 95       	ret
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:569
    {
        ForwardPulse+=TimerAdjustment;    // Add PWM neutral adjustment
        ReversePulse-=TimerAdjustment;
        EEPROM.write(THROT_EEPROM_DIRECTION ,NORMAL_THROT);
    }
    else if (ReversePulse>ForwardPulse)
     ea8:	0c 15       	cp	r16, r12
     eaa:	1d 05       	cpc	r17, r13
     eac:	a8 f6       	brcc	.-86     	; 0xe58 <DoThrottleSetup()+0xfc>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:571
    {
        ForwardPulse-=TimerAdjustment;    // Add PWM neutral adjustment
     eae:	84 01       	movw	r16, r8
     eb0:	0b 51       	subi	r16, 0x1B	; 27
     eb2:	11 09       	sbc	r17, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:572
        ReversePulse+=TimerAdjustment;
     eb4:	6b 96       	adiw	r28, 0x1b	; 27
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:573
        EEPROM.write(THROT_EEPROM_DIRECTION,REVERSE_THROT);
     eb6:	63 e2       	ldi	r22, 0x23	; 35
     eb8:	cc cf       	rjmp	.-104    	; 0xe52 <DoThrottleSetup()+0xf6>

00000eba <DoHornSetup()>:
DoHornSetup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:421
/*
 * Function to read the PWM input from the horn and store the values in EEPROM.
 * Can handle normal or reverse PWM inputs
 */
byte DoHornSetup(void)
{
     eba:	cf 92       	push	r12
     ebc:	df 92       	push	r13
     ebe:	ef 92       	push	r14
     ec0:	ff 92       	push	r15
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:431
    byte i=0;
    
    // First we need the off position, wait for user to press button
    do
    {
        Dbounce1=ReadSetupSwitch();
     eca:	bb db       	rcall	.-2186   	; 0x642 <ReadSetupSwitch()>
     ecc:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:432
        delay(DEBOUNCETIME);
     ece:	68 ec       	ldi	r22, 0xC8	; 200
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	82 da       	rcall	.-2812   	; 0x3dc <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:433
        Dbounce2=ReadSetupSwitch();        
     ed8:	b4 db       	rcall	.-2200   	; 0x642 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:434
    } while(Dbounce1==SWITCHOPEN && Dbounce2==SWITCHOPEN );
     eda:	c6 36       	cpi	r28, 0x66	; 102
     edc:	11 f4       	brne	.+4      	; 0xee2 <DoHornSetup()+0x28>
     ede:	86 36       	cpi	r24, 0x66	; 102
     ee0:	a1 f3       	breq	.-24     	; 0xeca <DoHornSetup()+0x10>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:436

    Pulse1=pulseIn(HORN_IN, HIGH,22000);
     ee2:	40 ef       	ldi	r20, 0xF0	; 240
     ee4:	55 e5       	ldi	r21, 0x55	; 85
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	46 dd       	rcall	.-1396   	; 0x97a <pulseIn.constprop.33>
     eee:	eb 01       	movw	r28, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:438
    //Pulse1=HornIn.width_us();
    BlinkLED(1, 300, 300);
     ef0:	4c e2       	ldi	r20, 0x2C	; 44
     ef2:	51 e0       	ldi	r21, 0x01	; 1
     ef4:	6c e2       	ldi	r22, 0x2C	; 44
     ef6:	71 e0       	ldi	r23, 0x01	; 1
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	d7 dc       	rcall	.-1618   	; 0x8aa <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:443

    //Now we need the full extent/on value, let user release switch
    do
    {
        Dbounce1=ReadSetupSwitch();
     efc:	a2 db       	rcall	.-2236   	; 0x642 <ReadSetupSwitch()>
     efe:	18 2f       	mov	r17, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:444
        delay(DEBOUNCETIME);
     f00:	68 ec       	ldi	r22, 0xC8	; 200
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	69 da       	rcall	.-2862   	; 0x3dc <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:445
        Dbounce2=ReadSetupSwitch();        
     f0a:	9b db       	rcall	.-2250   	; 0x642 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:446
    } while(Dbounce1==SWITCHCLOSED && Dbounce2==SWITCHCLOSED );      
     f0c:	17 37       	cpi	r17, 0x77	; 119
     f0e:	11 f4       	brne	.+4      	; 0xf14 <DoHornSetup()+0x5a>
     f10:	87 37       	cpi	r24, 0x77	; 119
     f12:	a1 f3       	breq	.-24     	; 0xefc <DoHornSetup()+0x42>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:453
    //Now move to final value and close switch.
    // Now we need the off position, wait for user to press button
    
     do
    {
        Dbounce1=ReadSetupSwitch();
     f14:	96 db       	rcall	.-2260   	; 0x642 <ReadSetupSwitch()>
     f16:	18 2f       	mov	r17, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:454
        delay(DEBOUNCETIME);
     f18:	68 ec       	ldi	r22, 0xC8	; 200
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	5d da       	rcall	.-2886   	; 0x3dc <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:455
        Dbounce2=ReadSetupSwitch();        
     f22:	8f db       	rcall	.-2274   	; 0x642 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:456
    } while(Dbounce1==SWITCHOPEN && Dbounce2==SWITCHOPEN );  
     f24:	16 36       	cpi	r17, 0x66	; 102
     f26:	11 f4       	brne	.+4      	; 0xf2c <DoHornSetup()+0x72>
     f28:	86 36       	cpi	r24, 0x66	; 102
     f2a:	a1 f3       	breq	.-24     	; 0xf14 <DoHornSetup()+0x5a>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:458
    
     Pulse2 = pulseIn(HORN_IN, HIGH,22000);   // get the timer value
     f2c:	40 ef       	ldi	r20, 0xF0	; 240
     f2e:	55 e5       	ldi	r21, 0x55	; 85
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	21 dd       	rcall	.-1470   	; 0x97a <pulseIn.constprop.33>
     f38:	6b 01       	movw	r12, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:459
     BlinkLED(2, 300, 300);
     f3a:	4c e2       	ldi	r20, 0x2C	; 44
     f3c:	51 e0       	ldi	r21, 0x01	; 1
     f3e:	6c e2       	ldi	r22, 0x2C	; 44
     f40:	71 e0       	ldi	r23, 0x01	; 1
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	b2 dc       	rcall	.-1692   	; 0x8aa <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:468
     * so we store pulse2 and GREATERTHAN to EEPROM
     * otherwise if pulse2-pulse1 is negative, we are looking for less than pulse 2 so we store pulse2+TimerAdjustmen
     * and LESSTHAN to EEPROM
     */ 
 
    if(Pulse2>Pulse1)
     f46:	cc 15       	cp	r28, r12
     f48:	dd 05       	cpc	r29, r13
     f4a:	c8 f4       	brcc	.+50     	; 0xf7e <DoHornSetup()+0xc4>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:470
    {
        Pulse2=Pulse2-TimerAdjustment;
     f4c:	8b e1       	ldi	r24, 0x1B	; 27
     f4e:	c8 1a       	sub	r12, r24
     f50:	d1 08       	sbc	r13, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:473
        Byte1=(byte)(Pulse2&0xFF);
        Byte2=(byte)(Pulse2>>8);
        EEPROM.write(HORN_EEPROM_LO,Byte1);
     f52:	6c 2d       	mov	r22, r12
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	00 df       	rcall	.-512    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:474
        EEPROM.write(HORN_EEPROM_HI,Byte2);
     f5a:	6d 2d       	mov	r22, r13
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	fc de       	rcall	.-520    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:475
        EEPROM.write(HORN_EEPROM_GT_LT,GREATERTHAN);
     f62:	63 e3       	ldi	r22, 0x33	; 51
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:484
        Pulse2=Pulse2+TimerAdjustment;
        Byte1=(byte)(Pulse2&0xFF);
        Byte2=(byte)(Pulse2>>8);
        EEPROM.write(HORN_EEPROM_LO,Byte1);
        EEPROM.write(HORN_EEPROM_HI,Byte2);
        EEPROM.write(HORN_EEPROM_GT_LT,LESSTHAN);
     f64:	82 e0       	ldi	r24, 0x02	; 2
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	f8 de       	rcall	.-528    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:487
    }
     return(1);
} // End DoHornSetup()
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	ff 90       	pop	r15
     f76:	ef 90       	pop	r14
     f78:	df 90       	pop	r13
     f7a:	cf 90       	pop	r12
     f7c:	08 95       	ret
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:477
        Byte2=(byte)(Pulse2>>8);
        EEPROM.write(HORN_EEPROM_LO,Byte1);
        EEPROM.write(HORN_EEPROM_HI,Byte2);
        EEPROM.write(HORN_EEPROM_GT_LT,GREATERTHAN);
    }
    else if (Pulse1>Pulse2)
     f7e:	cc 16       	cp	r12, r28
     f80:	dd 06       	cpc	r13, r29
     f82:	98 f7       	brcc	.-26     	; 0xf6a <DoHornSetup()+0xb0>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:479
    {
        Pulse2=Pulse2+TimerAdjustment;
     f84:	8b e1       	ldi	r24, 0x1B	; 27
     f86:	c8 0e       	add	r12, r24
     f88:	d1 1c       	adc	r13, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:482
        Byte1=(byte)(Pulse2&0xFF);
        Byte2=(byte)(Pulse2>>8);
        EEPROM.write(HORN_EEPROM_LO,Byte1);
     f8a:	6c 2d       	mov	r22, r12
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	e4 de       	rcall	.-568    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:483
        EEPROM.write(HORN_EEPROM_HI,Byte2);
     f92:	6d 2d       	mov	r22, r13
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	e0 de       	rcall	.-576    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:484
        EEPROM.write(HORN_EEPROM_GT_LT,LESSTHAN);
     f9a:	62 e2       	ldi	r22, 0x22	; 34
     f9c:	e3 cf       	rjmp	.-58     	; 0xf64 <DoHornSetup()+0xaa>

00000f9e <ResetSettings()>:
ResetSettings():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:217
int ResetSettings(void)
{

    byte i;
    
    EEPROM.write(HORN_EEPROM_LO,0xD0);
     f9e:	60 ed       	ldi	r22, 0xD0	; 208
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	da de       	rcall	.-588    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:218
    EEPROM.write(HORN_EEPROM_HI,0x07); // 0x7d0 = 2000 (us)
     fa6:	67 e0       	ldi	r22, 0x07	; 7
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	d6 de       	rcall	.-596    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:219
    EEPROM.write(HORN_EEPROM_GT_LT,GREATERTHAN);
     fae:	63 e3       	ldi	r22, 0x33	; 51
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	d2 de       	rcall	.-604    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:222
    //Now store the default throttle settings
   
    EEPROM.write(THROT_EEPROM_FORWARD_LO,0xD0);
     fb6:	60 ed       	ldi	r22, 0xD0	; 208
     fb8:	83 e0       	ldi	r24, 0x03	; 3
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	ce de       	rcall	.-612    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:223
    EEPROM.write(THROT_EEPROM_FORWARD_HI,0x07); // 0x7D0 = 2000 (us)
     fbe:	67 e0       	ldi	r22, 0x07	; 7
     fc0:	84 e0       	ldi	r24, 0x04	; 4
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	ca de       	rcall	.-620    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:224
    EEPROM.write(THROT_EEPROM_NEUTRAL_LO,0xDC);
     fc6:	6c ed       	ldi	r22, 0xDC	; 220
     fc8:	85 e0       	ldi	r24, 0x05	; 5
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	c6 de       	rcall	.-628    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:225
    EEPROM.write(THROT_EEPROM_NEUTRAL_HI,0x05); // 0x5DC = 1500 (us)
     fce:	65 e0       	ldi	r22, 0x05	; 5
     fd0:	86 e0       	ldi	r24, 0x06	; 6
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	c2 de       	rcall	.-636    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:226
    EEPROM.write(THROT_EEPROM_REVERSE_LO,0xE8);
     fd6:	68 ee       	ldi	r22, 0xE8	; 232
     fd8:	87 e0       	ldi	r24, 0x07	; 7
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	be de       	rcall	.-644    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:227
    EEPROM.write(THROT_EEPROM_REVERSE_HI,0x03); // 0x3E8 = 1000 (us)
     fde:	63 e0       	ldi	r22, 0x03	; 3
     fe0:	88 e0       	ldi	r24, 0x08	; 8
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	ba de       	rcall	.-652    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:228
    EEPROM.write(THROT_EEPROM_DIRECTION,NORMAL_THROT);
     fe6:	64 e3       	ldi	r22, 0x34	; 52
     fe8:	89 e0       	ldi	r24, 0x09	; 9
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	b6 de       	rcall	.-660    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:229
    EEPROM.write(E_INIT,'T');
     fee:	64 e5       	ldi	r22, 0x54	; 84
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	b2 de       	rcall	.-668    	; 0xd5a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:231
    //A little LED flash or 4 to indicate settings reset
    BlinkLED(4, 700, 300);
     ff6:	4c e2       	ldi	r20, 0x2C	; 44
     ff8:	51 e0       	ldi	r21, 0x01	; 1
     ffa:	6c eb       	ldi	r22, 0xBC	; 188
     ffc:	72 e0       	ldi	r23, 0x02	; 2
     ffe:	84 e0       	ldi	r24, 0x04	; 4
    1000:	54 dc       	rcall	.-1880   	; 0x8aa <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:232
}
    1002:	08 95       	ret

00001004 <EEPROMClass::read(int) [clone .isra.0]>:
operator*():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1004:	ce c6       	rjmp	.+3484   	; 0x1da2 <eeprom_read_byte>

00001006 <RecallSettings()>:
RecallSettings():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:186
 * Function to recall all settings from EEPROM and initilise the global variables.
 *  Easier to do this as I only have to concatenate two
 * bytes from EEPROM once. If read from EEPROM, would do this every time around loop.
 */
byte RecallSettings(void)
{
    1006:	cf 93       	push	r28
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:189
      byte LimLo,LimHi;
      
      LimLo=EEPROM.read(HORN_EEPROM_LO);
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	fb df       	rcall	.-10     	; 0x1004 <EEPROMClass::read(int) [clone .isra.0]>
    100e:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:190
      LimHi=EEPROM.read(HORN_EEPROM_HI);
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	f7 df       	rcall	.-18     	; 0x1004 <EEPROMClass::read(int) [clone .isra.0]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:191
      HornPulseLimit=LimHi<<8 | LimLo;
    1016:	98 2f       	mov	r25, r24
    1018:	8c 2f       	mov	r24, r28
    101a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <HornPulseLimit+0x1>
    101e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <HornPulseLimit>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:192
      HornGreatOrLessThan=EEPROM.read(HORN_EEPROM_GT_LT);
    1022:	82 e0       	ldi	r24, 0x02	; 2
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	ee df       	rcall	.-36     	; 0x1004 <EEPROMClass::read(int) [clone .isra.0]>
    1028:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <HornGreatOrLessThan>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:194
      //Now read the throttle settings from EEPROM
      LimLo=EEPROM.read(THROT_EEPROM_FORWARD_LO);
    102c:	83 e0       	ldi	r24, 0x03	; 3
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	e9 df       	rcall	.-46     	; 0x1004 <EEPROMClass::read(int) [clone .isra.0]>
    1032:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:195
      LimHi=EEPROM.read(THROT_EEPROM_FORWARD_HI);
    1034:	84 e0       	ldi	r24, 0x04	; 4
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	e5 df       	rcall	.-54     	; 0x1004 <EEPROMClass::read(int) [clone .isra.0]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:196
      ForwardThrot=LimHi<<8 | LimLo;
    103a:	98 2f       	mov	r25, r24
    103c:	8c 2f       	mov	r24, r28
    103e:	90 93 fe 00 	sts	0x00FE, r25	; 0x8000fe <ForwardThrot+0x1>
    1042:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <ForwardThrot>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:197
      LimLo=EEPROM.read(THROT_EEPROM_NEUTRAL_LO);
    1046:	85 e0       	ldi	r24, 0x05	; 5
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	dc df       	rcall	.-72     	; 0x1004 <EEPROMClass::read(int) [clone .isra.0]>
    104c:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:198
      LimHi=EEPROM.read(THROT_EEPROM_NEUTRAL_HI);
    104e:	86 e0       	ldi	r24, 0x06	; 6
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	d8 df       	rcall	.-80     	; 0x1004 <EEPROMClass::read(int) [clone .isra.0]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:199
      NeutralThrot=LimHi<<8 | LimLo;
    1054:	98 2f       	mov	r25, r24
    1056:	8c 2f       	mov	r24, r28
    1058:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <NeutralThrot+0x1>
    105c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <NeutralThrot>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:200
      LimLo=EEPROM.read(THROT_EEPROM_REVERSE_LO);
    1060:	87 e0       	ldi	r24, 0x07	; 7
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	cf df       	rcall	.-98     	; 0x1004 <EEPROMClass::read(int) [clone .isra.0]>
    1066:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:201
      LimHi=EEPROM.read(THROT_EEPROM_REVERSE_HI);
    1068:	88 e0       	ldi	r24, 0x08	; 8
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	cb df       	rcall	.-106    	; 0x1004 <EEPROMClass::read(int) [clone .isra.0]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:202
      ReverseThrot=LimHi<<8 | LimLo;     
    106e:	98 2f       	mov	r25, r24
    1070:	8c 2f       	mov	r24, r28
    1072:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <ReverseThrot+0x1>
    1076:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <ReverseThrot>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:203
      ThrotNormReverse=EEPROM.read(THROT_EEPROM_DIRECTION);
    107a:	89 e0       	ldi	r24, 0x09	; 9
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	c2 df       	rcall	.-124    	; 0x1004 <EEPROMClass::read(int) [clone .isra.0]>
    1080:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ThrotNormReverse>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:204
}
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <__vector_7>:
__vector_7():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:90
//rename the vector so we can use it.
  #define ANALOG_COMP_vect ANA_COMP_vect
#elif !defined (ANALOG_COMP_vect)
  #error Tiny Software Serial cannot find the Analog comparator interrupt vector!
#endif
ISR(ANALOG_COMP_vect){
    1088:	1f 92       	push	r1
    108a:	0f 92       	push	r0
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	0f 92       	push	r0
    1090:	11 24       	eor	r1, r1
    1092:	2f 93       	push	r18
    1094:	3f 93       	push	r19
    1096:	4f 93       	push	r20
    1098:	5f 93       	push	r21
    109a:	7f 93       	push	r23
    109c:	8f 93       	push	r24
    109e:	9f 93       	push	r25
    10a0:	af 93       	push	r26
    10a2:	bf 93       	push	r27
    10a4:	ef 93       	push	r30
    10a6:	ff 93       	push	r31
getch():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:70
      [mask] "r" (Serial._rxmask)
    :
      "r23",
      "r24",
      "r25"
    );
    10a8:	40 91 50 01 	lds	r20, 0x0150	; 0x800150 <Serial+0xc>
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	38 e0       	ldi	r19, 0x08	; 8
    10b0:	35 d0       	rcall	.+106    	; 0x111c <uartDelay>
    10b2:	34 d0       	rcall	.+104    	; 0x111c <uartDelay>
    10b4:	33 d0       	rcall	.+102    	; 0x111c <uartDelay>
    10b6:	32 d0       	rcall	.+100    	; 0x111c <uartDelay>
    10b8:	31 d0       	rcall	.+98     	; 0x111c <uartDelay>
    10ba:	88 94       	clc
    10bc:	76 b3       	in	r23, 0x16	; 22
    10be:	74 23       	and	r23, r20
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <__vector_7+0x3c>
    10c2:	08 94       	sec
    10c4:	27 95       	ror	r18
    10c6:	3a 95       	dec	r19
    10c8:	09 f0       	breq	.+2      	; 0x10cc <__vector_7+0x44>
    10ca:	f3 cf       	rjmp	.-26     	; 0x10b2 <__vector_7+0x2a>
    10cc:	27 d0       	rcall	.+78     	; 0x111c <uartDelay>
    10ce:	26 d0       	rcall	.+76     	; 0x111c <uartDelay>
__vector_7():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:92
#elif !defined (ANALOG_COMP_vect)
  #error Tiny Software Serial cannot find the Analog comparator interrupt vector!
#endif
ISR(ANALOG_COMP_vect){
  char ch = getch(); //read in the character softwarily - I know its not a word, but it sounded cool, so you know what: #define softwarily 1
  store_char(ch, Serial._rx_buffer);
    10d0:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <Serial+0xf>
    10d4:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <Serial+0x10>
store_char():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:167
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
}

void store_char(unsigned char c, soft_ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    10d8:	80 a1       	ldd	r24, Z+32	; 0x20
    10da:	91 a1       	ldd	r25, Z+33	; 0x21
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	8f 71       	andi	r24, 0x1F	; 31
    10e0:	99 27       	eor	r25, r25
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:173

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    10e2:	42 a1       	ldd	r20, Z+34	; 0x22
    10e4:	53 a1       	ldd	r21, Z+35	; 0x23
    10e6:	84 17       	cp	r24, r20
    10e8:	95 07       	cpc	r25, r21
    10ea:	39 f0       	breq	.+14     	; 0x10fa <__vector_7+0x72>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:174
    buffer->buffer[buffer->head] = c;
    10ec:	a0 a1       	ldd	r26, Z+32	; 0x20
    10ee:	b1 a1       	ldd	r27, Z+33	; 0x21
    10f0:	ae 0f       	add	r26, r30
    10f2:	bf 1f       	adc	r27, r31
    10f4:	2c 93       	st	X, r18
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:175
    buffer->head = i;
    10f6:	91 a3       	std	Z+33, r25	; 0x21
    10f8:	80 a3       	std	Z+32, r24	; 0x20
__vector_7():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:93
  #error Tiny Software Serial cannot find the Analog comparator interrupt vector!
#endif
ISR(ANALOG_COMP_vect){
  char ch = getch(); //read in the character softwarily - I know its not a word, but it sounded cool, so you know what: #define softwarily 1
  store_char(ch, Serial._rx_buffer);
  sbi(ACSR,ACI); //clear the flag.
    10fa:	44 9a       	sbi	0x08, 4	; 8
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:94
}
    10fc:	ff 91       	pop	r31
    10fe:	ef 91       	pop	r30
    1100:	bf 91       	pop	r27
    1102:	af 91       	pop	r26
    1104:	9f 91       	pop	r25
    1106:	8f 91       	pop	r24
    1108:	7f 91       	pop	r23
    110a:	5f 91       	pop	r21
    110c:	4f 91       	pop	r20
    110e:	3f 91       	pop	r19
    1110:	2f 91       	pop	r18
    1112:	0f 90       	pop	r0
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	0f 90       	pop	r0
    1118:	1f 90       	pop	r1
    111a:	18 95       	reti

0000111c <uartDelay>:
uartDelay():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/TinySoftwareSerial.cpp:81
    "mov r25,%[count]\n"
    "1:dec r25\n"
      "brne 1b\n"
      "ret\n"
    ::[count] "r" ((uint8_t)Serial._delayCount)
  );
    111c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <Serial+0x11>
    1120:	98 2f       	mov	r25, r24
    1122:	9a 95       	dec	r25
    1124:	f1 f7       	brne	.-4      	; 0x1122 <uartDelay+0x6>
    1126:	08 95       	ret

00001128 <__vector_5>:
__vector_5():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:308
      #error "cannot find Millis() timer overflow vector"
    #endif
  #else
    #error "Millis() timer not defined!"
  #endif
  {
    1128:	1f 92       	push	r1
    112a:	0f 92       	push	r0
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	0f 92       	push	r0
    1130:	11 24       	eor	r1, r1
    1132:	2f 93       	push	r18
    1134:	3f 93       	push	r19
    1136:	8f 93       	push	r24
    1138:	9f 93       	push	r25
    113a:	af 93       	push	r26
    113c:	bf 93       	push	r27
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:311
    // copy these to local variables so they can be stored in registers
    // (volatile variables must be read from memory on every access)
    unsigned long m = millis_timer_millis;
    113e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <millis_timer_millis>
    1142:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <millis_timer_millis+0x1>
    1146:	a0 91 f3 00 	lds	r26, 0x00F3	; 0x8000f3 <millis_timer_millis+0x2>
    114a:	b0 91 f4 00 	lds	r27, 0x00F4	; 0x8000f4 <millis_timer_millis+0x3>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:312
    unsigned char f = millis_timer_fract;
    114e:	30 91 f0 00 	lds	r19, 0x00F0	; 0x8000f0 <millis_timer_fract>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:319
    static unsigned char correct_exact = 0;     // rollover intended
    if (++correct_exact < CORRECT_EXACT_MANY) {
      ++f;
    }
#endif
    f += FRACT_INC;
    1152:	23 e0       	ldi	r18, 0x03	; 3
    1154:	23 0f       	add	r18, r19
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:321

    if (f >= FRACT_MAX)
    1156:	2d 37       	cpi	r18, 0x7D	; 125
    1158:	68 f1       	brcs	.+90     	; 0x11b4 <__vector_5+0x8c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:323
    {
      f -= FRACT_MAX;
    115a:	26 e8       	ldi	r18, 0x86	; 134
    115c:	23 0f       	add	r18, r19
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:324
      m += MILLIS_INC + 1;
    115e:	02 96       	adiw	r24, 0x02	; 2
    1160:	a1 1d       	adc	r26, r1
    1162:	b1 1d       	adc	r27, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:331
    else
    {
      m += MILLIS_INC;
    }

    millis_timer_fract = f;
    1164:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <millis_timer_fract>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:332
    millis_timer_millis = m;
    1168:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <millis_timer_millis>
    116c:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <millis_timer_millis+0x1>
    1170:	a0 93 f3 00 	sts	0x00F3, r26	; 0x8000f3 <millis_timer_millis+0x2>
    1174:	b0 93 f4 00 	sts	0x00F4, r27	; 0x8000f4 <millis_timer_millis+0x3>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:334
#ifndef CORRECT_EXACT_MICROS
    millis_timer_overflow_count++;
    1178:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <millis_timer_overflow_count>
    117c:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <millis_timer_overflow_count+0x1>
    1180:	a0 91 f7 00 	lds	r26, 0x00F7	; 0x8000f7 <millis_timer_overflow_count+0x2>
    1184:	b0 91 f8 00 	lds	r27, 0x00F8	; 0x8000f8 <millis_timer_overflow_count+0x3>
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	a1 1d       	adc	r26, r1
    118c:	b1 1d       	adc	r27, r1
    118e:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <millis_timer_overflow_count>
    1192:	90 93 f6 00 	sts	0x00F6, r25	; 0x8000f6 <millis_timer_overflow_count+0x1>
    1196:	a0 93 f7 00 	sts	0x00F7, r26	; 0x8000f7 <millis_timer_overflow_count+0x2>
    119a:	b0 93 f8 00 	sts	0x00F8, r27	; 0x8000f8 <millis_timer_overflow_count+0x3>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:336
#endif
  }
    119e:	bf 91       	pop	r27
    11a0:	af 91       	pop	r26
    11a2:	9f 91       	pop	r25
    11a4:	8f 91       	pop	r24
    11a6:	3f 91       	pop	r19
    11a8:	2f 91       	pop	r18
    11aa:	0f 90       	pop	r0
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	0f 90       	pop	r0
    11b0:	1f 90       	pop	r1
    11b2:	18 95       	reti
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:328
      f -= FRACT_MAX;
      m += MILLIS_INC + 1;
    }
    else
    {
      m += MILLIS_INC;
    11b4:	01 96       	adiw	r24, 0x01	; 1
    11b6:	a1 1d       	adc	r26, r1
    11b8:	b1 1d       	adc	r27, r1
    11ba:	d4 cf       	rjmp	.-88     	; 0x1164 <__vector_5+0x3c>

000011bc <__vector_2>:
__vector_2():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkTinyPinChange/TinyPinChange.cpp:57
	{																													\
		PinChange.Port[VirtualPortIdx].Isr[Idx]();																		\
	}																													\
}

DECLARE_PIN_CHANGE_ISR(0)
    11bc:	1f 92       	push	r1
    11be:	0f 92       	push	r0
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	0f 92       	push	r0
    11c4:	11 24       	eor	r1, r1
    11c6:	2f 93       	push	r18
    11c8:	3f 93       	push	r19
    11ca:	4f 93       	push	r20
    11cc:	5f 93       	push	r21
    11ce:	6f 93       	push	r22
    11d0:	7f 93       	push	r23
    11d2:	8f 93       	push	r24
    11d4:	9f 93       	push	r25
    11d6:	af 93       	push	r26
    11d8:	bf 93       	push	r27
    11da:	cf 93       	push	r28
    11dc:	ef 93       	push	r30
    11de:	ff 93       	push	r31
    11e0:	86 b3       	in	r24, 0x16	; 22
    11e2:	95 b3       	in	r25, 0x15	; 21
    11e4:	89 23       	and	r24, r25
    11e6:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <PinChange+0x9>
    11ea:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <PinChange+0x8>
    11ee:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <PinChange+0x9>
    11f2:	89 27       	eor	r24, r25
    11f4:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <PinChange+0x7>
    11f8:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <PinChange+0x9>
    11fc:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <PinChange+0x8>
    1200:	c0 e0       	ldi	r28, 0x00	; 0
    1202:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <PinChange+0x6>
    1206:	c8 17       	cp	r28, r24
    1208:	60 f4       	brcc	.+24     	; 0x1222 <__vector_2+0x66>
    120a:	ec 2f       	mov	r30, r28
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	ee 0f       	add	r30, r30
    1210:	ff 1f       	adc	r31, r31
    1212:	ea 5a       	subi	r30, 0xAA	; 170
    1214:	fe 4f       	sbci	r31, 0xFE	; 254
    1216:	01 90       	ld	r0, Z+
    1218:	f0 81       	ld	r31, Z
    121a:	e0 2d       	mov	r30, r0
    121c:	09 95       	icall
    121e:	cf 5f       	subi	r28, 0xFF	; 255
    1220:	f0 cf       	rjmp	.-32     	; 0x1202 <__vector_2+0x46>
    1222:	ff 91       	pop	r31
    1224:	ef 91       	pop	r30
    1226:	cf 91       	pop	r28
    1228:	bf 91       	pop	r27
    122a:	af 91       	pop	r26
    122c:	9f 91       	pop	r25
    122e:	8f 91       	pop	r24
    1230:	7f 91       	pop	r23
    1232:	6f 91       	pop	r22
    1234:	5f 91       	pop	r21
    1236:	4f 91       	pop	r20
    1238:	3f 91       	pop	r19
    123a:	2f 91       	pop	r18
    123c:	0f 90       	pop	r0
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	0f 90       	pop	r0
    1242:	1f 90       	pop	r1
    1244:	18 95       	reti

00001246 <countPulseASM>:
countPulseASM():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:70

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
    1246:	cf 92       	push	r12
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:71
    push r13   ;   ;  131 pushqi1/1 [length = 1]
    1248:	df 92       	push	r13
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:72
    push r14   ;   ;  132 pushqi1/1 [length = 1]
    124a:	ef 92       	push	r14
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:73
    push r15   ;   ;  133 pushqi1/1 [length = 1]
    124c:	ff 92       	push	r15
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:74
    push r16   ;   ;  134 pushqi1/1 [length = 1]
    124e:	0f 93       	push	r16
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:75
    push r17   ;   ;  135 pushqi1/1 [length = 1]
    1250:	1f 93       	push	r17
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:80
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
    1252:	e8 2f       	mov	r30, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:81
    mov r31,r25  ;  port, port
    1254:	f9 2f       	mov	r31, r25
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:87
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
    1256:	08 c0       	rjmp	.+16     	; 0x1268 <countPulseASM+0x22>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:91
.L4:
/*         if (--maxloops == 0) */
.LM2:
    rjmp .LM2A ; waste an extra 5 cycles
    1258:	00 c0       	rjmp	.+0      	; 0x125a <countPulseASM+0x14>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:93
.LM2A:
    rjmp .LM2B ;
    125a:	00 c0       	rjmp	.+0      	; 0x125c <countPulseASM+0x16>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:95
.LM2B:
    nop ;
    125c:	00 00       	nop
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:96
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
    125e:	01 50       	subi	r16, 0x01	; 1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:97
    sbc r17, r1   ;  maxloops
    1260:	11 09       	sbc	r17, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:98
    sbc r18, r1   ;  maxloops
    1262:	21 09       	sbc	r18, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:99
    sbc r19, r1   ;  maxloops
    1264:	31 09       	sbc	r19, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:100
    breq .L13  ; ,   ;  19  branch  [length = 1]
    1266:	49 f1       	breq	.+82     	; 0x12ba <countPulseASM+0x74>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:104
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
    1268:	90 81       	ld	r25, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:105
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
    126a:	96 23       	and	r25, r22
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:106
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
    126c:	94 17       	cp	r25, r20
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:107
    breq .L4   ; ,   ;  26  branch  [length = 1]
    126e:	a1 f3       	breq	.-24     	; 0x1258 <countPulseASM+0x12>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:108
    rjmp .L6   ;   ;  184 jump  [length = 1]
    1270:	08 c0       	rjmp	.+16     	; 0x1282 <countPulseASM+0x3c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:117
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    rjmp .LM4A ; waste an extra 5 cycles
    1272:	00 c0       	rjmp	.+0      	; 0x1274 <countPulseASM+0x2e>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:119
.LM4A:
    rjmp .LM4B ;
    1274:	00 c0       	rjmp	.+0      	; 0x1276 <countPulseASM+0x30>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:121
.LM4B:
    nop ;
    1276:	00 00       	nop
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:122
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
    1278:	01 50       	subi	r16, 0x01	; 1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:123
    sbc r17, r1   ;  maxloops
    127a:	11 09       	sbc	r17, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:124
    sbc r18, r1   ;  maxloops
    127c:	21 09       	sbc	r18, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:125
    sbc r19, r1   ;  maxloops
    127e:	31 09       	sbc	r19, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:126
    breq .L13  ; ,   ;  33  branch  [length = 1]
    1280:	e1 f0       	breq	.+56     	; 0x12ba <countPulseASM+0x74>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:130
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
    1282:	90 81       	ld	r25, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:131
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
    1284:	96 23       	and	r25, r22
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:132
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
    1286:	94 13       	cpse	r25, r20
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:133
    rjmp .L7   ;
    1288:	f4 cf       	rjmp	.-24     	; 0x1272 <countPulseASM+0x2c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:134
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
    128a:	c1 2c       	mov	r12, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:135
    mov r13, r1   ;  width
    128c:	d1 2c       	mov	r13, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:136
    mov r14, r1   ;  width
    128e:	e1 2c       	mov	r14, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:137
    mov r15, r1   ;  width
    1290:	f1 2c       	mov	r15, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:138
    rjmp .L9   ;   ;  186 jump  [length = 1]
    1292:	0a c0       	rjmp	.+20     	; 0x12a8 <countPulseASM+0x62>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:147
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
    1294:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:148
    sub r12,r24  ;  width,
    1296:	c8 1a       	sub	r12, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:149
    sbc r13,r24  ;  width,
    1298:	d8 0a       	sbc	r13, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:150
    sbc r14,r24  ;  width,
    129a:	e8 0a       	sbc	r14, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:151
    sbc r15,r24  ;  width,
    129c:	f8 0a       	sbc	r15, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:152
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
    129e:	0c 15       	cp	r16, r12
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:153
    cpc r17,r13  ;  maxloops, width
    12a0:	1d 05       	cpc	r17, r13
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:154
    cpc r18,r14  ;  maxloops, width
    12a2:	2e 05       	cpc	r18, r14
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:155
    cpc r19,r15  ;  maxloops, width
    12a4:	3f 05       	cpc	r19, r15
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:156
    breq .L13  ; ,   ;  52  branch  [length = 1]
    12a6:	49 f0       	breq	.+18     	; 0x12ba <countPulseASM+0x74>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:160
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
    12a8:	80 81       	ld	r24, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:161
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
    12aa:	86 23       	and	r24, r22
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:162
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
    12ac:	84 17       	cp	r24, r20
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:163
    breq .L10  ; ,   ;  64  branch  [length = 1]
    12ae:	91 f3       	breq	.-28     	; 0x1294 <countPulseASM+0x4e>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:169
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
    12b0:	6c 2d       	mov	r22, r12
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:170
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
    12b2:	7d 2d       	mov	r23, r13
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:171
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
    12b4:	8e 2d       	mov	r24, r14
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:172
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
    12b6:	9f 2d       	mov	r25, r15
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:173
    rjmp .LM11 ;
    12b8:	04 c0       	rjmp	.+8      	; 0x12c2 <countPulseASM+0x7c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:177
/* epilogue start */
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
    12ba:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:178
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
    12bc:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:179
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
    12be:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:180
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
    12c0:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:183
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
    12c2:	1f 91       	pop	r17
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:184
    pop r16  ;   ;  139 popqi [length = 1]
    12c4:	0f 91       	pop	r16
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:185
    pop r15  ;   ;  140 popqi [length = 1]
    12c6:	ff 90       	pop	r15
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:186
    pop r14  ;   ;  141 popqi [length = 1]
    12c8:	ef 90       	pop	r14
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:187
    pop r13  ;   ;  142 popqi [length = 1]
    12ca:	df 90       	pop	r13
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:188
    pop r12  ;   ;  143 popqi [length = 1]
    12cc:	cf 90       	pop	r12
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:189
    ret  ;  144 return_from_epilogue  [length = 1]
    12ce:	08 95       	ret

000012d0 <global constructors keyed to 65535_0_RCSounds_V1.2_test.ino.cpp.o.2352>:
_GLOBAL__I_65535_0_RCSounds_V1.2_test.ino.cpp.o.2352():
    12d0:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <Serial+0x3>
    12d4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <Serial+0x2>
    12d8:	88 ee       	ldi	r24, 0xE8	; 232
    12da:	93 e0       	ldi	r25, 0x03	; 3
    12dc:	a0 e0       	ldi	r26, 0x00	; 0
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <Serial+0x4>
    12e4:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <Serial+0x5>
    12e8:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <Serial+0x6>
    12ec:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <Serial+0x7>
    12f0:	2a e7       	ldi	r18, 0x7A	; 122
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <Serial+0x1>
    12f8:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <Serial>
    12fc:	20 e2       	ldi	r18, 0x20	; 32
    12fe:	31 e0       	ldi	r19, 0x01	; 1
    1300:	30 93 54 01 	sts	0x0154, r19	; 0x800154 <Serial+0x10>
    1304:	20 93 53 01 	sts	0x0153, r18	; 0x800153 <Serial+0xf>
    1308:	22 e0       	ldi	r18, 0x02	; 2
    130a:	20 93 50 01 	sts	0x0150, r18	; 0x800150 <Serial+0xc>
    130e:	21 e0       	ldi	r18, 0x01	; 1
    1310:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <Serial+0xd>
    1314:	2e ef       	ldi	r18, 0xFE	; 254
    1316:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <Serial+0xe>
    131a:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <Serial+0x11>
    131e:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <mySerial+0x3>
    1322:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <mySerial+0x2>
    1326:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <mySerial+0x4>
    132a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <mySerial+0x5>
    132e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <mySerial+0x6>
    1332:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <mySerial+0x7>
    1336:	8a e8       	ldi	r24, 0x8A	; 138
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <mySerial+0x1>
    133e:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <mySerial>
    1342:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <mySerial+0x14>
    1346:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <mySerial+0x13>
    134a:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <mySerial+0x16>
    134e:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <mySerial+0x15>
    1352:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <mySerial+0x18>
    1356:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <mySerial+0x17>
    135a:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <mySerial+0x1a>
    135e:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <mySerial+0x19>
    1362:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <mySerial+0x1b>
    1366:	8e 7f       	andi	r24, 0xFE	; 254
    1368:	8d 7f       	andi	r24, 0xFD	; 253
    136a:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <mySerial+0x1b>
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	84 e0       	ldi	r24, 0x04	; 4
    1372:	c7 da       	rcall	.-2674   	; 0x902 <pinMode>
    1374:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <mySerial+0x1b>
    1378:	81 fd       	sbrc	r24, 1
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <global constructors keyed to 65535_0_RCSounds_V1.2_test.ino.cpp.o.2352+0xb2>
    137c:	61 e0       	ldi	r22, 0x01	; 1
    137e:	84 e0       	ldi	r24, 0x04	; 4
    1380:	58 da       	rcall	.-2896   	; 0x832 <digitalWrite>
    1382:	84 e0       	ldi	r24, 0x04	; 4
    1384:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <mySerial+0xc>
    1388:	80 e1       	ldi	r24, 0x10	; 16
    138a:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <mySerial+0xd>
    138e:	86 e3       	ldi	r24, 0x36	; 54
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <mySerial+0xf>
    1396:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <mySerial+0xe>
    139a:	88 e0       	ldi	r24, 0x08	; 8
    139c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <mySerial+0x10>
    13a0:	61 e0       	ldi	r22, 0x01	; 1
    13a2:	83 e0       	ldi	r24, 0x03	; 3
    13a4:	ae da       	rcall	.-2724   	; 0x902 <pinMode>
    13a6:	61 e0       	ldi	r22, 0x01	; 1
    13a8:	83 e0       	ldi	r24, 0x03	; 3
    13aa:	43 da       	rcall	.-2938   	; 0x832 <digitalWrite>
    13ac:	88 e3       	ldi	r24, 0x38	; 56
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <mySerial+0x12>
    13b4:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <mySerial+0x11>
    13b8:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <PinChange>
    13bc:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <PinChange+0x1>
    13c0:	83 5c       	subi	r24, 0xC3	; 195
    13c2:	92 40       	sbci	r25, 0x02	; 2
    13c4:	11 f1       	breq	.+68     	; 0x140a <global constructors keyed to 65535_0_RCSounds_V1.2_test.ino.cpp.o.2352+0x13a>
    13c6:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <PinChange+0x2>
    13ca:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <PinChange+0x3>
    13ce:	83 5c       	subi	r24, 0xC3	; 195
    13d0:	92 40       	sbci	r25, 0x02	; 2
    13d2:	d9 f0       	breq	.+54     	; 0x140a <global constructors keyed to 65535_0_RCSounds_V1.2_test.ino.cpp.o.2352+0x13a>
    13d4:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <PinChange+0x4>
    13d8:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <PinChange+0x5>
    13dc:	83 5c       	subi	r24, 0xC3	; 195
    13de:	92 40       	sbci	r25, 0x02	; 2
    13e0:	a1 f0       	breq	.+40     	; 0x140a <global constructors keyed to 65535_0_RCSounds_V1.2_test.ino.cpp.o.2352+0x13a>
    13e2:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <PinChange+0x6>
    13e6:	83 30       	cpi	r24, 0x03	; 3
    13e8:	80 f4       	brcc	.+32     	; 0x140a <global constructors keyed to 65535_0_RCSounds_V1.2_test.ino.cpp.o.2352+0x13a>
    13ea:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <PinChange+0x6>
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	ee 0f       	add	r30, r30
    13f2:	ff 1f       	adc	r31, r31
    13f4:	ea 5a       	subi	r30, 0xAA	; 170
    13f6:	fe 4f       	sbci	r31, 0xFE	; 254
    13f8:	83 ec       	ldi	r24, 0xC3	; 195
    13fa:	92 e0       	ldi	r25, 0x02	; 2
    13fc:	91 83       	std	Z+1, r25	; 0x01
    13fe:	80 83       	st	Z, r24
    1400:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <PinChange+0x6>
    1404:	8f 5f       	subi	r24, 0xFF	; 255
    1406:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <PinChange+0x6>
    140a:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <myMP3+0x17>
    140e:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <myMP3+0x18>
    1412:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <myMP3+0x19>
    1416:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <myMP3+0x1a>
    141a:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <myMP3+0x1b>
    141e:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <myMP3+0x1c>
    1422:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <myMP3+0x1d>
    1426:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <myMP3+0x1e>
    142a:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <myMP3+0x1f>
    142e:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <myMP3+0x20>
    1432:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <myMP3+0x21>
    1436:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <myMP3+0x22>
    143a:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <myMP3+0x23>
    143e:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <myMP3+0x29>
    1442:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <myMP3+0x28>
    1446:	08 95       	ret

00001448 <main>:
init():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1138
*/

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
    #if defined(WGM01) // if Timer0 has PWM
      TCCR0A = (1<<WGM01) | (1<<WGM00);
    1448:	83 e0       	ldi	r24, 0x03	; 3
    144a:	8a bd       	out	0x2a, r24	; 42
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1141
    #endif
    #if defined(TCCR0B) //The x61 has a wacky Timer0!
      TCCR0B = (MillisTimer_Prescale_Index << CS00);
    144c:	83 bf       	out	0x33, r24	; 51
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1162
    TCCR1A = 1<<WGM10;
    TCCR1B = (1<<WGM12) | (MillisTimer_Prescale_Index << CS10);
  #endif

  // this needs to be called before setup() or some functions won't work there
  sei();
    144e:	78 94       	sei
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1167

  #ifndef DISABLEMILLIS
    // Enable the overflow interrupt (this is the basic system tic-toc for millis)
    #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK, TOIE0);
    1450:	89 b7       	in	r24, 0x39	; 57
    1452:	82 60       	ori	r24, 0x02	; 2
    1454:	89 bf       	out	0x39, r24	; 57
initToneTimerInternal():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:958
    #elif defined(__AVR_ATtiny43__)
      TCCR1A = 3; //WGM 10=1, WGM11=1
      TCCR1B = 3; //prescaler of 64
    #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1) // ATtiny x5
      // Use the Tone Timer for fast PWM as phase correct not supported by this timer
      GTCCR = (1<<PWM1B);
    1456:	80 e4       	ldi	r24, 0x40	; 64
    1458:	8c bd       	out	0x2c, r24	; 44
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:959
      OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
    145a:	8f ef       	ldi	r24, 0xFF	; 255
    145c:	8d bd       	out	0x2d, r24	; 45
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:960
      TCCR1 = (1<<CTC1) | (1<<PWM1A) | (ToneTimer_Prescale_Index << CS10);
    145e:	87 ec       	ldi	r24, 0xC7	; 199
    1460:	80 bf       	out	0x30, r24	; 48
init():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1214
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
    #if defined(ADCSRA)
      // set a2d prescale factor
      // ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
      // dude, this is being called on startup. We know that ADCSRA is 0! Why add a RMW cycle?!
      ADCSRA = (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
    1462:	87 e8       	ldi	r24, 0x87	; 135
    1464:	86 b9       	out	0x06, r24	; 6
setup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:62
 * 
 */

void setup()
{
  pinMode(LEDPIN,OUTPUT);
    1466:	61 e0       	ldi	r22, 0x01	; 1
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	4b da       	rcall	.-2922   	; 0x902 <pinMode>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:63
  digitalWrite(LEDPIN,LEDON);       // Switch LED on until MP3 initialised and playing
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	e0 d9       	rcall	.-3136   	; 0x832 <digitalWrite>
begin():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:425
// Public methods
//

void SoftSerial::begin(long speed)
{
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    1472:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <mySerial+0x1a>
    1476:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <mySerial+0x19>
    147a:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <mySerial+0x18>
    147e:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <mySerial+0x17>
    1482:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <mySerial+0x16>
    1486:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <mySerial+0x15>
    148a:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <mySerial+0x14>
    148e:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <mySerial+0x13>
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:429

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
  {
    long baud = pgm_read_dword(&table[i].baud);
    1496:	fc 01       	movw	r30, r24
    1498:	e6 5d       	subi	r30, 0xD6	; 214
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	45 91       	lpm	r20, Z+
    149e:	55 91       	lpm	r21, Z+
    14a0:	65 91       	lpm	r22, Z+
    14a2:	74 91       	lpm	r23, Z
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:430
    if (baud == speed)
    14a4:	40 38       	cpi	r20, 0x80	; 128
    14a6:	55 42       	sbci	r21, 0x25	; 37
    14a8:	61 05       	cpc	r22, r1
    14aa:	71 05       	cpc	r23, r1
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <main+0x68>
    14ae:	4e c2       	rjmp	.+1180   	; 0x194c <main+0x504>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:432
    {
      _rx_delay_centering = pgm_read_word(&table[i].rx_delay_centering);
    14b0:	fc 01       	movw	r30, r24
    14b2:	e2 5d       	subi	r30, 0xD2	; 210
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	25 91       	lpm	r18, Z+
    14b8:	34 91       	lpm	r19, Z
    14ba:	30 93 9e 01 	sts	0x019E, r19	; 0x80019e <mySerial+0x14>
    14be:	20 93 9d 01 	sts	0x019D, r18	; 0x80019d <mySerial+0x13>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:433
      _rx_delay_intrabit = pgm_read_word(&table[i].rx_delay_intrabit);
    14c2:	fc 01       	movw	r30, r24
    14c4:	e0 5d       	subi	r30, 0xD0	; 208
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	25 91       	lpm	r18, Z+
    14ca:	34 91       	lpm	r19, Z
    14cc:	30 93 a0 01 	sts	0x01A0, r19	; 0x8001a0 <mySerial+0x16>
    14d0:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <mySerial+0x15>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:434
      _rx_delay_stopbit = pgm_read_word(&table[i].rx_delay_stopbit);
    14d4:	fc 01       	movw	r30, r24
    14d6:	ee 5c       	subi	r30, 0xCE	; 206
    14d8:	ff 4f       	sbci	r31, 0xFF	; 255
    14da:	25 91       	lpm	r18, Z+
    14dc:	34 91       	lpm	r19, Z
    14de:	30 93 a2 01 	sts	0x01A2, r19	; 0x8001a2 <mySerial+0x18>
    14e2:	20 93 a1 01 	sts	0x01A1, r18	; 0x8001a1 <mySerial+0x17>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:435
      _tx_delay = pgm_read_word(&table[i].tx_delay);
    14e6:	fc 01       	movw	r30, r24
    14e8:	ec 5c       	subi	r30, 0xCC	; 204
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	85 91       	lpm	r24, Z+
    14ee:	94 91       	lpm	r25, Z
    14f0:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <mySerial+0x1a>
    14f4:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <mySerial+0x19>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:441
      break;
    }
  }

  // Set up RX interrupts, but only if we have a valid RX baud rate
  if (_rx_delay_stopbit)
    14f8:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <mySerial+0x17>
    14fc:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <mySerial+0x18>
    1500:	89 2b       	or	r24, r25
    1502:	a9 f0       	breq	.+42     	; 0x152e <main+0xe6>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:443
  {
    if (digitalPinToPCICR(_receivePin))
    1504:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <mySerial+0xc>
    1508:	96 30       	cpi	r25, 0x06	; 6
    150a:	60 f4       	brcc	.+24     	; 0x1524 <main+0xdc>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:445
    {
      *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    150c:	8b b7       	in	r24, 0x3b	; 59
    150e:	80 62       	ori	r24, 0x20	; 32
    1510:	8b bf       	out	0x3b, r24	; 59
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:446
      *digitalPinToPCMSK(_receivePin) |= _BV(digitalPinToPCMSKbit(_receivePin));
    1512:	85 b3       	in	r24, 0x15	; 21
    1514:	21 e0       	ldi	r18, 0x01	; 1
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	01 c0       	rjmp	.+2      	; 0x151c <main+0xd4>
    151a:	22 0f       	add	r18, r18
    151c:	9a 95       	dec	r25
    151e:	ea f7       	brpl	.-6      	; 0x151a <main+0xd2>
    1520:	82 2b       	or	r24, r18
    1522:	85 bb       	out	0x15, r24	; 21
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:448
    }
    tunedDelay(_tx_delay); // if we were low this establishes the end
    1524:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <mySerial+0x19>
    1528:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <mySerial+0x1a>
    152c:	25 d8       	rcall	.-4022   	; 0x578 <SoftSerial::tunedDelay(unsigned int)>
listen():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:220

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftSerial::listen()
{
  if (active_object != this)
    152e:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <SoftSerial::active_object>
    1532:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <SoftSerial::active_object+0x1>
    1536:	8a 58       	subi	r24, 0x8A	; 138
    1538:	91 40       	sbci	r25, 0x01	; 1
    153a:	91 f0       	breq	.+36     	; 0x1560 <main+0x118>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:222
  {
    _buffer_overflow = false;
    153c:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <mySerial+0x1b>
    1540:	8e 7f       	andi	r24, 0xFE	; 254
    1542:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <mySerial+0x1b>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:223
    uint8_t oldSREG = SREG;
    1546:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:224
    cli();
    1548:	f8 94       	cli
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:225
    _receive_buffer_head = _receive_buffer_tail = 0;
    154a:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <SoftSerial::_receive_buffer_tail>
    154e:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <SoftSerial::_receive_buffer_head>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:226
    active_object = this;
    1552:	2a e8       	ldi	r18, 0x8A	; 138
    1554:	31 e0       	ldi	r19, 0x01	; 1
    1556:	30 93 fc 00 	sts	0x00FC, r19	; 0x8000fc <SoftSerial::active_object+0x1>
    155a:	20 93 fb 00 	sts	0x00FB, r18	; 0x8000fb <SoftSerial::active_object>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:227
    SREG = oldSREG;
    155e:	8f bf       	out	0x3f, r24	; 63
begin():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:57
	 @return True.
 */
 /**************************************************************************/
bool DFPlayerMini_Fast::begin(Stream &stream, bool debug, unsigned long threshold)
{
	_threshold = threshold;
    1560:	84 e6       	ldi	r24, 0x64	; 100
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	a0 e0       	ldi	r26, 0x00	; 0
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <myMP3+0x24>
    156c:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <myMP3+0x25>
    1570:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <myMP3+0x26>
    1574:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <myMP3+0x27>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\FireTimer\src/FireTimer.cpp:24
 -------
  * void
*/
void FireTimer::begin(const ulong &timeout, const bool &micros)
{
	us = micros;
    1578:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <myMP3+0x17>
update():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\FireTimer\src/FireTimer.cpp:48
 -------
  * void
*/
void FireTimer::update(const ulong &timeout)
{
	period = timeout;
    157c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <myMP3+0x20>
    1580:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <myMP3+0x21>
    1584:	a0 93 82 01 	sts	0x0182, r26	; 0x800182 <myMP3+0x22>
    1588:	b0 93 83 01 	sts	0x0183, r27	; 0x800183 <myMP3+0x23>
start():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\FireTimer\src/FireTimer.cpp:75
void FireTimer::start()
{
	if (us)
		timeBench = micros();
	else
		timeBench = millis();
    158c:	7c d7       	rcall	.+3832   	; 0x2486 <__TEXT_REGION_LENGTH__+0x486>
    158e:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <myMP3+0x1c>
    1592:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <myMP3+0x1d>
    1596:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <myMP3+0x1e>
    159a:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <myMP3+0x1f>
begin():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:60
	timoutTimer.begin(_threshold);

	_serial = &stream;
    159e:	8a e8       	ldi	r24, 0x8A	; 138
    15a0:	91 e0       	ldi	r25, 0x01	; 1
    15a2:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <myMP3+0x1>
    15a6:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <myMP3>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:62

	_debug = debug;
    15aa:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <myMP3+0x16>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:64

	sendStack.start_byte = dfplayer::SB;
    15ae:	2e e7       	ldi	r18, 0x7E	; 126
    15b0:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <myMP3+0x2>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:65
	sendStack.version    = dfplayer::VER;
    15b4:	9f ef       	ldi	r25, 0xFF	; 255
    15b6:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <myMP3+0x3>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:66
	sendStack.length     = dfplayer::LEN;
    15ba:	d6 e0       	ldi	r29, 0x06	; 6
    15bc:	d0 93 64 01 	sts	0x0164, r29	; 0x800164 <myMP3+0x4>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:67
	sendStack.end_byte   = dfplayer::EB;
    15c0:	8f ee       	ldi	r24, 0xEF	; 239
    15c2:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <myMP3+0xb>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:69

	recStack.start_byte  = dfplayer::SB;
    15c6:	20 93 6c 01 	sts	0x016C, r18	; 0x80016c <myMP3+0xc>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:70
	recStack.version     = dfplayer::VER;
    15ca:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <myMP3+0xd>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:71
	recStack.length      = dfplayer::LEN;
    15ce:	d0 93 6e 01 	sts	0x016E, r29	; 0x80016e <myMP3+0xe>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:72
	recStack.end_byte    = dfplayer::EB;
    15d2:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <myMP3+0x15>
setup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:66
  mySerial.begin(9600);             // My debug software serial.
  myMP3.begin(mySerial);
  delay(1000);                      // Give it time to initialise
    15d6:	68 ee       	ldi	r22, 0xE8	; 232
    15d8:	73 e0       	ldi	r23, 0x03	; 3
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	fe d6       	rcall	.+3580   	; 0x23dc <__TEXT_REGION_LENGTH__+0x3dc>
volume():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:268
 /**************************************************************************/
void DFPlayerMini_Fast::volume(uint8_t volume)
{
	if (volume <= 30)
	{
		sendStack.commandValue  = dfplayer::VOLUME;
    15e0:	d0 93 65 01 	sts	0x0165, r29	; 0x800165 <myMP3+0x5>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:269
		sendStack.feedbackValue = dfplayer::NO_FEEDBACK;
    15e4:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <myMP3+0x6>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:270
		sendStack.paramMSB = 0;
    15e8:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <myMP3+0x7>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:271
		sendStack.paramLSB = volume;
    15ec:	8c e1       	ldi	r24, 0x1C	; 28
    15ee:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <myMP3+0x8>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:273

		findChecksum(sendStack);
    15f2:	16 d6       	rcall	.+3116   	; 0x2220 <__TEXT_REGION_LENGTH__+0x220>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:274
		sendData();
    15f4:	92 da       	rcall	.-2780   	; 0xb1a <DFPlayerMini_Fast::sendData() [clone .constprop.18]>
setup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:68
  myMP3.volume(28);                 // Maximum value without distortion
  pinMode(HORN_IN, INPUT_PULLUP); 
    15f6:	62 e0       	ldi	r22, 0x02	; 2
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	83 d9       	rcall	.-3322   	; 0x902 <pinMode>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:69
  pinMode(THROTTLE_IN,INPUT_PULLUP);
    15fc:	62 e0       	ldi	r22, 0x02	; 2
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	80 d9       	rcall	.-3328   	; 0x902 <pinMode>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:71

  Scaled_V=AvgADCRead(SELECTION_IN);
    1602:	15 d7       	rcall	.+3626   	; 0x242e <__TEXT_REGION_LENGTH__+0x42e>
    1604:	6b 01       	movw	r12, r22
    1606:	7c 01       	movw	r14, r24
    1608:	c0 92 1c 01 	sts	0x011C, r12	; 0x80011c <Scaled_V>
    160c:	d0 92 1d 01 	sts	0x011D, r13	; 0x80011d <Scaled_V+0x1>
    1610:	e0 92 1e 01 	sts	0x011E, r14	; 0x80011e <Scaled_V+0x2>
    1614:	f0 92 1f 01 	sts	0x011F, r15	; 0x80011f <Scaled_V+0x3>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:72
  if (Scaled_V>SETUP_LOWER && Scaled_V<SETUP_UPPER)
    1618:	26 e6       	ldi	r18, 0x66	; 102
    161a:	36 e6       	ldi	r19, 0x66	; 102
    161c:	46 e3       	ldi	r20, 0x36	; 54
    161e:	50 e4       	ldi	r21, 0x40	; 64
    1620:	df d3       	rcall	.+1982   	; 0x1de0 <__gesf2>
    1622:	18 16       	cp	r1, r24
    1624:	14 f5       	brge	.+68     	; 0x166a <main+0x222>
    1626:	2a e9       	ldi	r18, 0x9A	; 154
    1628:	39 e9       	ldi	r19, 0x99	; 153
    162a:	49 e4       	ldi	r20, 0x49	; 73
    162c:	50 e4       	ldi	r21, 0x40	; 64
    162e:	c7 01       	movw	r24, r14
    1630:	b6 01       	movw	r22, r12
    1632:	96 d2       	rcall	.+1324   	; 0x1b60 <__cmpsf2>
    1634:	87 ff       	sbrs	r24, 7
    1636:	19 c0       	rjmp	.+50     	; 0x166a <main+0x222>
DoSetup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:363
{
    unsigned int Timeout1=0, Timeout2=0;
    byte Dbounce1=0, Dbounce2=0;
    byte PWMAvailable=0;
    //float SetupSWVal=0.0;
    Dbounce1=ReadSetupSwitch();
    1638:	04 d8       	rcall	.-4088   	; 0x642 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:364
    Timeout1=millis(); // read current time
    163a:	25 d7       	rcall	.+3658   	; 0x2486 <__TEXT_REGION_LENGTH__+0x486>
    163c:	8b 01       	movw	r16, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:365
    BlinkLED(6,300,300);
    163e:	4c e2       	ldi	r20, 0x2C	; 44
    1640:	51 e0       	ldi	r21, 0x01	; 1
    1642:	6c e2       	ldi	r22, 0x2C	; 44
    1644:	71 e0       	ldi	r23, 0x01	; 1
    1646:	86 e0       	ldi	r24, 0x06	; 6
    1648:	30 d9       	rcall	.-3488   	; 0x8aa <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:369
    //Wait for switch release
    do
    {
        Dbounce1=ReadSetupSwitch();
    164a:	fb d7       	rcall	.+4086   	; 0x2642 <__TEXT_REGION_LENGTH__+0x642>
    164c:	d8 2f       	mov	r29, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:370
        delay(DEBOUNCETIME);
    164e:	68 ec       	ldi	r22, 0xC8	; 200
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	c2 d6       	rcall	.+3460   	; 0x23dc <__TEXT_REGION_LENGTH__+0x3dc>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:371
        Dbounce2=ReadSetupSwitch();
    1658:	f4 d7       	rcall	.+4072   	; 0x2642 <__TEXT_REGION_LENGTH__+0x642>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:372
        Timeout2=millis();
    165a:	15 d7       	rcall	.+3626   	; 0x2486 <__TEXT_REGION_LENGTH__+0x486>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:373
        if (Timeout2-Timeout1 >10000)
    165c:	60 1b       	sub	r22, r16
    165e:	71 0b       	sbc	r23, r17
    1660:	61 31       	cpi	r22, 0x11	; 17
    1662:	77 42       	sbci	r23, 0x27	; 39
    1664:	08 f4       	brcc	.+2      	; 0x1668 <main+0x220>
    1666:	78 c1       	rjmp	.+752    	; 0x1958 <main+0x510>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:378
        {
          #ifdef DEBUG
          mySerial.println(F("Reset settings in Dosetup"));
          #endif
          ResetSettings();
    1668:	9a dc       	rcall	.-1740   	; 0xf9e <ResetSettings()>
setup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:80
  }
  /*
   * See if the letter 'T' has been stored, indicating valid data has been set by the user.
   * If it has, recall the settings to globals.
   */
  if (EEPROM.read(E_INIT) == 'T')
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	91 e0       	ldi	r25, 0x01	; 1
    166e:	ca dc       	rcall	.-1644   	; 0x1004 <EEPROMClass::read(int) [clone .isra.0]>
    1670:	84 35       	cpi	r24, 0x54	; 84
    1672:	09 f0       	breq	.+2      	; 0x1676 <main+0x22e>
    1674:	87 c1       	rjmp	.+782    	; 0x1984 <main+0x53c>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:87
     RecallSettings();
     CalculateGears();
  }
  else{  /* First run through of the software, reset to default values by calling the function below */
      ResetSettings();
      RecallSettings();
    1676:	c7 dc       	rcall	.-1650   	; 0x1006 <RecallSettings()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:88
      CalculateGears();
    1678:	03 d8       	rcall	.-4090   	; 0x680 <CalculateGears()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:90
    }
    digitalWrite(LEDPIN,LEDOFF);       // Switch LED off now init is complete
    167a:	61 e0       	ldi	r22, 0x01	; 1
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	d9 d8       	rcall	.-3662   	; 0x832 <digitalWrite>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:91
    PWMFound=CheckforPWMInputs();      // Save unnecessary waits for PWM inputs later on.
    1680:	b9 d9       	rcall	.-3214   	; 0x9f4 <CheckforPWMInputs()>
    1682:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <PWMFound>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:94
    // For maintenance only and not in debug mode
    #ifndef DEBUG
    GetCurrentPWMVals();
    1686:	9c d9       	rcall	.-3272   	; 0x9c0 <GetCurrentPWMVals()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:95
    mySerial.println(F("\nEEPROM Settings:"));
    1688:	87 e9       	ldi	r24, 0x97	; 151
    168a:	91 e0       	ldi	r25, 0x01	; 1
    168c:	c6 d8       	rcall	.-3700   	; 0x81a <Print::println(__FlashStringHelper const*) [clone .constprop.12]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:96
    mySerial.print(F("Forward Throttle limit "));
    168e:	8f e7       	ldi	r24, 0x7F	; 127
    1690:	91 e0       	ldi	r25, 0x01	; 1
    1692:	a9 d8       	rcall	.-3758   	; 0x7e6 <Print::print(__FlashStringHelper const*) [clone .constprop.23]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:97
    mySerial.println(ForwardThrot);
    1694:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <ForwardThrot>
    1698:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <ForwardThrot+0x1>
    169c:	4c db       	rcall	.-2408   	; 0xd36 <Print::println(unsigned int, int) [clone .constprop.10]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:98
    mySerial.print(F("Neutral "));
    169e:	86 e7       	ldi	r24, 0x76	; 118
    16a0:	91 e0       	ldi	r25, 0x01	; 1
    16a2:	a1 d8       	rcall	.-3774   	; 0x7e6 <Print::print(__FlashStringHelper const*) [clone .constprop.23]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:99
    mySerial.println(NeutralThrot);
    16a4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <NeutralThrot>
    16a8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <NeutralThrot+0x1>
    16ac:	44 db       	rcall	.-2424   	; 0xd36 <Print::println(unsigned int, int) [clone .constprop.10]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:100
    mySerial.print(F("Reverse Throttle limit "));
    16ae:	8e e5       	ldi	r24, 0x5E	; 94
    16b0:	91 e0       	ldi	r25, 0x01	; 1
    16b2:	99 d8       	rcall	.-3790   	; 0x7e6 <Print::print(__FlashStringHelper const*) [clone .constprop.23]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:101
    mySerial.println(ReverseThrot);
    16b4:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <ReverseThrot>
    16b8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <ReverseThrot+0x1>
    16bc:	3c db       	rcall	.-2440   	; 0xd36 <Print::println(unsigned int, int) [clone .constprop.10]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:102
    mySerial.print(F("Throttle is "));
    16be:	81 e5       	ldi	r24, 0x51	; 81
    16c0:	91 e0       	ldi	r25, 0x01	; 1
    16c2:	91 d8       	rcall	.-3806   	; 0x7e6 <Print::print(__FlashStringHelper const*) [clone .constprop.23]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:103
    if (ThrotNormReverse==NORMAL_THROT)
    16c4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ThrotNormReverse>
    16c8:	84 33       	cpi	r24, 0x34	; 52
    16ca:	09 f0       	breq	.+2      	; 0x16ce <main+0x286>
    16cc:	5d c1       	rjmp	.+698    	; 0x1988 <main+0x540>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:105
    {
      mySerial.println(F("normal."));
    16ce:	89 e4       	ldi	r24, 0x49	; 73
    16d0:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:109
    }
    else
    {
      mySerial.println(F("reversed."));
    16d2:	a3 d8       	rcall	.-3770   	; 0x81a <Print::println(__FlashStringHelper const*) [clone .constprop.12]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:111
    }
    mySerial.print(F("Horn limit "));
    16d4:	83 e3       	ldi	r24, 0x33	; 51
    16d6:	91 e0       	ldi	r25, 0x01	; 1
    16d8:	86 d8       	rcall	.-3828   	; 0x7e6 <Print::print(__FlashStringHelper const*) [clone .constprop.23]>
print():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:73
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    16da:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <HornPulseLimit>
    16de:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <HornPulseLimit+0x1>
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:95
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    16e6:	2a e0       	ldi	r18, 0x0A	; 10
    16e8:	8a e8       	ldi	r24, 0x8A	; 138
    16ea:	91 e0       	ldi	r25, 0x01	; 1
    16ec:	bb d9       	rcall	.-3210   	; 0xa64 <Print::printNumber(unsigned long, unsigned char)>
setup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:113
    mySerial.print(HornPulseLimit);
    mySerial.print(F(", must be "));
    16ee:	88 e2       	ldi	r24, 0x28	; 40
    16f0:	91 e0       	ldi	r25, 0x01	; 1
    16f2:	79 d8       	rcall	.-3854   	; 0x7e6 <Print::print(__FlashStringHelper const*) [clone .constprop.23]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:114
    if (HornGreatOrLessThan == GREATERTHAN)
    16f4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <HornGreatOrLessThan>
    16f8:	83 33       	cpi	r24, 0x33	; 51
    16fa:	09 f0       	breq	.+2      	; 0x16fe <main+0x2b6>
    16fc:	48 c1       	rjmp	.+656    	; 0x198e <main+0x546>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:116
    {
      mySerial.println(F(" > to operate."));
    16fe:	89 e1       	ldi	r24, 0x19	; 25
    1700:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:120
    }
    else
    {
      mySerial.println(F(" < to operate"));
    1702:	8b d8       	rcall	.-3818   	; 0x81a <Print::println(__FlashStringHelper const*) [clone .constprop.12]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:122
    }
    mySerial.print(F("PWM detected:"));
    1704:	8d ef       	ldi	r24, 0xFD	; 253
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	6e d8       	rcall	.-3876   	; 0x7e6 <Print::print(__FlashStringHelper const*) [clone .constprop.23]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:123
    if (PWMFound==1 || PWMFound== 11)
    170a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <PWMFound>
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	11 f0       	breq	.+4      	; 0x1716 <main+0x2ce>
    1712:	8b 30       	cpi	r24, 0x0B	; 11
    1714:	59 f4       	brne	.+22     	; 0x172c <main+0x2e4>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:125
    {
      mySerial.println(F("Horn OK "));
    1716:	84 ef       	ldi	r24, 0xF4	; 244
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	7f d8       	rcall	.-3842   	; 0x81a <Print::println(__FlashStringHelper const*) [clone .constprop.12]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:126
      mySerial.print(F("Current horn "));
    171c:	86 ee       	ldi	r24, 0xE6	; 230
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	62 d8       	rcall	.-3900   	; 0x7e6 <Print::print(__FlashStringHelper const*) [clone .constprop.23]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:127
      mySerial.println(HornPWM);      
    1722:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <HornPWM>
    1726:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <HornPWM+0x1>
    172a:	05 db       	rcall	.-2550   	; 0xd36 <Print::println(unsigned int, int) [clone .constprop.10]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:129
    }
    if (PWMFound==10 || PWMFound== 11)
    172c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <PWMFound>
    1730:	8a 50       	subi	r24, 0x0A	; 10
    1732:	82 30       	cpi	r24, 0x02	; 2
    1734:	08 f0       	brcs	.+2      	; 0x1738 <main+0x2f0>
    1736:	2e c1       	rjmp	.+604    	; 0x1994 <main+0x54c>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:131
    {
      mySerial.println(F("Throttle OK "));
    1738:	89 ed       	ldi	r24, 0xD9	; 217
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	6e d8       	rcall	.-3876   	; 0x81a <Print::println(__FlashStringHelper const*) [clone .constprop.12]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:132
      mySerial.print(F("Current throttle "));
    173e:	87 ec       	ldi	r24, 0xC7	; 199
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	51 d8       	rcall	.-3934   	; 0x7e6 <Print::print(__FlashStringHelper const*) [clone .constprop.23]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:133
      mySerial.println(ThrottlePWM);
    1744:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ThrottlePWM>
    1748:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <ThrottlePWM+0x1>
    174c:	f4 da       	rcall	.-2584   	; 0xd36 <Print::println(unsigned int, int) [clone .constprop.10]>
main():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:620
                }
           
                else if ((ThrottlePosition > NeutralThrot+TimerAdjustment+GearHysteresis) && (ThrottlePosition < FirstGear-GearHysteresis))
                //if ((ThrottlePosition > NeutralThrot+TimerAdjustment) && (ThrottlePosition < FirstGear))
                {
                  return(1); // First gear
    174e:	d1 e0       	ldi	r29, 0x01	; 1
loop():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:750
          PreviousSound=CurrentSound;          
      }
      
      else if (Scaled_V>STEAM_2_LOWER && Scaled_V<STEAM_2_UPPER)
      {
          Sounds=SteamBoat2;
    1750:	83 e0       	ldi	r24, 0x03	; 3
    1752:	e8 2e       	mov	r14, r24
    1754:	f1 2c       	mov	r15, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:738
          PreviousSound=CurrentSound;
      }
  
      else if (Scaled_V>STEAM_1_LOWER && Scaled_V<STEAM_1_UPPER)
      {
          Sounds=SteamBoat1;
    1756:	92 e0       	ldi	r25, 0x02	; 2
    1758:	c9 2e       	mov	r12, r25
    175a:	d1 2c       	mov	r13, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:726
          PreviousSound=CurrentSound;
      }
      
      else if (Scaled_V>TUG_DIESEL_LOWER && Scaled_V<TUG_DIESEL_UPPER)
      {
          Sounds=TugDiesel;
    175c:	aa 24       	eor	r10, r10
    175e:	a3 94       	inc	r10
    1760:	b1 2c       	mov	r11, r1
playAdvertisement():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:188
			   The track number to play.
 */
 /**************************************************************************/
void DFPlayerMini_Fast::playAdvertisement(uint16_t trackNum)
{
	sendStack.commandValue  = dfplayer::INSERT_ADVERT;
    1762:	33 e1       	ldi	r19, 0x13	; 19
    1764:	93 2e       	mov	r9, r19
loop():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:704

void loop()
{
    //First check the switches input to know what sample to play
    
    Scaled_V=AvgADCRead(SELECTION_IN);
    1766:	63 d6       	rcall	.+3270   	; 0x242e <__TEXT_REGION_LENGTH__+0x42e>
    1768:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <Scaled_V>
    176c:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <Scaled_V+0x1>
    1770:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <Scaled_V+0x2>
    1774:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <Scaled_V+0x3>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:705
    GetCurrentPWMVals();
    1778:	23 d9       	rcall	.-3514   	; 0x9c0 <GetCurrentPWMVals()>
CheckCurrentGear():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:603
{
    byte PWMPresent;
    byte loopy;
    PWMPresent=PWMFound;	// Copy global

    if((PWMPresent==0)||(PWMPresent==1))  //Either no PWM inputs or just horn
    177a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <PWMFound>
    177e:	82 30       	cpi	r24, 0x02	; 2
    1780:	08 f4       	brcc	.+2      	; 0x1784 <main+0x33c>
    1782:	43 c1       	rjmp	.+646    	; 0x1a0a <main+0x5c2>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:609
    {
      return(0);
    }
    else
    {
       ThrottlePosition=ThrottlePWM;
    1784:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ThrottlePWM>
    1788:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <ThrottlePWM+0x1>
    178c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <NeutralThrot>
    1790:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <NeutralThrot+0x1>
    1794:	a9 01       	movw	r20, r18
    1796:	4b 51       	subi	r20, 0x1B	; 27
    1798:	51 09       	sbc	r21, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:610
        if(ThrotNormReverse==NORMAL_THROT)
    179a:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <ThrotNormReverse>
    179e:	64 33       	cpi	r22, 0x34	; 52
    17a0:	09 f0       	breq	.+2      	; 0x17a4 <main+0x35c>
    17a2:	fc c0       	rjmp	.+504    	; 0x199c <main+0x554>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:612
        {
                if ((ThrottlePosition > NeutralThrot-TimerAdjustment) && (ThrottlePosition < NeutralThrot+TimerAdjustment))
    17a4:	48 17       	cp	r20, r24
    17a6:	59 07       	cpc	r21, r25
    17a8:	38 f4       	brcc	.+14     	; 0x17b8 <main+0x370>
    17aa:	b9 01       	movw	r22, r18
    17ac:	65 5e       	subi	r22, 0xE5	; 229
    17ae:	7f 4f       	sbci	r23, 0xFF	; 255
    17b0:	86 17       	cp	r24, r22
    17b2:	97 07       	cpc	r25, r23
    17b4:	08 f4       	brcc	.+2      	; 0x17b8 <main+0x370>
    17b6:	29 c1       	rjmp	.+594    	; 0x1a0a <main+0x5c2>
    17b8:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <FirstGear>
    17bc:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <FirstGear+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:617
                {
                  return(0);  //Idle +/- timer adjustment
                }
           
                else if ((ThrottlePosition > NeutralThrot+TimerAdjustment+GearHysteresis) && (ThrottlePosition < FirstGear-GearHysteresis))
    17c0:	2b 5d       	subi	r18, 0xDB	; 219
    17c2:	3f 4f       	sbci	r19, 0xFF	; 255
    17c4:	28 17       	cp	r18, r24
    17c6:	39 07       	cpc	r19, r25
    17c8:	38 f4       	brcc	.+14     	; 0x17d8 <main+0x390>
    17ca:	9f 01       	movw	r18, r30
    17cc:	2a 50       	subi	r18, 0x0A	; 10
    17ce:	31 09       	sbc	r19, r1
    17d0:	82 17       	cp	r24, r18
    17d2:	93 07       	cpc	r25, r19
    17d4:	08 f4       	brcc	.+2      	; 0x17d8 <main+0x390>
    17d6:	1b c1       	rjmp	.+566    	; 0x1a0e <main+0x5c6>
    17d8:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <SecondGear>
    17dc:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <SecondGear+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:623
                //if ((ThrottlePosition > NeutralThrot+TimerAdjustment) && (ThrottlePosition < FirstGear))
                {
                  return(1); // First gear
                }
            
                else if((ThrottlePosition > FirstGear+GearHysteresis) && (ThrottlePosition < SecondGear-GearHysteresis))
    17e0:	3a 96       	adiw	r30, 0x0a	; 10
    17e2:	e8 17       	cp	r30, r24
    17e4:	f9 07       	cpc	r31, r25
    17e6:	38 f4       	brcc	.+14     	; 0x17f6 <main+0x3ae>
    17e8:	9b 01       	movw	r18, r22
    17ea:	2a 50       	subi	r18, 0x0A	; 10
    17ec:	31 09       	sbc	r19, r1
    17ee:	82 17       	cp	r24, r18
    17f0:	93 07       	cpc	r25, r19
    17f2:	08 f4       	brcc	.+2      	; 0x17f6 <main+0x3ae>
    17f4:	08 c1       	rjmp	.+528    	; 0x1a06 <main+0x5be>
    17f6:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <ThirdGear>
    17fa:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <ThirdGear+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:628
                {
                    return(2); // Second gear
                }

                else if((ThrottlePosition > SecondGear+GearHysteresis) && (ThrottlePosition < ThirdGear-GearHysteresis))
    17fe:	66 5f       	subi	r22, 0xF6	; 246
    1800:	7f 4f       	sbci	r23, 0xFF	; 255
    1802:	68 17       	cp	r22, r24
    1804:	79 07       	cpc	r23, r25
    1806:	38 f4       	brcc	.+14     	; 0x1816 <main+0x3ce>
    1808:	b9 01       	movw	r22, r18
    180a:	6a 50       	subi	r22, 0x0A	; 10
    180c:	71 09       	sbc	r23, r1
    180e:	86 17       	cp	r24, r22
    1810:	97 07       	cpc	r25, r23
    1812:	08 f4       	brcc	.+2      	; 0x1816 <main+0x3ce>
    1814:	fe c0       	rjmp	.+508    	; 0x1a12 <main+0x5ca>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:634
                {
                    return(3); // Third gear
                }
           
                //else if((ThrottlePosition > ThirdGear) && (ThrottlePosition < FourthGear))
                else if(ThrottlePosition > ThirdGear+GearHysteresis)
    1816:	26 5f       	subi	r18, 0xF6	; 246
    1818:	3f 4f       	sbci	r19, 0xFF	; 255
    181a:	28 17       	cp	r18, r24
    181c:	39 07       	cpc	r19, r25
    181e:	08 f4       	brcc	.+2      	; 0x1822 <main+0x3da>
    1820:	fa c0       	rjmp	.+500    	; 0x1a16 <main+0x5ce>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:639
                {
                    return(4); // Fourth gear
                }
                          
            if ((ThrottlePosition < NeutralThrot-TimerAdjustment) && (ThrottlePosition > ReverseThrot))    // Reverse always second gear
    1822:	84 17       	cp	r24, r20
    1824:	95 07       	cpc	r25, r21
    1826:	40 f4       	brcc	.+16     	; 0x1838 <main+0x3f0>
    1828:	20 91 ff 00 	lds	r18, 0x00FF	; 0x8000ff <ReverseThrot>
    182c:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <ReverseThrot+0x1>
    1830:	28 17       	cp	r18, r24
    1832:	39 07       	cpc	r19, r25
    1834:	08 f4       	brcc	.+2      	; 0x1838 <main+0x3f0>
    1836:	e7 c0       	rjmp	.+462    	; 0x1a06 <main+0x5be>
loop():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:706
{
    //First check the switches input to know what sample to play
    
    Scaled_V=AvgADCRead(SELECTION_IN);
    GetCurrentPWMVals();
    CurrentGear=CheckCurrentGear();
    1838:	c0 93 1b 01 	sts	0x011B, r28	; 0x80011b <CurrentGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:710
      //Now we now what type of sound to play and at what speed.
// Change the sample if needed

    if (AdvertPlaying==0)     // If no advert/horn then we chan change gear, else skip until finished
    183c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <AdvertPlaying>
    1840:	81 11       	cpse	r24, r1
    1842:	31 c0       	rjmp	.+98     	; 0x18a6 <main+0x45e>
    1844:	0c 2f       	mov	r16, r28
    1846:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:712
    {
      if (Scaled_V>NAVY_DIESEL_LOWER && Scaled_V<NAVY_DIESEL_UPPER)
    1848:	40 90 1c 01 	lds	r4, 0x011C	; 0x80011c <Scaled_V>
    184c:	50 90 1d 01 	lds	r5, 0x011D	; 0x80011d <Scaled_V+0x1>
    1850:	60 90 1e 01 	lds	r6, 0x011E	; 0x80011e <Scaled_V+0x2>
    1854:	70 90 1f 01 	lds	r7, 0x011F	; 0x80011f <Scaled_V+0x3>
    1858:	21 ee       	ldi	r18, 0xE1	; 225
    185a:	3a e7       	ldi	r19, 0x7A	; 122
    185c:	4c e8       	ldi	r20, 0x8C	; 140
    185e:	50 e4       	ldi	r21, 0x40	; 64
    1860:	c3 01       	movw	r24, r6
    1862:	b2 01       	movw	r22, r4
    1864:	bd d2       	rcall	.+1402   	; 0x1de0 <__gesf2>
    1866:	18 16       	cp	r1, r24
    1868:	0c f0       	brlt	.+2      	; 0x186c <main+0x424>
    186a:	d7 c0       	rjmp	.+430    	; 0x1a1a <main+0x5d2>
    186c:	2b e7       	ldi	r18, 0x7B	; 123
    186e:	34 e1       	ldi	r19, 0x14	; 20
    1870:	46 e9       	ldi	r20, 0x96	; 150
    1872:	50 e4       	ldi	r21, 0x40	; 64
    1874:	c3 01       	movw	r24, r6
    1876:	b2 01       	movw	r22, r4
    1878:	73 d1       	rcall	.+742    	; 0x1b60 <__cmpsf2>
    187a:	87 ff       	sbrs	r24, 7
    187c:	ce c0       	rjmp	.+412    	; 0x1a1a <main+0x5d2>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:714
      {
          Sounds=NavyDiesel;
    187e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1882:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:715
          CurrentSound=SpeedIndex[Sounds][CurrentGear];
    1886:	f8 01       	movw	r30, r16
    1888:	ee 59       	subi	r30, 0x9E	; 158
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	80 81       	ld	r24, Z
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:751
      }
      
      else if (Scaled_V>STEAM_2_LOWER && Scaled_V<STEAM_2_UPPER)
      {
          Sounds=SteamBoat2;
          CurrentSound=SpeedIndex[Sounds][CurrentGear];
    188e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <CurrentSound>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:753
       
          if(CurrentSound!=PreviousSound)
    1892:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <PreviousSound>
    1896:	89 17       	cp	r24, r25
    1898:	11 f0       	breq	.+4      	; 0x189e <main+0x456>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:755
          {  
              myMP3.loop(CurrentSound);
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	43 da       	rcall	.-2938   	; 0xd24 <DFPlayerMini_Fast::loop(unsigned int) [clone .constprop.13]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:757
          }
          PreviousSound=CurrentSound;      
    189e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <CurrentSound>
    18a2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <PreviousSound>
PlayHorn():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:242
*/
int PlayHorn()
{
    unsigned int HornTime;
    unsigned int TimeSinceAd;
    HornTime=HornPWM;
    18a6:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <HornPWM>
    18aa:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <HornPWM+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:243
    CurrentAdvert=SpeedIndex[Sounds][CurrentGear];
    18ae:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <CurrentGear>
    18b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    18b6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    18ba:	65 e0       	ldi	r22, 0x05	; 5
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	94 d2       	rcall	.+1320   	; 0x1de8 <__mulhi3>
    18c0:	8e 59       	subi	r24, 0x9E	; 158
    18c2:	9f 4f       	sbci	r25, 0xFF	; 255
    18c4:	e8 0f       	add	r30, r24
    18c6:	f9 2f       	mov	r31, r25
    18c8:	f1 1d       	adc	r31, r1
    18ca:	80 81       	ld	r24, Z
    18cc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <CurrentAdvert>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:245
   
    if((HornGreatOrLessThan==GREATERTHAN && HornTime > HornPulseLimit) || (HornGreatOrLessThan==LESSTHAN && HornTime < HornPulseLimit))
    18d0:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <HornGreatOrLessThan>
    18d4:	93 33       	cpi	r25, 0x33	; 51
    18d6:	09 f0       	breq	.+2      	; 0x18da <main+0x492>
    18d8:	f2 c0       	rjmp	.+484    	; 0x1abe <main+0x676>
    18da:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <HornPulseLimit>
    18de:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <HornPulseLimit+0x1>
    18e2:	42 17       	cp	r20, r18
    18e4:	53 07       	cpc	r21, r19
    18e6:	08 f4       	brcc	.+2      	; 0x18ea <main+0x4a2>
    18e8:	f5 c0       	rjmp	.+490    	; 0x1ad4 <main+0x68c>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:265
     * and reset previous advert.
     */
     /*TimeSinceAd=millis();
       if (TimeSinceAd > AdTime+ 3000)
       */
       if(millis() >(AdTime+13000))
    18ea:	cd d5       	rcall	.+2970   	; 0x2486 <__TEXT_REGION_LENGTH__+0x486>
    18ec:	ab 01       	movw	r20, r22
    18ee:	bc 01       	movw	r22, r24
    18f0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <AdTime>
    18f4:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <AdTime+0x1>
    18f8:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <AdTime+0x2>
    18fc:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <AdTime+0x3>
    1900:	88 53       	subi	r24, 0x38	; 56
    1902:	9d 4c       	sbci	r25, 0xCD	; 205
    1904:	af 4f       	sbci	r26, 0xFF	; 255
    1906:	bf 4f       	sbci	r27, 0xFF	; 255
    1908:	84 17       	cp	r24, r20
    190a:	95 07       	cpc	r25, r21
    190c:	a6 07       	cpc	r26, r22
    190e:	b7 07       	cpc	r27, r23
    1910:	08 f0       	brcs	.+2      	; 0x1914 <main+0x4cc>
    1912:	29 cf       	rjmp	.-430    	; 0x1766 <main+0x31e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:267
       {
          digitalWrite(LEDPIN,LEDOFF);  // Signal end of HORN/Advert.
    1914:	61 e0       	ldi	r22, 0x01	; 1
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	8c d7       	rcall	.+3864   	; 0x2832 <__TEXT_REGION_LENGTH__+0x832>
print():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:53
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    191a:	63 ea       	ldi	r22, 0xA3	; 163
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	8a e8       	ldi	r24, 0x8A	; 138
    1920:	91 e0       	ldi	r25, 0x01	; 1
    1922:	91 d8       	rcall	.-3806   	; 0xa46 <Print::write(char const*)>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:95
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1924:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <AdTime>
    1928:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <AdTime+0x1>
    192c:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <AdTime+0x2>
    1930:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <AdTime+0x3>
    1934:	2a e0       	ldi	r18, 0x0A	; 10
    1936:	8a e8       	ldi	r24, 0x8A	; 138
    1938:	91 e0       	ldi	r25, 0x01	; 1
    193a:	94 d8       	rcall	.-3800   	; 0xa64 <Print::printNumber(unsigned long, unsigned char)>
println():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:185
}

size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
    193c:	8a e8       	ldi	r24, 0x8A	; 138
    193e:	91 e0       	ldi	r25, 0x01	; 1
    1940:	ed d4       	rcall	.+2522   	; 0x231c <__TEXT_REGION_LENGTH__+0x31c>
PlayHorn():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:270
          mySerial.print("Advert end: ");
          mySerial.println(AdTime);
          PreviousAdvert=0;
    1942:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <PreviousAdvert>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:271
          AdvertPlaying=0;
    1946:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <AdvertPlaying>
    194a:	0d cf       	rjmp	.-486    	; 0x1766 <main+0x31e>
    194c:	0c 96       	adiw	r24, 0x0c	; 12
begin():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:427

void SoftSerial::begin(long speed)
{
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
    194e:	80 39       	cpi	r24, 0x90	; 144
    1950:	91 05       	cpc	r25, r1
    1952:	09 f0       	breq	.+2      	; 0x1956 <main+0x50e>
    1954:	a0 cd       	rjmp	.-1216   	; 0x1496 <main+0x4e>
    1956:	d0 cd       	rjmp	.-1120   	; 0x14f8 <main+0xb0>
DoSetup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:382
          #endif
          ResetSettings();
          return(77); // Exit out now.
        }
        
    }while(Dbounce1==SWITCHCLOSED && Dbounce1==SWITCHCLOSED);
    1958:	d7 37       	cpi	r29, 0x77	; 119
    195a:	09 f4       	brne	.+2      	; 0x195e <main+0x516>
    195c:	76 ce       	rjmp	.-788    	; 0x164a <main+0x202>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:384
    
    PWMAvailable=CheckforPWMInputs();
    195e:	4a d8       	rcall	.-3948   	; 0x9f4 <CheckforPWMInputs()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:386

    switch (PWMAvailable){
    1960:	8a 30       	cpi	r24, 0x0A	; 10
    1962:	39 f0       	breq	.+14     	; 0x1972 <main+0x52a>
    1964:	8b 30       	cpi	r24, 0x0B	; 11
    1966:	21 f0       	breq	.+8      	; 0x1970 <main+0x528>
    1968:	81 30       	cpi	r24, 0x01	; 1
    196a:	29 f4       	brne	.+10     	; 0x1976 <main+0x52e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:389

      case 1:             // Horn only
        DoHornSetup();
    196c:	a6 da       	rcall	.-2740   	; 0xeba <DoHornSetup()>
    196e:	7d ce       	rjmp	.-774    	; 0x166a <main+0x222>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:397
      case 10:            // ThrottleOnly
        DoThrottleSetup();
      break;
      
      case 11:            // Both
        DoHornSetup();
    1970:	a4 da       	rcall	.-2744   	; 0xeba <DoHornSetup()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:398
        DoThrottleSetup();
    1972:	f4 d9       	rcall	.-3096   	; 0xd5c <DoThrottleSetup()>
    1974:	7a ce       	rjmp	.-780    	; 0x166a <main+0x222>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:403
      break;

      case 0:               // No PWM detected so abort
      default:
            BlinkLED(6, 200, 800);
    1976:	40 e2       	ldi	r20, 0x20	; 32
    1978:	53 e0       	ldi	r21, 0x03	; 3
    197a:	68 ec       	ldi	r22, 0xC8	; 200
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	86 e0       	ldi	r24, 0x06	; 6
    1980:	94 d7       	rcall	.+3880   	; 0x28aa <__TEXT_REGION_LENGTH__+0x8aa>
    1982:	73 ce       	rjmp	.-794    	; 0x166a <main+0x222>
setup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:86
  {
     RecallSettings();
     CalculateGears();
  }
  else{  /* First run through of the software, reset to default values by calling the function below */
      ResetSettings();
    1984:	0c db       	rcall	.-2536   	; 0xf9e <ResetSettings()>
    1986:	77 ce       	rjmp	.-786    	; 0x1676 <main+0x22e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:109
    {
      mySerial.println(F("normal."));
    }
    else
    {
      mySerial.println(F("reversed."));
    1988:	8f e3       	ldi	r24, 0x3F	; 63
    198a:	91 e0       	ldi	r25, 0x01	; 1
    198c:	a2 ce       	rjmp	.-700    	; 0x16d2 <main+0x28a>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:120
    {
      mySerial.println(F(" > to operate."));
    }
    else
    {
      mySerial.println(F(" < to operate"));
    198e:	8b e0       	ldi	r24, 0x0B	; 11
    1990:	91 e0       	ldi	r25, 0x01	; 1
    1992:	b7 ce       	rjmp	.-658    	; 0x1702 <main+0x2ba>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:137
      mySerial.print(F("Current throttle "));
      mySerial.println(ThrottlePWM);
    }
    else
    {
      mySerial.println(F("No PWM found"));
    1994:	8a eb       	ldi	r24, 0xBA	; 186
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	40 d7       	rcall	.+3712   	; 0x281a <__TEXT_REGION_LENGTH__+0x81a>
    199a:	d9 ce       	rjmp	.-590    	; 0x174e <main+0x306>
CheckCurrentGear():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:647
             }
        }
    
        else  // Reversed throttle channel from receiver
        {
            if ((ThrottlePosition < NeutralThrot+TimerAdjustment) && (ThrottlePosition > NeutralThrot-TimerAdjustment))
    199c:	25 5e       	subi	r18, 0xE5	; 229
    199e:	3f 4f       	sbci	r19, 0xFF	; 255
    19a0:	82 17       	cp	r24, r18
    19a2:	93 07       	cpc	r25, r19
    19a4:	18 f4       	brcc	.+6      	; 0x19ac <main+0x564>
    19a6:	48 17       	cp	r20, r24
    19a8:	59 07       	cpc	r21, r25
    19aa:	78 f1       	brcs	.+94     	; 0x1a0a <main+0x5c2>
    19ac:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <FirstGear>
    19b0:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <FirstGear+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:651
            {
              return(0);  //Idle
            }
            if ((ThrottlePosition < NeutralThrot-TimerAdjustment) &&  (ThrottlePosition > FirstGear))
    19b4:	84 17       	cp	r24, r20
    19b6:	95 07       	cpc	r25, r21
    19b8:	18 f4       	brcc	.+6      	; 0x19c0 <main+0x578>
    19ba:	28 17       	cp	r18, r24
    19bc:	39 07       	cpc	r19, r25
    19be:	38 f1       	brcs	.+78     	; 0x1a0e <main+0x5c6>
    19c0:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <SecondGear>
    19c4:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <SecondGear+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:656
            {
                return(1);
            }
            
            else if((ThrottlePosition < FirstGear) && (ThrottlePosition > SecondGear))
    19c8:	82 17       	cp	r24, r18
    19ca:	93 07       	cpc	r25, r19
    19cc:	18 f4       	brcc	.+6      	; 0x19d4 <main+0x58c>
    19ce:	68 17       	cp	r22, r24
    19d0:	79 07       	cpc	r23, r25
    19d2:	c8 f0       	brcs	.+50     	; 0x1a06 <main+0x5be>
    19d4:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <ThirdGear>
    19d8:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <ThirdGear+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:660
            {
                return(2);
            }
            else if((ThrottlePosition < SecondGear) && (ThrottlePosition > ThirdGear))
    19dc:	86 17       	cp	r24, r22
    19de:	97 07       	cpc	r25, r23
    19e0:	18 f4       	brcc	.+6      	; 0x19e8 <main+0x5a0>
    19e2:	28 17       	cp	r18, r24
    19e4:	39 07       	cpc	r19, r25
    19e6:	a8 f0       	brcs	.+42     	; 0x1a12 <main+0x5ca>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:664
            {
                return(3);
            }
            else if(ThrottlePosition < ThirdGear)
    19e8:	82 17       	cp	r24, r18
    19ea:	93 07       	cpc	r25, r19
    19ec:	a0 f0       	brcs	.+40     	; 0x1a16 <main+0x5ce>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:668
            {
                return(4);
            }
            else if ((ThrottlePosition > NeutralThrot-TimerAdjustment) && (ThrottlePosition < ReverseThrot))    // Reverse always second gear
    19ee:	48 17       	cp	r20, r24
    19f0:	59 07       	cpc	r21, r25
    19f2:	08 f0       	brcs	.+2      	; 0x19f6 <main+0x5ae>
    19f4:	21 cf       	rjmp	.-446    	; 0x1838 <main+0x3f0>
    19f6:	20 91 ff 00 	lds	r18, 0x00FF	; 0x8000ff <ReverseThrot>
    19fa:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <ReverseThrot+0x1>
    19fe:	82 17       	cp	r24, r18
    1a00:	93 07       	cpc	r25, r19
    1a02:	08 f0       	brcs	.+2      	; 0x1a06 <main+0x5be>
    1a04:	19 cf       	rjmp	.-462    	; 0x1838 <main+0x3f0>
main():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:670
            {
                return(2); 
    1a06:	c2 e0       	ldi	r28, 0x02	; 2
    1a08:	17 cf       	rjmp	.-466    	; 0x1838 <main+0x3f0>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:605
    byte loopy;
    PWMPresent=PWMFound;	// Copy global

    if((PWMPresent==0)||(PWMPresent==1))  //Either no PWM inputs or just horn
    {
      return(0);
    1a0a:	c0 e0       	ldi	r28, 0x00	; 0
    1a0c:	15 cf       	rjmp	.-470    	; 0x1838 <main+0x3f0>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:620
                }
           
                else if ((ThrottlePosition > NeutralThrot+TimerAdjustment+GearHysteresis) && (ThrottlePosition < FirstGear-GearHysteresis))
                //if ((ThrottlePosition > NeutralThrot+TimerAdjustment) && (ThrottlePosition < FirstGear))
                {
                  return(1); // First gear
    1a0e:	c1 e0       	ldi	r28, 0x01	; 1
    1a10:	13 cf       	rjmp	.-474    	; 0x1838 <main+0x3f0>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:630
                    return(2); // Second gear
                }

                else if((ThrottlePosition > SecondGear+GearHysteresis) && (ThrottlePosition < ThirdGear-GearHysteresis))
                {
                    return(3); // Third gear
    1a12:	c3 e0       	ldi	r28, 0x03	; 3
    1a14:	11 cf       	rjmp	.-478    	; 0x1838 <main+0x3f0>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:636
                }
           
                //else if((ThrottlePosition > ThirdGear) && (ThrottlePosition < FourthGear))
                else if(ThrottlePosition > ThirdGear+GearHysteresis)
                {
                    return(4); // Fourth gear
    1a16:	c4 e0       	ldi	r28, 0x04	; 4
    1a18:	0f cf       	rjmp	.-482    	; 0x1838 <main+0x3f0>
loop():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:724
            myMP3.loop(CurrentSound);
          } 
          PreviousSound=CurrentSound;
      }
      
      else if (Scaled_V>TUG_DIESEL_LOWER && Scaled_V<TUG_DIESEL_UPPER)
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e7       	ldi	r20, 0x70	; 112
    1a20:	50 e4       	ldi	r21, 0x40	; 64
    1a22:	c3 01       	movw	r24, r6
    1a24:	b2 01       	movw	r22, r4
    1a26:	dc d1       	rcall	.+952    	; 0x1de0 <__gesf2>
    1a28:	18 16       	cp	r1, r24
    1a2a:	94 f4       	brge	.+36     	; 0x1a50 <main+0x608>
    1a2c:	2a e9       	ldi	r18, 0x9A	; 154
    1a2e:	39 e9       	ldi	r19, 0x99	; 153
    1a30:	41 e8       	ldi	r20, 0x81	; 129
    1a32:	50 e4       	ldi	r21, 0x40	; 64
    1a34:	c3 01       	movw	r24, r6
    1a36:	b2 01       	movw	r22, r4
    1a38:	93 d0       	rcall	.+294    	; 0x1b60 <__cmpsf2>
    1a3a:	87 ff       	sbrs	r24, 7
    1a3c:	09 c0       	rjmp	.+18     	; 0x1a50 <main+0x608>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:726
      {
          Sounds=TugDiesel;
    1a3e:	b0 92 61 00 	sts	0x0061, r11	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1a42:	a0 92 60 00 	sts	0x0060, r10	; 0x800060 <__DATA_REGION_ORIGIN__>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:727
          CurrentSound=SpeedIndex[Sounds][CurrentGear];
    1a46:	f8 01       	movw	r30, r16
    1a48:	ee 59       	subi	r30, 0x9E	; 158
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	85 81       	ldd	r24, Z+5	; 0x05
    1a4e:	1f cf       	rjmp	.-450    	; 0x188e <main+0x446>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:736
            myMP3.loop(CurrentSound);
          }
          PreviousSound=CurrentSound;
      }
  
      else if (Scaled_V>STEAM_1_LOWER && Scaled_V<STEAM_1_UPPER)
    1a50:	2d ec       	ldi	r18, 0xCD	; 205
    1a52:	3c ec       	ldi	r19, 0xCC	; 204
    1a54:	4c e4       	ldi	r20, 0x4C	; 76
    1a56:	50 e4       	ldi	r21, 0x40	; 64
    1a58:	c3 01       	movw	r24, r6
    1a5a:	b2 01       	movw	r22, r4
    1a5c:	c1 d1       	rcall	.+898    	; 0x1de0 <__gesf2>
    1a5e:	18 16       	cp	r1, r24
    1a60:	94 f4       	brge	.+36     	; 0x1a86 <main+0x63e>
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e6       	ldi	r20, 0x60	; 96
    1a68:	50 e4       	ldi	r21, 0x40	; 64
    1a6a:	c3 01       	movw	r24, r6
    1a6c:	b2 01       	movw	r22, r4
    1a6e:	78 d0       	rcall	.+240    	; 0x1b60 <__cmpsf2>
    1a70:	87 ff       	sbrs	r24, 7
    1a72:	09 c0       	rjmp	.+18     	; 0x1a86 <main+0x63e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:738
      {
          Sounds=SteamBoat1;
    1a74:	d0 92 61 00 	sts	0x0061, r13	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1a78:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__DATA_REGION_ORIGIN__>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:739
          CurrentSound=SpeedIndex[Sounds][CurrentGear];
    1a7c:	f8 01       	movw	r30, r16
    1a7e:	ee 59       	subi	r30, 0x9E	; 158
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	82 85       	ldd	r24, Z+10	; 0x0a
    1a84:	04 cf       	rjmp	.-504    	; 0x188e <main+0x446>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:748
              myMP3.loop(CurrentSound);
          }
          PreviousSound=CurrentSound;          
      }
      
      else if (Scaled_V>STEAM_2_LOWER && Scaled_V<STEAM_2_UPPER)
    1a86:	26 e6       	ldi	r18, 0x66	; 102
    1a88:	36 e6       	ldi	r19, 0x66	; 102
    1a8a:	46 e1       	ldi	r20, 0x16	; 22
    1a8c:	50 e4       	ldi	r21, 0x40	; 64
    1a8e:	c3 01       	movw	r24, r6
    1a90:	b2 01       	movw	r22, r4
    1a92:	a6 d1       	rcall	.+844    	; 0x1de0 <__gesf2>
    1a94:	18 16       	cp	r1, r24
    1a96:	0c f0       	brlt	.+2      	; 0x1a9a <main+0x652>
    1a98:	06 cf       	rjmp	.-500    	; 0x18a6 <main+0x45e>
    1a9a:	2a e9       	ldi	r18, 0x9A	; 154
    1a9c:	39 e9       	ldi	r19, 0x99	; 153
    1a9e:	49 e2       	ldi	r20, 0x29	; 41
    1aa0:	50 e4       	ldi	r21, 0x40	; 64
    1aa2:	c3 01       	movw	r24, r6
    1aa4:	b2 01       	movw	r22, r4
    1aa6:	5c d0       	rcall	.+184    	; 0x1b60 <__cmpsf2>
    1aa8:	87 ff       	sbrs	r24, 7
    1aaa:	fd ce       	rjmp	.-518    	; 0x18a6 <main+0x45e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:750
      {
          Sounds=SteamBoat2;
    1aac:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1ab0:	e0 92 60 00 	sts	0x0060, r14	; 0x800060 <__DATA_REGION_ORIGIN__>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:751
          CurrentSound=SpeedIndex[Sounds][CurrentGear];
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	ee 59       	subi	r30, 0x9E	; 158
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	87 85       	ldd	r24, Z+15	; 0x0f
    1abc:	e8 ce       	rjmp	.-560    	; 0x188e <main+0x446>
PlayHorn():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:245
    unsigned int HornTime;
    unsigned int TimeSinceAd;
    HornTime=HornPWM;
    CurrentAdvert=SpeedIndex[Sounds][CurrentGear];
   
    if((HornGreatOrLessThan==GREATERTHAN && HornTime > HornPulseLimit) || (HornGreatOrLessThan==LESSTHAN && HornTime < HornPulseLimit))
    1abe:	92 32       	cpi	r25, 0x22	; 34
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <main+0x67c>
    1ac2:	13 cf       	rjmp	.-474    	; 0x18ea <main+0x4a2>
    1ac4:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <HornPulseLimit>
    1ac8:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <HornPulseLimit+0x1>
    1acc:	24 17       	cp	r18, r20
    1ace:	35 07       	cpc	r19, r21
    1ad0:	08 f0       	brcs	.+2      	; 0x1ad4 <main+0x68c>
    1ad2:	0b cf       	rjmp	.-490    	; 0x18ea <main+0x4a2>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:247
    {
      if (CurrentAdvert != PreviousAdvert)
    1ad4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <PreviousAdvert>
    1ad8:	89 17       	cp	r24, r25
    1ada:	41 f1       	breq	.+80     	; 0x1b2c <main+0x6e4>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:249
      {
          myMP3.playAdvertisement(CurrentSound);
    1adc:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <CurrentSound>
playAdvertisement():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:188
    1ae0:	90 92 65 01 	sts	0x0165, r9	; 0x800165 <myMP3+0x5>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:189
	sendStack.feedbackValue = dfplayer::NO_FEEDBACK;
    1ae4:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <myMP3+0x6>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:190
	sendStack.paramMSB = (trackNum >> 8) & 0xFF;
    1ae8:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <myMP3+0x7>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:191
	sendStack.paramLSB = trackNum & 0xFF;
    1aec:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <myMP3+0x8>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:193

	findChecksum(sendStack);
    1af0:	97 d3       	rcall	.+1838   	; 0x2220 <__TEXT_REGION_LENGTH__+0x220>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\arduino_795543\src/DFPlayerMini_Fast.cpp:194
	sendData();
    1af2:	13 d8       	rcall	.-4058   	; 0xb1a <DFPlayerMini_Fast::sendData() [clone .constprop.18]>
PlayHorn():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:250
          AdvertPlaying=1;    // Used to stop advert interruption
    1af4:	d0 93 1a 01 	sts	0x011A, r29	; 0x80011a <AdvertPlaying>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:251
          AdTime=millis();
    1af8:	c6 d4       	rcall	.+2444   	; 0x2486 <__TEXT_REGION_LENGTH__+0x486>
    1afa:	2b 01       	movw	r4, r22
    1afc:	3c 01       	movw	r6, r24
    1afe:	40 92 0d 01 	sts	0x010D, r4	; 0x80010d <AdTime>
    1b02:	50 92 0e 01 	sts	0x010E, r5	; 0x80010e <AdTime+0x1>
    1b06:	60 92 0f 01 	sts	0x010F, r6	; 0x80010f <AdTime+0x2>
    1b0a:	70 92 10 01 	sts	0x0110, r7	; 0x800110 <AdTime+0x3>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:252
          mySerial.print(F("Millis start: "));
    1b0e:	89 ea       	ldi	r24, 0xA9	; 169
    1b10:	91 e0       	ldi	r25, 0x01	; 1
    1b12:	69 d6       	rcall	.+3282   	; 0x27e6 <__TEXT_REGION_LENGTH__+0x7e6>
print():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:95
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1b14:	2a e0       	ldi	r18, 0x0A	; 10
    1b16:	b3 01       	movw	r22, r6
    1b18:	a2 01       	movw	r20, r4
    1b1a:	8a e8       	ldi	r24, 0x8A	; 138
    1b1c:	91 e0       	ldi	r25, 0x01	; 1
    1b1e:	a2 d7       	rcall	.+3908   	; 0x2a64 <__TEXT_REGION_LENGTH__+0xa64>
println():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:185
}

size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
    1b20:	8a e8       	ldi	r24, 0x8A	; 138
    1b22:	91 e0       	ldi	r25, 0x01	; 1
    1b24:	fb d3       	rcall	.+2038   	; 0x231c <__TEXT_REGION_LENGTH__+0x31c>
PlayHorn():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:254
          mySerial.println(AdTime);
          digitalWrite(LEDPIN,LEDON);   // Now switch the LED on to indicate we have detected a valid input.
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	82 e0       	ldi	r24, 0x02	; 2
    1b2a:	83 d6       	rcall	.+3334   	; 0x2832 <__TEXT_REGION_LENGTH__+0x832>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:256
      }
          PreviousAdvert=CurrentAdvert;    
    1b2c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <CurrentAdvert>
    1b30:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <PreviousAdvert>
    1b34:	da ce       	rjmp	.-588    	; 0x18ea <main+0x4a2>

00001b36 <_GLOBAL__sub_D_SpeedIndex>:
__base_dtor ():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:390
}

//
// Destructor
//
SoftSerial::~SoftSerial()
    1b36:	8a e8       	ldi	r24, 0x8A	; 138
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <mySerial+0x1>
    1b3e:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <mySerial>
end():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:461
  listen();
}

void SoftSerial::end()
{
  if (digitalPinToPCMSK(_receivePin))
    1b42:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <mySerial+0xc>
    1b46:	26 30       	cpi	r18, 0x06	; 6
    1b48:	50 f4       	brcc	.+20     	; 0x1b5e <_GLOBAL__sub_D_SpeedIndex+0x28>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DigisparkSoftSerial/SoftSerial.cpp:462
    *digitalPinToPCMSK(_receivePin) &= ~_BV(digitalPinToPCMSKbit(_receivePin));
    1b4a:	35 b3       	in	r19, 0x15	; 21
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <_GLOBAL__sub_D_SpeedIndex+0x1e>
    1b52:	88 0f       	add	r24, r24
    1b54:	2a 95       	dec	r18
    1b56:	ea f7       	brpl	.-6      	; 0x1b52 <_GLOBAL__sub_D_SpeedIndex+0x1c>
    1b58:	80 95       	com	r24
    1b5a:	83 23       	and	r24, r19
    1b5c:	85 bb       	out	0x15, r24	; 21
_GLOBAL__sub_D_SpeedIndex():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds\RCSounds_V1.2_test/RCSounds_V1.2_test.ino:781
      digitalWrite(LEDPIN,LEDOFF);
      delay(offtime);
      numblinks++;
  }    
  
}
    1b5e:	08 95       	ret

00001b60 <__cmpsf2>:
__cmpsf2():
    1b60:	40 d0       	rcall	.+128    	; 0x1be2 <__fp_cmp>
    1b62:	08 f4       	brcc	.+2      	; 0x1b66 <__cmpsf2+0x6>
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	08 95       	ret

00001b68 <__floatunsisf>:
__floatunsisf():
    1b68:	e8 94       	clt
    1b6a:	09 c0       	rjmp	.+18     	; 0x1b7e <__floatsisf+0x12>

00001b6c <__floatsisf>:
    1b6c:	97 fb       	bst	r25, 7
    1b6e:	3e f4       	brtc	.+14     	; 0x1b7e <__floatsisf+0x12>
    1b70:	90 95       	com	r25
    1b72:	80 95       	com	r24
    1b74:	70 95       	com	r23
    1b76:	61 95       	neg	r22
    1b78:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7e:	99 23       	and	r25, r25
    1b80:	a9 f0       	breq	.+42     	; 0x1bac <__floatsisf+0x40>
    1b82:	f9 2f       	mov	r31, r25
    1b84:	96 e9       	ldi	r25, 0x96	; 150
    1b86:	bb 27       	eor	r27, r27
    1b88:	93 95       	inc	r25
    1b8a:	f6 95       	lsr	r31
    1b8c:	87 95       	ror	r24
    1b8e:	77 95       	ror	r23
    1b90:	67 95       	ror	r22
    1b92:	b7 95       	ror	r27
    1b94:	f1 11       	cpse	r31, r1
    1b96:	f8 cf       	rjmp	.-16     	; 0x1b88 <__floatsisf+0x1c>
    1b98:	fa f4       	brpl	.+62     	; 0x1bd8 <__floatsisf+0x6c>
    1b9a:	bb 0f       	add	r27, r27
    1b9c:	11 f4       	brne	.+4      	; 0x1ba2 <__floatsisf+0x36>
    1b9e:	60 ff       	sbrs	r22, 0
    1ba0:	1b c0       	rjmp	.+54     	; 0x1bd8 <__floatsisf+0x6c>
    1ba2:	6f 5f       	subi	r22, 0xFF	; 255
    1ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    1baa:	16 c0       	rjmp	.+44     	; 0x1bd8 <__floatsisf+0x6c>
    1bac:	88 23       	and	r24, r24
    1bae:	11 f0       	breq	.+4      	; 0x1bb4 <__floatsisf+0x48>
    1bb0:	96 e9       	ldi	r25, 0x96	; 150
    1bb2:	11 c0       	rjmp	.+34     	; 0x1bd6 <__floatsisf+0x6a>
    1bb4:	77 23       	and	r23, r23
    1bb6:	21 f0       	breq	.+8      	; 0x1bc0 <__floatsisf+0x54>
    1bb8:	9e e8       	ldi	r25, 0x8E	; 142
    1bba:	87 2f       	mov	r24, r23
    1bbc:	76 2f       	mov	r23, r22
    1bbe:	05 c0       	rjmp	.+10     	; 0x1bca <__floatsisf+0x5e>
    1bc0:	66 23       	and	r22, r22
    1bc2:	71 f0       	breq	.+28     	; 0x1be0 <__floatsisf+0x74>
    1bc4:	96 e8       	ldi	r25, 0x86	; 134
    1bc6:	86 2f       	mov	r24, r22
    1bc8:	70 e0       	ldi	r23, 0x00	; 0
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	2a f0       	brmi	.+10     	; 0x1bd8 <__floatsisf+0x6c>
    1bce:	9a 95       	dec	r25
    1bd0:	66 0f       	add	r22, r22
    1bd2:	77 1f       	adc	r23, r23
    1bd4:	88 1f       	adc	r24, r24
    1bd6:	da f7       	brpl	.-10     	; 0x1bce <__floatsisf+0x62>
    1bd8:	88 0f       	add	r24, r24
    1bda:	96 95       	lsr	r25
    1bdc:	87 95       	ror	r24
    1bde:	97 f9       	bld	r25, 7
    1be0:	08 95       	ret

00001be2 <__fp_cmp>:
__fp_cmp():
    1be2:	99 0f       	add	r25, r25
    1be4:	00 08       	sbc	r0, r0
    1be6:	55 0f       	add	r21, r21
    1be8:	aa 0b       	sbc	r26, r26
    1bea:	e0 e8       	ldi	r30, 0x80	; 128
    1bec:	fe ef       	ldi	r31, 0xFE	; 254
    1bee:	16 16       	cp	r1, r22
    1bf0:	17 06       	cpc	r1, r23
    1bf2:	e8 07       	cpc	r30, r24
    1bf4:	f9 07       	cpc	r31, r25
    1bf6:	c0 f0       	brcs	.+48     	; 0x1c28 <__fp_cmp+0x46>
    1bf8:	12 16       	cp	r1, r18
    1bfa:	13 06       	cpc	r1, r19
    1bfc:	e4 07       	cpc	r30, r20
    1bfe:	f5 07       	cpc	r31, r21
    1c00:	98 f0       	brcs	.+38     	; 0x1c28 <__fp_cmp+0x46>
    1c02:	62 1b       	sub	r22, r18
    1c04:	73 0b       	sbc	r23, r19
    1c06:	84 0b       	sbc	r24, r20
    1c08:	95 0b       	sbc	r25, r21
    1c0a:	39 f4       	brne	.+14     	; 0x1c1a <__fp_cmp+0x38>
    1c0c:	0a 26       	eor	r0, r26
    1c0e:	61 f0       	breq	.+24     	; 0x1c28 <__fp_cmp+0x46>
    1c10:	23 2b       	or	r18, r19
    1c12:	24 2b       	or	r18, r20
    1c14:	25 2b       	or	r18, r21
    1c16:	21 f4       	brne	.+8      	; 0x1c20 <__fp_cmp+0x3e>
    1c18:	08 95       	ret
    1c1a:	0a 26       	eor	r0, r26
    1c1c:	09 f4       	brne	.+2      	; 0x1c20 <__fp_cmp+0x3e>
    1c1e:	a1 40       	sbci	r26, 0x01	; 1
    1c20:	a6 95       	lsr	r26
    1c22:	8f ef       	ldi	r24, 0xFF	; 255
    1c24:	81 1d       	adc	r24, r1
    1c26:	81 1d       	adc	r24, r1
    1c28:	08 95       	ret

00001c2a <__mulsf3>:
__mulsf3():
    1c2a:	0a d0       	rcall	.+20     	; 0x1c40 <__mulsf3x>
    1c2c:	80 c0       	rjmp	.+256    	; 0x1d2e <__fp_round>
    1c2e:	71 d0       	rcall	.+226    	; 0x1d12 <__fp_pscA>
    1c30:	28 f0       	brcs	.+10     	; 0x1c3c <__mulsf3+0x12>
    1c32:	76 d0       	rcall	.+236    	; 0x1d20 <__fp_pscB>
    1c34:	18 f0       	brcs	.+6      	; 0x1c3c <__mulsf3+0x12>
    1c36:	95 23       	and	r25, r21
    1c38:	09 f0       	breq	.+2      	; 0x1c3c <__mulsf3+0x12>
    1c3a:	62 c0       	rjmp	.+196    	; 0x1d00 <__fp_inf>
    1c3c:	67 c0       	rjmp	.+206    	; 0x1d0c <__fp_nan>
    1c3e:	ab c0       	rjmp	.+342    	; 0x1d96 <__fp_szero>

00001c40 <__mulsf3x>:
__mulsf3x():
    1c40:	87 d0       	rcall	.+270    	; 0x1d50 <__fp_split3>
    1c42:	a8 f3       	brcs	.-22     	; 0x1c2e <__mulsf3+0x4>

00001c44 <__mulsf3_pse>:
    1c44:	99 23       	and	r25, r25
    1c46:	d9 f3       	breq	.-10     	; 0x1c3e <__mulsf3+0x14>
    1c48:	55 23       	and	r21, r21
    1c4a:	c9 f3       	breq	.-14     	; 0x1c3e <__mulsf3+0x14>
    1c4c:	95 0f       	add	r25, r21
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	55 1f       	adc	r21, r21
    1c52:	aa 27       	eor	r26, r26
    1c54:	ee 27       	eor	r30, r30
    1c56:	ff 27       	eor	r31, r31
    1c58:	bb 27       	eor	r27, r27
    1c5a:	00 24       	eor	r0, r0
    1c5c:	08 94       	sec
    1c5e:	67 95       	ror	r22
    1c60:	20 f4       	brcc	.+8      	; 0x1c6a <__mulsf3_pse+0x26>
    1c62:	e2 0f       	add	r30, r18
    1c64:	f3 1f       	adc	r31, r19
    1c66:	b4 1f       	adc	r27, r20
    1c68:	0a 1e       	adc	r0, r26
    1c6a:	22 0f       	add	r18, r18
    1c6c:	33 1f       	adc	r19, r19
    1c6e:	44 1f       	adc	r20, r20
    1c70:	aa 1f       	adc	r26, r26
    1c72:	66 95       	lsr	r22
    1c74:	a9 f7       	brne	.-22     	; 0x1c60 <__mulsf3_pse+0x1c>
    1c76:	77 95       	ror	r23
    1c78:	30 f4       	brcc	.+12     	; 0x1c86 <__mulsf3_pse+0x42>
    1c7a:	f3 0f       	add	r31, r19
    1c7c:	b4 1f       	adc	r27, r20
    1c7e:	0a 1e       	adc	r0, r26
    1c80:	12 1e       	adc	r1, r18
    1c82:	08 f4       	brcc	.+2      	; 0x1c86 <__mulsf3_pse+0x42>
    1c84:	63 95       	inc	r22
    1c86:	33 0f       	add	r19, r19
    1c88:	44 1f       	adc	r20, r20
    1c8a:	aa 1f       	adc	r26, r26
    1c8c:	22 1f       	adc	r18, r18
    1c8e:	76 95       	lsr	r23
    1c90:	99 f7       	brne	.-26     	; 0x1c78 <__mulsf3_pse+0x34>
    1c92:	87 95       	ror	r24
    1c94:	20 f4       	brcc	.+8      	; 0x1c9e <__mulsf3_pse+0x5a>
    1c96:	b4 0f       	add	r27, r20
    1c98:	0a 1e       	adc	r0, r26
    1c9a:	12 1e       	adc	r1, r18
    1c9c:	63 1f       	adc	r22, r19
    1c9e:	44 0f       	add	r20, r20
    1ca0:	aa 1f       	adc	r26, r26
    1ca2:	22 1f       	adc	r18, r18
    1ca4:	33 1f       	adc	r19, r19
    1ca6:	86 95       	lsr	r24
    1ca8:	a9 f7       	brne	.-22     	; 0x1c94 <__mulsf3_pse+0x50>
    1caa:	86 2f       	mov	r24, r22
    1cac:	71 2d       	mov	r23, r1
    1cae:	60 2d       	mov	r22, r0
    1cb0:	11 24       	eor	r1, r1
    1cb2:	9f 57       	subi	r25, 0x7F	; 127
    1cb4:	50 40       	sbci	r21, 0x00	; 0
    1cb6:	8a f0       	brmi	.+34     	; 0x1cda <__mulsf3_pse+0x96>
    1cb8:	e1 f0       	breq	.+56     	; 0x1cf2 <__mulsf3_pse+0xae>
    1cba:	88 23       	and	r24, r24
    1cbc:	4a f0       	brmi	.+18     	; 0x1cd0 <__mulsf3_pse+0x8c>
    1cbe:	ee 0f       	add	r30, r30
    1cc0:	ff 1f       	adc	r31, r31
    1cc2:	bb 1f       	adc	r27, r27
    1cc4:	66 1f       	adc	r22, r22
    1cc6:	77 1f       	adc	r23, r23
    1cc8:	88 1f       	adc	r24, r24
    1cca:	91 50       	subi	r25, 0x01	; 1
    1ccc:	50 40       	sbci	r21, 0x00	; 0
    1cce:	a9 f7       	brne	.-22     	; 0x1cba <__mulsf3_pse+0x76>
    1cd0:	9e 3f       	cpi	r25, 0xFE	; 254
    1cd2:	51 05       	cpc	r21, r1
    1cd4:	70 f0       	brcs	.+28     	; 0x1cf2 <__mulsf3_pse+0xae>
    1cd6:	14 c0       	rjmp	.+40     	; 0x1d00 <__fp_inf>
    1cd8:	5e c0       	rjmp	.+188    	; 0x1d96 <__fp_szero>
    1cda:	5f 3f       	cpi	r21, 0xFF	; 255
    1cdc:	ec f3       	brlt	.-6      	; 0x1cd8 <__mulsf3_pse+0x94>
    1cde:	98 3e       	cpi	r25, 0xE8	; 232
    1ce0:	dc f3       	brlt	.-10     	; 0x1cd8 <__mulsf3_pse+0x94>
    1ce2:	86 95       	lsr	r24
    1ce4:	77 95       	ror	r23
    1ce6:	67 95       	ror	r22
    1ce8:	b7 95       	ror	r27
    1cea:	f7 95       	ror	r31
    1cec:	e7 95       	ror	r30
    1cee:	9f 5f       	subi	r25, 0xFF	; 255
    1cf0:	c1 f7       	brne	.-16     	; 0x1ce2 <__mulsf3_pse+0x9e>
    1cf2:	fe 2b       	or	r31, r30
    1cf4:	88 0f       	add	r24, r24
    1cf6:	91 1d       	adc	r25, r1
    1cf8:	96 95       	lsr	r25
    1cfa:	87 95       	ror	r24
    1cfc:	97 f9       	bld	r25, 7
    1cfe:	08 95       	ret

00001d00 <__fp_inf>:
    1d00:	97 f9       	bld	r25, 7
    1d02:	9f 67       	ori	r25, 0x7F	; 127
    1d04:	80 e8       	ldi	r24, 0x80	; 128
    1d06:	70 e0       	ldi	r23, 0x00	; 0
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	08 95       	ret

00001d0c <__fp_nan>:
    1d0c:	9f ef       	ldi	r25, 0xFF	; 255
    1d0e:	80 ec       	ldi	r24, 0xC0	; 192
    1d10:	08 95       	ret

00001d12 <__fp_pscA>:
__fp_pscA():
    1d12:	00 24       	eor	r0, r0
    1d14:	0a 94       	dec	r0
    1d16:	16 16       	cp	r1, r22
    1d18:	17 06       	cpc	r1, r23
    1d1a:	18 06       	cpc	r1, r24
    1d1c:	09 06       	cpc	r0, r25
    1d1e:	08 95       	ret

00001d20 <__fp_pscB>:
__fp_pscB():
    1d20:	00 24       	eor	r0, r0
    1d22:	0a 94       	dec	r0
    1d24:	12 16       	cp	r1, r18
    1d26:	13 06       	cpc	r1, r19
    1d28:	14 06       	cpc	r1, r20
    1d2a:	05 06       	cpc	r0, r21
    1d2c:	08 95       	ret

00001d2e <__fp_round>:
__fp_round():
    1d2e:	09 2e       	mov	r0, r25
    1d30:	03 94       	inc	r0
    1d32:	00 0c       	add	r0, r0
    1d34:	11 f4       	brne	.+4      	; 0x1d3a <__fp_round+0xc>
    1d36:	88 23       	and	r24, r24
    1d38:	52 f0       	brmi	.+20     	; 0x1d4e <__fp_round+0x20>
    1d3a:	bb 0f       	add	r27, r27
    1d3c:	40 f4       	brcc	.+16     	; 0x1d4e <__fp_round+0x20>
    1d3e:	bf 2b       	or	r27, r31
    1d40:	11 f4       	brne	.+4      	; 0x1d46 <__fp_round+0x18>
    1d42:	60 ff       	sbrs	r22, 0
    1d44:	04 c0       	rjmp	.+8      	; 0x1d4e <__fp_round+0x20>
    1d46:	6f 5f       	subi	r22, 0xFF	; 255
    1d48:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4e:	08 95       	ret

00001d50 <__fp_split3>:
__fp_split3():
    1d50:	57 fd       	sbrc	r21, 7
    1d52:	90 58       	subi	r25, 0x80	; 128
    1d54:	44 0f       	add	r20, r20
    1d56:	55 1f       	adc	r21, r21
    1d58:	59 f0       	breq	.+22     	; 0x1d70 <__fp_splitA+0x10>
    1d5a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d5c:	71 f0       	breq	.+28     	; 0x1d7a <__fp_splitA+0x1a>
    1d5e:	47 95       	ror	r20

00001d60 <__fp_splitA>:
    1d60:	88 0f       	add	r24, r24
    1d62:	97 fb       	bst	r25, 7
    1d64:	99 1f       	adc	r25, r25
    1d66:	61 f0       	breq	.+24     	; 0x1d80 <__fp_splitA+0x20>
    1d68:	9f 3f       	cpi	r25, 0xFF	; 255
    1d6a:	79 f0       	breq	.+30     	; 0x1d8a <__fp_splitA+0x2a>
    1d6c:	87 95       	ror	r24
    1d6e:	08 95       	ret
    1d70:	12 16       	cp	r1, r18
    1d72:	13 06       	cpc	r1, r19
    1d74:	14 06       	cpc	r1, r20
    1d76:	55 1f       	adc	r21, r21
    1d78:	f2 cf       	rjmp	.-28     	; 0x1d5e <__fp_split3+0xe>
    1d7a:	46 95       	lsr	r20
    1d7c:	f1 df       	rcall	.-30     	; 0x1d60 <__fp_splitA>
    1d7e:	08 c0       	rjmp	.+16     	; 0x1d90 <__fp_splitA+0x30>
    1d80:	16 16       	cp	r1, r22
    1d82:	17 06       	cpc	r1, r23
    1d84:	18 06       	cpc	r1, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	f1 cf       	rjmp	.-30     	; 0x1d6c <__fp_splitA+0xc>
    1d8a:	86 95       	lsr	r24
    1d8c:	71 05       	cpc	r23, r1
    1d8e:	61 05       	cpc	r22, r1
    1d90:	08 94       	sec
    1d92:	08 95       	ret

00001d94 <__fp_zero>:
__fp_zero():
    1d94:	e8 94       	clt

00001d96 <__fp_szero>:
    1d96:	bb 27       	eor	r27, r27
    1d98:	66 27       	eor	r22, r22
    1d9a:	77 27       	eor	r23, r23
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	97 f9       	bld	r25, 7
    1da0:	08 95       	ret

00001da2 <eeprom_read_byte>:
eeprom_read_byte():
    1da2:	e1 99       	sbic	0x1c, 1	; 28
    1da4:	fe cf       	rjmp	.-4      	; 0x1da2 <eeprom_read_byte>
    1da6:	9f bb       	out	0x1f, r25	; 31
    1da8:	8e bb       	out	0x1e, r24	; 30
    1daa:	e0 9a       	sbi	0x1c, 0	; 28
    1dac:	99 27       	eor	r25, r25
    1dae:	8d b3       	in	r24, 0x1d	; 29
    1db0:	08 95       	ret

00001db2 <eeprom_write_byte>:
eeprom_write_byte():
    1db2:	26 2f       	mov	r18, r22

00001db4 <eeprom_write_r18>:
    1db4:	e1 99       	sbic	0x1c, 1	; 28
    1db6:	fe cf       	rjmp	.-4      	; 0x1db4 <eeprom_write_r18>
    1db8:	1c ba       	out	0x1c, r1	; 28
    1dba:	9f bb       	out	0x1f, r25	; 31
    1dbc:	8e bb       	out	0x1e, r24	; 30
    1dbe:	2d bb       	out	0x1d, r18	; 29
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	e2 9a       	sbi	0x1c, 2	; 28
    1dc6:	e1 9a       	sbi	0x1c, 1	; 28
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	01 96       	adiw	r24, 0x01	; 1
    1dcc:	08 95       	ret

00001dce <__mulqi3>:
__mulqi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:224
    1dce:	00 24       	eor	r0, r0

00001dd0 <__mulqi3_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:226
    1dd0:	80 fd       	sbrc	r24, 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:227
    1dd2:	06 0e       	add	r0, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:228
    1dd4:	66 0f       	add	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:229
    1dd6:	11 f0       	breq	.+4      	; 0x1ddc <__mulqi3_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:230
    1dd8:	86 95       	lsr	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:231
    1dda:	d1 f7       	brne	.-12     	; 0x1dd0 <__mulqi3_loop>

00001ddc <__mulqi3_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:233
    1ddc:	80 2d       	mov	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:234
    1dde:	08 95       	ret

00001de0 <__gesf2>:
__gesf2():
    1de0:	00 df       	rcall	.-512    	; 0x1be2 <__fp_cmp>
    1de2:	08 f4       	brcc	.+2      	; 0x1de6 <__gesf2+0x6>
    1de4:	8f ef       	ldi	r24, 0xFF	; 255
    1de6:	08 95       	ret

00001de8 <__mulhi3>:
__mulhi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:312
    1de8:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:313
    1dea:	55 27       	eor	r21, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:314
    1dec:	04 c0       	rjmp	.+8      	; 0x1df6 <__mulhi3+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:317
    1dee:	08 0e       	add	r0, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:318
    1df0:	59 1f       	adc	r21, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:320
    1df2:	88 0f       	add	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:321
    1df4:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:324
    1df6:	00 97       	sbiw	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:325
    1df8:	29 f0       	breq	.+10     	; 0x1e04 <__mulhi3+0x1c>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:328
    1dfa:	76 95       	lsr	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:329
    1dfc:	67 95       	ror	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:331
    1dfe:	b8 f3       	brcs	.-18     	; 0x1dee <__mulhi3+0x6>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:335
    1e00:	71 05       	cpc	r23, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:337
    1e02:	b9 f7       	brne	.-18     	; 0x1df2 <__mulhi3+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:340
    1e04:	80 2d       	mov	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:341
    1e06:	95 2f       	mov	r25, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:342
    1e08:	08 95       	ret

00001e0a <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    1e0a:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    1e0c:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    1e0e:	16 f4       	brtc	.+4      	; 0x1e14 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    1e10:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    1e12:	06 d0       	rcall	.+12     	; 0x1e20 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    1e14:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    1e16:	08 d0       	rcall	.+16     	; 0x1e28 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    1e18:	2d d0       	rcall	.+90     	; 0x1e74 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    1e1a:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    1e1c:	05 d0       	rcall	.+10     	; 0x1e28 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    1e1e:	3e f4       	brtc	.+14     	; 0x1e2e <__divmodhi4_exit>

00001e20 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    1e20:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    1e22:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    1e24:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    1e26:	08 95       	ret

00001e28 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    1e28:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    1e2a:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    1e2c:	7f 4f       	sbci	r23, 0xFF	; 255

00001e2e <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    1e2e:	08 95       	ret

00001e30 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1e30:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1e32:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1e34:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1e36:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1e38:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1e3a:	0d c0       	rjmp	.+26     	; 0x1e56 <__udivmodsi4_ep>

00001e3c <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1e3c:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1e3e:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1e40:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1e42:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1e44:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1e46:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1e48:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1e4a:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1e4c:	20 f0       	brcs	.+8      	; 0x1e56 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1e4e:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1e50:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1e52:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1e54:	f5 0b       	sbc	r31, r21

00001e56 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1e56:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1e58:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1e5a:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1e5c:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1e5e:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1e60:	69 f7       	brne	.-38     	; 0x1e3c <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1e62:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1e64:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1e66:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1e68:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1e6a:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1e6c:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1e6e:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1e70:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1e72:	08 95       	ret

00001e74 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    1e74:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    1e76:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    1e78:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    1e7a:	07 c0       	rjmp	.+14     	; 0x1e8a <__udivmodhi4_ep>

00001e7c <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    1e7c:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    1e7e:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    1e80:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    1e82:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    1e84:	10 f0       	brcs	.+4      	; 0x1e8a <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    1e86:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    1e88:	b7 0b       	sbc	r27, r23

00001e8a <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    1e8a:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    1e8c:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    1e8e:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    1e90:	a9 f7       	brne	.-22     	; 0x1e7c <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    1e92:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    1e94:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    1e96:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    1e98:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    1e9a:	08 95       	ret

00001e9c <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1e9c:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1e9e:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1ea0:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1ea2:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1ea4:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1ea6:	09 94       	ijmp

00001ea8 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    1ea8:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    1eaa:	c9 ee       	ldi	r28, 0xE9	; 233
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    1eac:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    1eae:	03 c0       	rjmp	.+6      	; 0x1eb6 <__do_global_dtors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    1eb0:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    1eb2:	f4 df       	rcall	.-24     	; 0x1e9c <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    1eb4:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    1eb6:	ca 3e       	cpi	r28, 0xEA	; 234
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    1eb8:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    1eba:	d1 f7       	brne	.-12     	; 0x1eb0 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1ebc:	f8 94       	cli

00001ebe <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1ebe:	ff cf       	rjmp	.-2      	; 0x1ebe <__stop_program>
