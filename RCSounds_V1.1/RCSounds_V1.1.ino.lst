
C:\temp\arduino_build_228602/RCSounds_V1.1.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	22 c0       	rjmp	.+68     	; 0x46 <__dtors_end>
       2:	46 c0       	rjmp	.+140    	; 0x90 <__bad_interrupt>
       4:	3e c6       	rjmp	.+3196   	; 0xc82 <__vector_2>
       6:	44 c0       	rjmp	.+136    	; 0x90 <__bad_interrupt>
       8:	43 c0       	rjmp	.+134    	; 0x90 <__bad_interrupt>
       a:	f1 c5       	rjmp	.+3042   	; 0xbee <__vector_5>
       c:	41 c0       	rjmp	.+130    	; 0x90 <__bad_interrupt>
       e:	40 c0       	rjmp	.+128    	; 0x90 <__bad_interrupt>
      10:	3f c0       	rjmp	.+126    	; 0x90 <__bad_interrupt>
      12:	3e c0       	rjmp	.+124    	; 0x90 <__bad_interrupt>
      14:	3d c0       	rjmp	.+122    	; 0x90 <__bad_interrupt>
      16:	3c c0       	rjmp	.+120    	; 0x90 <__bad_interrupt>
      18:	3b c0       	rjmp	.+118    	; 0x90 <__bad_interrupt>
      1a:	3a c0       	rjmp	.+116    	; 0x90 <__bad_interrupt>
      1c:	39 c0       	rjmp	.+114    	; 0x90 <__bad_interrupt>

0000001e <__trampolines_end>:
__trampolines_start():
      1e:	00 00       	nop
      20:	00 00       	nop
      22:	37 00       	.word	0x0037	; ????

00000024 <port_to_output_PGM>:
      24:	00 00 00 00 38 00                                   ....8.

0000002a <digital_pin_to_timer_PGM>:
      2a:	01 03 00 00 04 00                                   ......

00000030 <port_to_input_PGM>:
      30:	00 00 00 00 36 00                                   ....6.

00000036 <digital_pin_to_port_PGM>:
      36:	02 02 02 02 02 02                                   ......

0000003c <digital_pin_to_bit_mask_PGM>:
      3c:	01 02 04 08 10 20                                   ..... 

00000042 <__ctors_start>:
__ctors_start():
      42:	dc 09       	sbc	r29, r12

00000044 <__ctors_end>:
__dtors_start():
      44:	4f 0a       	sbc	r4, r31

00000046 <__dtors_end>:
__dtors_end():
      46:	11 24       	eor	r1, r1
      48:	1f be       	out	0x3f, r1	; 63
      4a:	cf e5       	ldi	r28, 0x5F	; 95
      4c:	d2 e0       	ldi	r29, 0x02	; 2
      4e:	de bf       	out	0x3e, r29	; 62
      50:	cd bf       	out	0x3d, r28	; 61

00000052 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      52:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      54:	ac e8       	ldi	r26, 0x8C	; 140
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      56:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      58:	01 c0       	rjmp	.+2      	; 0x5c <.do_clear_bss_start>

0000005a <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      5a:	1d 92       	st	X+, r1

0000005c <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      5c:	a7 33       	cpi	r26, 0x37	; 55
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      5e:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      60:	e1 f7       	brne	.-8      	; 0x5a <.do_clear_bss_loop>

00000062 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      62:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      64:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      66:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      68:	ee eb       	ldi	r30, 0xBE	; 190
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      6a:	f7 e1       	ldi	r31, 0x17	; 23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      6e:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      70:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      72:	ac 38       	cpi	r26, 0x8C	; 140
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      74:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      78:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      7a:	c2 e2       	ldi	r28, 0x22	; 34
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      7c:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      7e:	03 c0       	rjmp	.+6      	; 0x86 <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      80:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      82:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      84:	8a db       	rcall	.-2284   	; 0xfffff79a <__eeprom_end+0xff7ef79a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      86:	c1 32       	cpi	r28, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      88:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      8a:	d1 f7       	brne	.-12     	; 0x80 <__do_global_ctors+0x8>
      8c:	b7 d6       	rcall	.+3438   	; 0xdfc <main>
      8e:	8b cb       	rjmp	.-2282   	; 0xfffff7a6 <__eeprom_end+0xff7ef7a6>

00000090 <__bad_interrupt>:
__vector_1():
      90:	b7 cf       	rjmp	.-146    	; 0x0 <__vectors>

00000092 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:34

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
      92:	cf 92       	push	r12
      94:	df 92       	push	r13
      96:	ef 92       	push	r14
      98:	ff 92       	push	r15
      9a:	0f 93       	push	r16
      9c:	1f 93       	push	r17
      9e:	cf 93       	push	r28
      a0:	df 93       	push	r29
      a2:	6c 01       	movw	r12, r24
      a4:	eb 01       	movw	r28, r22
      a6:	7b 01       	movw	r14, r22
      a8:	e4 0e       	add	r14, r20
      aa:	f5 1e       	adc	r15, r21
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:35
  size_t n = 0;
      ac:	10 e0       	ldi	r17, 0x00	; 0
      ae:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:36
  while (size--) {
      b0:	ce 15       	cp	r28, r14
      b2:	df 05       	cpc	r29, r15
      b4:	61 f0       	breq	.+24     	; 0xce <Print::write(unsigned char const*, unsigned int)+0x3c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:37
    n += write(*buffer++);
      b6:	69 91       	ld	r22, Y+
      b8:	d6 01       	movw	r26, r12
      ba:	ed 91       	ld	r30, X+
      bc:	fc 91       	ld	r31, X
      be:	01 90       	ld	r0, Z+
      c0:	f0 81       	ld	r31, Z
      c2:	e0 2d       	mov	r30, r0
      c4:	c6 01       	movw	r24, r12
      c6:	09 95       	icall
      c8:	08 0f       	add	r16, r24
      ca:	19 1f       	adc	r17, r25
      cc:	f1 cf       	rjmp	.-30     	; 0xb0 <Print::write(unsigned char const*, unsigned int)+0x1e>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.cpp:40
  }
  return n;
}
      ce:	c8 01       	movw	r24, r16
      d0:	df 91       	pop	r29
      d2:	cf 91       	pop	r28
      d4:	1f 91       	pop	r17
      d6:	0f 91       	pop	r16
      d8:	ff 90       	pop	r15
      da:	ef 90       	pop	r14
      dc:	df 90       	pop	r13
      de:	cf 90       	pop	r12
      e0:	08 95       	ret

000000e2 <micros>:
micros():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:360
    unsigned int r; // needed for some frequencies, optimized away otherwise
    unsigned char f; // temporary storage for millis fraction counter
    unsigned char q = 0; // record whether an overflow is flagged
#endif
    unsigned long m;
    uint8_t t, oldSREG = SREG;
      e2:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:362

    cli();
      e4:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:367
#ifdef CORRECT_EXACT_MICROS
    m = millis_timer_millis;
    f = millis_timer_fract;
#else
    m = millis_timer_overflow_count;
      e6:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <millis_timer_overflow_count>
      ea:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <millis_timer_overflow_count+0x1>
      ee:	a0 91 d5 00 	lds	r26, 0x00D5	; 0x8000d5 <millis_timer_overflow_count+0x2>
      f2:	b0 91 d6 00 	lds	r27, 0x00D6	; 0x8000d6 <millis_timer_overflow_count+0x3>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:370
#endif
  #if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
    t = TCNT0;
      f6:	22 b7       	in	r18, 0x32	; 50
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:389
      m++;
    #else
      q = 1;
    #endif
  #elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
    if ((TIFR & _BV(TOV0)) && (t < 255))
      f8:	08 b6       	in	r0, 0x38	; 56
      fa:	01 fe       	sbrs	r0, 1
      fc:	05 c0       	rjmp	.+10     	; 0x108 <micros+0x26>
      fe:	2f 3f       	cpi	r18, 0xFF	; 255
     100:	19 f0       	breq	.+6      	; 0x108 <micros+0x26>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:391
    #ifndef CORRECT_EXACT_MICROS
      m++;
     102:	01 96       	adiw	r24, 0x01	; 1
     104:	a1 1d       	adc	r26, r1
     106:	b1 1d       	adc	r27, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:411
    #else
      q = 1;
    #endif
  #endif

    SREG = oldSREG;
     108:	3f bf       	out	0x3f, r19	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:453
  #else
  #if F_CPU < 1000000L
    return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
  #else
    #if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 && (F_CPU % 1000000 == 0 )) // Can we just do it the naive way? If so great!
      return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
     10a:	ba 2f       	mov	r27, r26
     10c:	a9 2f       	mov	r26, r25
     10e:	98 2f       	mov	r25, r24
     110:	88 27       	eor	r24, r24
     112:	bc 01       	movw	r22, r24
     114:	cd 01       	movw	r24, r26
     116:	62 0f       	add	r22, r18
     118:	71 1d       	adc	r23, r1
     11a:	81 1d       	adc	r24, r1
     11c:	91 1d       	adc	r25, r1
     11e:	42 e0       	ldi	r20, 0x02	; 2
     120:	66 0f       	add	r22, r22
     122:	77 1f       	adc	r23, r23
     124:	88 1f       	adc	r24, r24
     126:	99 1f       	adc	r25, r25
     128:	4a 95       	dec	r20
     12a:	d1 f7       	brne	.-12     	; 0x120 <micros+0x3e>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:508
      //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
      return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
    #endif
  #endif
  #endif // !CORRECT_EXACT_MICROS
  }
     12c:	08 95       	ret

0000012e <delay>:
delay():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:516
    // Empty
  }
  void yield(void) __attribute__ ((weak, alias("__empty")));

  void delay(unsigned long ms)
  {
     12e:	cf 92       	push	r12
     130:	df 92       	push	r13
     132:	ef 92       	push	r14
     134:	ff 92       	push	r15
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	6b 01       	movw	r12, r22
     13c:	7c 01       	movw	r14, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:518
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();
     13e:	d1 df       	rcall	.-94     	; 0xe2 <micros>
     140:	eb 01       	movw	r28, r22
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:520

    while (ms > 0) {
     142:	c1 14       	cp	r12, r1
     144:	d1 04       	cpc	r13, r1
     146:	e1 04       	cpc	r14, r1
     148:	f1 04       	cpc	r15, r1
     14a:	41 f4       	brne	.+16     	; 0x15c <delay+0x2e>
     14c:	12 c0       	rjmp	.+36     	; 0x172 <delay+0x44>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:523
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
        ms--;
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	c8 1a       	sub	r12, r24
     152:	d1 08       	sbc	r13, r1
     154:	e1 08       	sbc	r14, r1
     156:	f1 08       	sbc	r15, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:524
        start += 1000;
     158:	c8 51       	subi	r28, 0x18	; 24
     15a:	dc 4f       	sbci	r29, 0xFC	; 252
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:522
    #if (F_CPU>=1000000L)
    uint16_t start = (uint16_t)micros();

    while (ms > 0) {
      yield();
      while (((uint16_t)micros() - start) >= 1000 && ms) {
     15c:	c2 df       	rcall	.-124    	; 0xe2 <micros>
     15e:	6c 1b       	sub	r22, r28
     160:	7d 0b       	sbc	r23, r29
     162:	68 3e       	cpi	r22, 0xE8	; 232
     164:	73 40       	sbci	r23, 0x03	; 3
     166:	68 f3       	brcs	.-38     	; 0x142 <delay+0x14>
     168:	c1 14       	cp	r12, r1
     16a:	d1 04       	cpc	r13, r1
     16c:	e1 04       	cpc	r14, r1
     16e:	f1 04       	cpc	r15, r1
     170:	71 f7       	brne	.-36     	; 0x14e <delay+0x20>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:532
    #else
    uint32_t start = millis();
    while((millis() - start) < ms)  /* NOP */yield();
    return;
    #endif
  }
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	ff 90       	pop	r15
     178:	ef 90       	pop	r14
     17a:	df 90       	pop	r13
     17c:	cf 90       	pop	r12
     17e:	08 95       	ret

00000180 <AvgADCRead(unsigned char) [clone .constprop.11]>:
AvgADCRead():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:233
/*
 * Function to take 4 readings from the specified ADC channel, average them, conver to a voltage
 * and return it to the calling function.
 */

float AvgADCRead(unsigned char ADCInput)
     180:	1f 93       	push	r17
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	14 e0       	ldi	r17, 0x04	; 4
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:235
{
  unsigned int AvgADC=0;
     188:	d0 e0       	ldi	r29, 0x00	; 0
     18a:	c0 e0       	ldi	r28, 0x00	; 0
analogRead():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:72
  #ifndef ADCSRA
  return digitalRead(analogInputToDigitalPin(pin)) ? 1023 : 0; //No ADC, so read as a digital pin instead.
  #endif

  #if defined(ADMUX)
  ADMUX = ((analog_reference & ADMUX_REFS_MASK) << REFS0) | ((pin & ADMUX_MUX_MASK) << MUX0); //select the channel and reference
     18c:	17 b8       	out	0x07, r1	; 7
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:74
  #if defined(REFS2)
  ADMUX |= (((analog_reference & 0x04) >> 2) << REFS2); //some have an extra reference bit in a weird position.
     18e:	87 b1       	in	r24, 0x07	; 7
     190:	87 b9       	out	0x07, r24	; 7
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:79
  #endif
  #endif

  #if defined(HAVE_ADC) && HAVE_ADC
  sbi(ADCSRA, ADSC); //Start conversion
     192:	36 9a       	sbi	0x06, 6	; 6
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:81

  while(ADCSRA & (1<<ADSC)); //Wait for conversion to complete.
     194:	36 99       	sbic	0x06, 6	; 6
     196:	fe cf       	rjmp	.-4      	; 0x194 <AvgADCRead(unsigned char) [clone .constprop.11]+0x14>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:83

  uint8_t low = ADCL;
     198:	94 b1       	in	r25, 0x04	; 4
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:84
  uint8_t high = ADCH;
     19a:	85 b1       	in	r24, 0x05	; 5
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_analog.c:85
  return (high << 8) | low;
     19c:	89 27       	eor	r24, r25
     19e:	98 27       	eor	r25, r24
     1a0:	89 27       	eor	r24, r25
AvgADCRead():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:241
  unsigned char loopCNT=0;
  float AvgADCVal=0.0;
  
  for(loopCNT=0;loopCNT<4;loopCNT++)
  {
    AvgADC=AvgADC+analogRead(ADCInput);
     1a2:	c8 0f       	add	r28, r24
     1a4:	d9 1f       	adc	r29, r25
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:242
    delay(2);   // ADC settle time
     1a6:	62 e0       	ldi	r22, 0x02	; 2
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	bf df       	rcall	.-130    	; 0x12e <delay>
     1b0:	11 50       	subi	r17, 0x01	; 1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:239
{
  unsigned int AvgADC=0;
  unsigned char loopCNT=0;
  float AvgADCVal=0.0;
  
  for(loopCNT=0;loopCNT<4;loopCNT++)
     1b2:	61 f7       	brne	.-40     	; 0x18c <AvgADCRead(unsigned char) [clone .constprop.11]+0xc>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:244
  {
    AvgADC=AvgADC+analogRead(ADCInput);
    delay(2);   // ADC settle time
  }
  AvgADCVal= (float)((AvgADC*4.88E-3)/4);   // Calculate average of 4 readings
     1b4:	be 01       	movw	r22, r28
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	91 d9       	rcall	.-3294   	; 0xfffff4de <__eeprom_end+0xff7ef4de>
     1bc:	28 e6       	ldi	r18, 0x68	; 104
     1be:	38 ee       	ldi	r19, 0xE8	; 232
     1c0:	4f e9       	ldi	r20, 0x9F	; 159
     1c2:	5b e3       	ldi	r21, 0x3B	; 59
     1c4:	ed d9       	rcall	.-3110   	; 0xfffff5a0 <__eeprom_end+0xff7ef5a0>
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	40 e8       	ldi	r20, 0x80	; 128
     1cc:	5e e3       	ldi	r21, 0x3E	; 62
     1ce:	e8 d9       	rcall	.-3120   	; 0xfffff5a0 <__eeprom_end+0xff7ef5a0>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:246
  return(AvgADCVal);
}
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	1f 91       	pop	r17
     1d6:	08 95       	ret

000001d8 <millis>:
millis():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:341
  }

  unsigned long millis()
  {
    unsigned long m;
    uint8_t oldSREG = SREG;
     1d8:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:345

    // disable interrupts while we read millis_timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
    cli();
     1da:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:346
    m = millis_timer_millis;
     1dc:	60 91 cf 00 	lds	r22, 0x00CF	; 0x8000cf <millis_timer_millis>
     1e0:	70 91 d0 00 	lds	r23, 0x00D0	; 0x8000d0 <millis_timer_millis+0x1>
     1e4:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <millis_timer_millis+0x2>
     1e8:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <millis_timer_millis+0x3>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:347
    SREG = oldSREG;
     1ec:	2f bf       	out	0x3f, r18	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:350

    return m;
  }
     1ee:	08 95       	ret

000001f0 <DFRobotDFPlayerMini::available() [clone .constprop.17]>:
available():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:228

bool DFRobotDFPlayerMini::validateStack(){
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
}

bool DFRobotDFPlayerMini::available(){
     1f0:	0f 93       	push	r16
     1f2:	1f 93       	push	r17
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:229
  while (_serial->available()) {
     1f4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <myMP3>
     1f8:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <myMP3+0x1>
     1fc:	dc 01       	movw	r26, r24
     1fe:	ed 91       	ld	r30, X+
     200:	fc 91       	ld	r31, X
     202:	04 80       	ldd	r0, Z+4	; 0x04
     204:	f5 81       	ldd	r31, Z+5	; 0x05
     206:	e0 2d       	mov	r30, r0
     208:	09 95       	icall
     20a:	89 2b       	or	r24, r25
     20c:	09 f4       	brne	.+2      	; 0x210 <DFRobotDFPlayerMini::available() [clone .constprop.17]+0x20>
     20e:	d5 c0       	rjmp	.+426    	; 0x3ba <__stack+0x15b>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:230
    delay(0);
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	cb 01       	movw	r24, r22
     216:	8b df       	rcall	.-234    	; 0x12e <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:231
    if (_receivedIndex == 0) {
     218:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <myMP3+0x1e>
     21c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <myMP3>
     220:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <myMP3+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:232
      _received[Stack_Header] = _serial->read();
     224:	dc 01       	movw	r26, r24
     226:	ed 91       	ld	r30, X+
     228:	fc 91       	ld	r31, X
     22a:	06 80       	ldd	r0, Z+6	; 0x06
     22c:	f7 81       	ldd	r31, Z+7	; 0x07
     22e:	e0 2d       	mov	r30, r0
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:231
}

bool DFRobotDFPlayerMini::available(){
  while (_serial->available()) {
    delay(0);
    if (_receivedIndex == 0) {
     230:	21 11       	cpse	r18, r1
     232:	0b c0       	rjmp	.+22     	; 0x24a <DFRobotDFPlayerMini::available() [clone .constprop.17]+0x5a>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:232
      _received[Stack_Header] = _serial->read();
     234:	09 95       	icall
     236:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <myMP3+0xa>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:238
#ifdef _DEBUG
      Serial.print(F("received:"));
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      if (_received[Stack_Header] == 0x7E) {
     23a:	8e 37       	cpi	r24, 0x7E	; 126
     23c:	d9 f6       	brne	.-74     	; 0x1f4 <DFRobotDFPlayerMini::available() [clone .constprop.17]+0x4>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:239
        _receivedIndex ++;
     23e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <myMP3+0x1e>
     242:	8f 5f       	subi	r24, 0xFF	; 255
     244:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <myMP3+0x1e>
     248:	d5 cf       	rjmp	.-86     	; 0x1f4 <DFRobotDFPlayerMini::available() [clone .constprop.17]+0x4>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:243
      }
    }
    else{
      _received[_receivedIndex] = _serial->read();
     24a:	09 95       	icall
     24c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <myMP3+0x1e>
     250:	e9 2f       	mov	r30, r25
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	ef 5e       	subi	r30, 0xEF	; 239
     256:	fe 4f       	sbci	r31, 0xFE	; 254
     258:	82 87       	std	Z+10, r24	; 0x0a
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:248
#ifdef _DEBUG
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      switch (_receivedIndex) {
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	b9 f0       	breq	.+46     	; 0x28c <__stack+0x2d>
     25e:	99 30       	cpi	r25, 0x09	; 9
     260:	d9 f0       	breq	.+54     	; 0x298 <__stack+0x39>
     262:	91 30       	cpi	r25, 0x01	; 1
     264:	a9 f4       	brne	.+42     	; 0x290 <__stack+0x31>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:250
        case Stack_Version:
          if (_received[_receivedIndex] != 0xFF) {
     266:	8f 3f       	cpi	r24, 0xFF	; 255
     268:	99 f0       	breq	.+38     	; 0x290 <__stack+0x31>
handleMessage():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:132
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
     26a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <myMP3+0x1e>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  _handleType = type;
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <myMP3+0x20>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     274:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <myMP3+0x23>
     278:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <myMP3+0x22>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     27c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <myMP3+0x24>
handleError():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:141
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
     280:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <myMP3+0x25>
available():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:285
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
     284:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:289
  }
  
  return _isAvailable;
}
     286:	1f 91       	pop	r17
     288:	0f 91       	pop	r16
     28a:	08 95       	ret
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:255
          if (_received[_receivedIndex] != 0xFF) {
            return handleError(WrongStack);
          }
          break;
        case Stack_Length:
          if (_received[_receivedIndex] != 0x06) {
     28c:	86 30       	cpi	r24, 0x06	; 6
     28e:	69 f7       	brne	.-38     	; 0x26a <__stack+0xb>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:280
          }
          break;
        default:
          break;
      }
      _receivedIndex++;
     290:	9f 5f       	subi	r25, 0xFF	; 255
     292:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <myMP3+0x1e>
     296:	ae cf       	rjmp	.-164    	; 0x1f4 <DFRobotDFPlayerMini::available() [clone .constprop.17]+0x4>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:263
          break;
        case Stack_End:
#ifdef _DEBUG
          Serial.println();
#endif
          if (_received[_receivedIndex] != 0xEF) {
     298:	8f 3e       	cpi	r24, 0xEF	; 239
     29a:	39 f7       	brne	.-50     	; 0x26a <__stack+0xb>
calculateCheckSum():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     29c:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <myMP3+0xc>
     2a0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <myMP3+0xb>
     2a4:	28 0f       	add	r18, r24
     2a6:	33 27       	eor	r19, r19
     2a8:	33 1f       	adc	r19, r19
     2aa:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <myMP3+0xd>
     2ae:	c9 01       	movw	r24, r18
     2b0:	8e 0f       	add	r24, r30
     2b2:	91 1d       	adc	r25, r1
     2b4:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <myMP3+0xe>
     2b8:	28 0f       	add	r18, r24
     2ba:	39 2f       	mov	r19, r25
     2bc:	31 1d       	adc	r19, r1
     2be:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <myMP3+0xf>
     2c2:	50 e0       	ldi	r21, 0x00	; 0
     2c4:	24 0f       	add	r18, r20
     2c6:	35 1f       	adc	r19, r21
     2c8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <myMP3+0x10>
     2cc:	90 e0       	ldi	r25, 0x00	; 0
arrayToUint16():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:218
      break;
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
     2ce:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <myMP3+0x11>
     2d2:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:219
  value <<=8;
     2d4:	76 2f       	mov	r23, r22
     2d6:	66 27       	eor	r22, r22
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:220
  value += *(array+1);
     2d8:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <myMP3+0x12>
     2dc:	6f 0f       	add	r22, r31
     2de:	71 1d       	adc	r23, r1
calculateCheckSum():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     2e0:	28 0f       	add	r18, r24
     2e2:	39 1f       	adc	r19, r25
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:30
  }
  return -sum;
     2e4:	31 95       	neg	r19
     2e6:	21 95       	neg	r18
     2e8:	31 09       	sbc	r19, r1
available():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:267
#endif
          if (_received[_receivedIndex] != 0xEF) {
            return handleError(WrongStack);
          }
          else{
            if (validateStack()) {
     2ea:	62 17       	cp	r22, r18
     2ec:	73 07       	cpc	r23, r19
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <__stack+0x93>
     2f0:	bc cf       	rjmp	.-136    	; 0x26a <__stack+0xb>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:268
              _receivedIndex = 0;
     2f2:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <myMP3+0x1e>
parseStack():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:152
  return _handleCommand;
}

void DFRobotDFPlayerMini::parseStack(){
  uint8_t handleCommand = *(_received + Stack_Command);
  if (handleCommand == 0x41) { //handle the 0x41 ack feedback as a spcecial case, in case the pollusion of _handleCommand, _handleParameter, and _handleType.
     2f6:	e1 34       	cpi	r30, 0x41	; 65
     2f8:	19 f4       	brne	.+6      	; 0x300 <__stack+0xa1>
handleError():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:141
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
     2fa:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <myMP3+0x25>
     2fe:	2e c0       	rjmp	.+92     	; 0x35c <__stack+0xfd>
parseStack():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:157
  if (handleCommand == 0x41) { //handle the 0x41 ack feedback as a spcecial case, in case the pollusion of _handleCommand, _handleParameter, and _handleType.
    _isSending = false;
    return;
  }
  
  _handleCommand = handleCommand;
     300:	e0 93 32 01 	sts	0x0132, r30	; 0x800132 <myMP3+0x21>
arrayToUint16():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:219
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
  value <<=8;
     304:	54 2f       	mov	r21, r20
     306:	44 27       	eor	r20, r20
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:220
  value += *(array+1);
     308:	84 0f       	add	r24, r20
     30a:	95 1f       	adc	r25, r21
parseStack():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:158
    _isSending = false;
    return;
  }
  
  _handleCommand = handleCommand;
  _handleParameter =  arrayToUint16(_received + Stack_Parameter);
     30c:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <myMP3+0x23>
     310:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <myMP3+0x22>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:160

  switch (_handleCommand) {
     314:	ea 53       	subi	r30, 0x3A	; 58
     316:	e6 31       	cpi	r30, 0x16	; 22
     318:	08 f0       	brcs	.+2      	; 0x31c <__stack+0xbd>
     31a:	45 c0       	rjmp	.+138    	; 0x3a6 <__stack+0x147>
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	ee 56       	subi	r30, 0x6E	; 110
     320:	fe 4f       	sbci	r31, 0xFE	; 254
     322:	09 94       	ijmp
     324:	2c c0       	rjmp	.+88     	; 0x37e <__stack+0x11f>
     326:	33 c0       	rjmp	.+102    	; 0x38e <__stack+0x12f>
     328:	3c c0       	rjmp	.+120    	; 0x3a2 <__stack+0x143>
     32a:	12 c0       	rjmp	.+36     	; 0x350 <__stack+0xf1>
     32c:	3a c0       	rjmp	.+116    	; 0x3a2 <__stack+0x143>
     32e:	19 c0       	rjmp	.+50     	; 0x362 <__stack+0x103>
     330:	36 c0       	rjmp	.+108    	; 0x39e <__stack+0x13f>
     332:	39 c0       	rjmp	.+114    	; 0x3a6 <__stack+0x147>
     334:	36 c0       	rjmp	.+108    	; 0x3a2 <__stack+0x143>
     336:	35 c0       	rjmp	.+106    	; 0x3a2 <__stack+0x143>
     338:	34 c0       	rjmp	.+104    	; 0x3a2 <__stack+0x143>
     33a:	33 c0       	rjmp	.+102    	; 0x3a2 <__stack+0x143>
     33c:	32 c0       	rjmp	.+100    	; 0x3a2 <__stack+0x143>
     33e:	31 c0       	rjmp	.+98     	; 0x3a2 <__stack+0x143>
     340:	30 c0       	rjmp	.+96     	; 0x3a2 <__stack+0x143>
     342:	2f c0       	rjmp	.+94     	; 0x3a2 <__stack+0x143>
     344:	30 c0       	rjmp	.+96     	; 0x3a6 <__stack+0x147>
     346:	2d c0       	rjmp	.+90     	; 0x3a2 <__stack+0x143>
     348:	2c c0       	rjmp	.+88     	; 0x3a2 <__stack+0x143>
     34a:	2b c0       	rjmp	.+86     	; 0x3a2 <__stack+0x143>
     34c:	2a c0       	rjmp	.+84     	; 0x3a2 <__stack+0x143>
     34e:	29 c0       	rjmp	.+82     	; 0x3a2 <__stack+0x143>
handleMessage():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     350:	85 e0       	ldi	r24, 0x05	; 5
     352:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <myMP3+0x20>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _handleParameter = parameter;
  _isAvailable = true;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <myMP3+0x24>
available():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:288
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
  }
  
  return _isAvailable;
     35c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <myMP3+0x24>
     360:	92 cf       	rjmp	.-220    	; 0x286 <__stack+0x27>
parseStack():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:165
  switch (_handleCommand) {
    case 0x3D:
      handleMessage(DFPlayerPlayFinished, _handleParameter);
      break;
    case 0x3F:
      if (_handleParameter & 0x01) {
     362:	80 ff       	sbrs	r24, 0
     364:	02 c0       	rjmp	.+4      	; 0x36a <__stack+0x10b>
handleMessage():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     366:	89 e0       	ldi	r24, 0x09	; 9
     368:	f4 cf       	rjmp	.-24     	; 0x352 <__stack+0xf3>
parseStack():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:168
      break;
    case 0x3F:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBOnline, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     36a:	81 ff       	sbrs	r24, 1
     36c:	02 c0       	rjmp	.+4      	; 0x372 <__stack+0x113>
handleMessage():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     36e:	84 e0       	ldi	r24, 0x04	; 4
     370:	f0 cf       	rjmp	.-32     	; 0x352 <__stack+0xf3>
parseStack():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:171
        handleMessage(DFPlayerUSBOnline, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardOnline, _handleParameter);
      }
      else if (_handleParameter & 0x03) {
     372:	83 70       	andi	r24, 0x03	; 3
     374:	99 27       	eor	r25, r25
     376:	89 2b       	or	r24, r25
     378:	89 f3       	breq	.-30     	; 0x35c <__stack+0xfd>
handleMessage():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     37a:	8a e0       	ldi	r24, 0x0A	; 10
     37c:	ea cf       	rjmp	.-44     	; 0x352 <__stack+0xf3>
parseStack():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:176
      else if (_handleParameter & 0x03) {
        handleMessage(DFPlayerCardUSBOnline, _handleParameter);
      }
      break;
    case 0x3A:
      if (_handleParameter & 0x01) {
     37e:	80 ff       	sbrs	r24, 0
     380:	02 c0       	rjmp	.+4      	; 0x386 <__stack+0x127>
handleMessage():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     382:	87 e0       	ldi	r24, 0x07	; 7
     384:	e6 cf       	rjmp	.-52     	; 0x352 <__stack+0xf3>
parseStack():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:179
      break;
    case 0x3A:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBInserted, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     386:	81 ff       	sbrs	r24, 1
     388:	e9 cf       	rjmp	.-46     	; 0x35c <__stack+0xfd>
handleMessage():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     38a:	82 e0       	ldi	r24, 0x02	; 2
     38c:	e2 cf       	rjmp	.-60     	; 0x352 <__stack+0xf3>
parseStack():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:184
      else if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardInserted, _handleParameter);
      }
      break;
    case 0x3B:
      if (_handleParameter & 0x01) {
     38e:	80 ff       	sbrs	r24, 0
     390:	02 c0       	rjmp	.+4      	; 0x396 <__stack+0x137>
handleMessage():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     392:	88 e0       	ldi	r24, 0x08	; 8
     394:	de cf       	rjmp	.-68     	; 0x352 <__stack+0xf3>
parseStack():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:187
      break;
    case 0x3B:
      if (_handleParameter & 0x01) {
        handleMessage(DFPlayerUSBRemoved, _handleParameter);
      }
      else if (_handleParameter & 0x02) {
     396:	81 ff       	sbrs	r24, 1
     398:	e1 cf       	rjmp	.-62     	; 0x35c <__stack+0xfd>
handleMessage():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
     39a:	83 e0       	ldi	r24, 0x03	; 3
     39c:	da cf       	rjmp	.-76     	; 0x352 <__stack+0xf3>
     39e:	86 e0       	ldi	r24, 0x06	; 6
     3a0:	d8 cf       	rjmp	.-80     	; 0x352 <__stack+0xf3>
     3a2:	8b e0       	ldi	r24, 0x0B	; 11
     3a4:	d6 cf       	rjmp	.-84     	; 0x352 <__stack+0xf3>
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <myMP3+0x20>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     3ac:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <myMP3+0x23>
     3b0:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <myMP3+0x22>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     3b4:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <myMP3+0x24>
     3b8:	a0 cf       	rjmp	.-192    	; 0x2fa <__stack+0x9b>
available():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:284
      }
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
     3ba:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <myMP3+0x25>
     3be:	88 23       	and	r24, r24
     3c0:	69 f2       	breq	.-102    	; 0x35c <__stack+0xfd>
     3c2:	0a df       	rcall	.-492    	; 0x1d8 <millis>
     3c4:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <myMP3+0x2>
     3c8:	10 91 14 01 	lds	r17, 0x0114	; 0x800114 <myMP3+0x3>
     3cc:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <myMP3+0x4>
     3d0:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <myMP3+0x5>
     3d4:	60 1b       	sub	r22, r16
     3d6:	71 0b       	sbc	r23, r17
     3d8:	82 0b       	sbc	r24, r18
     3da:	93 0b       	sbc	r25, r19
     3dc:	00 91 17 01 	lds	r16, 0x0117	; 0x800117 <myMP3+0x6>
     3e0:	10 91 18 01 	lds	r17, 0x0118	; 0x800118 <myMP3+0x7>
     3e4:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <myMP3+0x8>
     3e8:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <myMP3+0x9>
     3ec:	60 17       	cp	r22, r16
     3ee:	71 07       	cpc	r23, r17
     3f0:	82 07       	cpc	r24, r18
     3f2:	93 07       	cpc	r25, r19
     3f4:	08 f4       	brcc	.+2      	; 0x3f8 <__stack+0x199>
     3f6:	b2 cf       	rjmp	.-156    	; 0x35c <__stack+0xfd>
handleMessage():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:132
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
     3f8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <myMP3+0x1e>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:133
  _handleType = type;
     3fc:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <myMP3+0x20>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:134
  _handleParameter = parameter;
     400:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <myMP3+0x23>
     404:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <myMP3+0x22>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:135
  _isAvailable = true;
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	38 cf       	rjmp	.-400    	; 0x27c <__stack+0x1d>

0000040c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.15]>:
sendStack():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:64
void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
     40c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <myMP3+0x17>
uint16ToArray():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:21
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
     410:	27 2f       	mov	r18, r23
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	70 93 2a 01 	sts	0x012A, r23	; 0x80012a <myMP3+0x19>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:22
  *(array+1) = (uint8_t)(value);
     418:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <myMP3+0x1a>
calculateCheckSum():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:28
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
     41c:	40 91 27 01 	lds	r20, 0x0127	; 0x800127 <myMP3+0x16>
     420:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <myMP3+0x15>
     424:	49 0f       	add	r20, r25
     426:	55 27       	eor	r21, r21
     428:	55 1f       	adc	r21, r21
     42a:	84 0f       	add	r24, r20
     42c:	95 2f       	mov	r25, r21
     42e:	91 1d       	adc	r25, r1
     430:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <myMP3+0x18>
     434:	84 0f       	add	r24, r20
     436:	91 1d       	adc	r25, r1
     438:	82 0f       	add	r24, r18
     43a:	93 1f       	adc	r25, r19
     43c:	68 0f       	add	r22, r24
     43e:	79 2f       	mov	r23, r25
     440:	71 1d       	adc	r23, r1
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:30
  }
  return -sum;
     442:	71 95       	neg	r23
     444:	61 95       	neg	r22
     446:	71 09       	sbc	r23, r1
uint16ToArray():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:21
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
     448:	70 93 2c 01 	sts	0x012C, r23	; 0x80012c <myMP3+0x1b>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:22
  *(array+1) = (uint8_t)(value);
     44c:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <myMP3+0x1c>
sendStack():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:34
  }
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
  if (_sending[Stack_ACK]) {  //if the ack mode is on wait until the last transmition
     450:	44 23       	and	r20, r20
     452:	51 f0       	breq	.+20     	; 0x468 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.15]+0x5c>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:35
    while (_isSending) {
     454:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <myMP3+0x25>
     458:	88 23       	and	r24, r24
     45a:	31 f0       	breq	.+12     	; 0x468 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.15]+0x5c>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:36
      delay(0);
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	cb 01       	movw	r24, r22
     462:	65 de       	rcall	.-822    	; 0x12e <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:37
      available();
     464:	c5 de       	rcall	.-630    	; 0x1f0 <DFRobotDFPlayerMini::available() [clone .constprop.17]>
     466:	f6 cf       	rjmp	.-20     	; 0x454 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.15]+0x48>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:50
    Serial.print(_sending[i],HEX);
    Serial.print(F(" "));
  }
  Serial.println();
#endif
  _serial->write(_sending, DFPLAYER_SEND_LENGTH);
     468:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <myMP3>
     46c:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <myMP3+0x1>
     470:	dc 01       	movw	r26, r24
     472:	ed 91       	ld	r30, X+
     474:	fc 91       	ld	r31, X
     476:	02 80       	ldd	r0, Z+2	; 0x02
     478:	f3 81       	ldd	r31, Z+3	; 0x03
     47a:	e0 2d       	mov	r30, r0
     47c:	4a e0       	ldi	r20, 0x0A	; 10
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	65 e2       	ldi	r22, 0x25	; 37
     482:	71 e0       	ldi	r23, 0x01	; 1
     484:	09 95       	icall
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:51
  _timeOutTimer = millis();
     486:	a8 de       	rcall	.-688    	; 0x1d8 <millis>
     488:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <myMP3+0x2>
     48c:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <myMP3+0x3>
     490:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <myMP3+0x4>
     494:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <myMP3+0x5>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:52
  _isSending = _sending[Stack_ACK];
     498:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <myMP3+0x18>
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	81 11       	cpse	r24, r1
     4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.15]+0x98>
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <myMP3+0x25>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:54
  
  if (!_sending[Stack_ACK]) { //if the ack mode is off wait 10 ms after one transmition.
     4a8:	81 11       	cpse	r24, r1
     4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.15]+0xaa>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:55
    delay(10);
     4ac:	6a e0       	ldi	r22, 0x0A	; 10
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	3c ce       	rjmp	.-904    	; 0x12e <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:68
void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
  sendStack();
}
     4b6:	08 95       	ret

000004b8 <SoftwareSerial::peek()>:
peek():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:481
  SREG = oldSREG;
}

int SoftwareSerial::peek()
{
  if (!isListening())
     4b8:	20 91 d9 00 	lds	r18, 0x00D9	; 0x8000d9 <SoftwareSerial::active_object>
     4bc:	30 91 da 00 	lds	r19, 0x00DA	; 0x8000da <SoftwareSerial::active_object+0x1>
     4c0:	28 17       	cp	r18, r24
     4c2:	39 07       	cpc	r19, r25
     4c4:	81 f4       	brne	.+32     	; 0x4e6 <SoftwareSerial::peek()+0x2e>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:485
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     4c6:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <SoftwareSerial::_receive_buffer_head>
     4ca:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <SoftwareSerial::_receive_buffer_tail>
     4ce:	98 17       	cp	r25, r24
     4d0:	51 f0       	breq	.+20     	; 0x4e6 <SoftwareSerial::peek()+0x2e>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:489
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     4d2:	e0 91 d7 00 	lds	r30, 0x00D7	; 0x8000d7 <SoftwareSerial::_receive_buffer_head>
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	e2 57       	subi	r30, 0x72	; 114
     4da:	ff 4f       	sbci	r31, 0xFF	; 255
     4dc:	80 81       	ld	r24, Z
     4de:	08 2e       	mov	r0, r24
     4e0:	00 0c       	add	r0, r0
     4e2:	99 0b       	sbc	r25, r25
     4e4:	08 95       	ret
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:482
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
     4e6:	8f ef       	ldi	r24, 0xFF	; 255
     4e8:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:490
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
     4ea:	08 95       	ret

000004ec <SoftwareSerial::flush()>:
flush():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:470
  return 1;
}

void SoftwareSerial::flush()
{
  if (!isListening())
     4ec:	20 91 d9 00 	lds	r18, 0x00D9	; 0x8000d9 <SoftwareSerial::active_object>
     4f0:	30 91 da 00 	lds	r19, 0x00DA	; 0x8000da <SoftwareSerial::active_object+0x1>
     4f4:	28 17       	cp	r18, r24
     4f6:	39 07       	cpc	r19, r25
     4f8:	39 f4       	brne	.+14     	; 0x508 <SoftwareSerial::flush()+0x1c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:473
    return;

  uint8_t oldSREG = SREG;
     4fa:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:474
  cli();
     4fc:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:475
  _receive_buffer_head = _receive_buffer_tail = 0;
     4fe:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <SoftwareSerial::_receive_buffer_tail>
     502:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <SoftwareSerial::_receive_buffer_head>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:476
  SREG = oldSREG;
     506:	8f bf       	out	0x3f, r24	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:477
}
     508:	08 95       	ret

0000050a <SoftwareSerial::write(unsigned char)>:
write():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:414

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
     50a:	ef 92       	push	r14
     50c:	ff 92       	push	r15
     50e:	0f 93       	push	r16
     510:	1f 93       	push	r17
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	dc 01       	movw	r26, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:415
  if (_tx_delay == 0) {
     518:	5c 96       	adiw	r26, 0x1c	; 28
     51a:	ed 90       	ld	r14, X+
     51c:	fc 90       	ld	r15, X
     51e:	5d 97       	sbiw	r26, 0x1d	; 29
     520:	e1 14       	cp	r14, r1
     522:	f1 04       	cpc	r15, r1
     524:	79 f4       	brne	.+30     	; 0x544 <SoftwareSerial::write(unsigned char)+0x3a>
_ZN5Print13setWriteErrorEi():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.h:73
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	13 96       	adiw	r26, 0x03	; 3
     52c:	9c 93       	st	X, r25
     52e:	8e 93       	st	-X, r24
     530:	12 97       	sbiw	r26, 0x02	; 2
write():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:417
    setWriteError();
    return 0;
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:466

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);

  return 1;
}
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	ff 90       	pop	r15
     540:	ef 90       	pop	r14
     542:	08 95       	ret
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:424

  // By declaring these as local variables, the compiler will put them
  // in registers _before_ disabling interrupts and entering the
  // critical timing sections below, which makes it a lot easier to
  // verify the cycle timings
  volatile uint8_t *reg = _transmitPortRegister;
     544:	51 96       	adiw	r26, 0x11	; 17
     546:	ed 91       	ld	r30, X+
     548:	fc 91       	ld	r31, X
     54a:	52 97       	sbiw	r26, 0x12	; 18
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:425
  uint8_t reg_mask = _transmitBitMask;
     54c:	50 96       	adiw	r26, 0x10	; 16
     54e:	8c 91       	ld	r24, X
     550:	50 97       	sbiw	r26, 0x10	; 16
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:426
  uint8_t inv_mask = ~_transmitBitMask;
     552:	98 2f       	mov	r25, r24
     554:	90 95       	com	r25
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:427
  uint8_t oldSREG = SREG;
     556:	0f b7       	in	r16, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:428
  bool inv = _inverse_logic;
     558:	5e 96       	adiw	r26, 0x1e	; 30
     55a:	2c 91       	ld	r18, X
     55c:	5e 97       	sbiw	r26, 0x1e	; 30
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:431
  uint16_t delay = _tx_delay;

  if (inv)
     55e:	12 2f       	mov	r17, r18
     560:	12 70       	andi	r17, 0x02	; 2
     562:	21 fd       	sbrc	r18, 1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:432
    b = ~b;
     564:	60 95       	com	r22
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:434

  cli();  // turn off interrupts for a clean txmit
     566:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:438

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
     568:	20 81       	ld	r18, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:437
    b = ~b;

  cli();  // turn off interrupts for a clean txmit

  // Write the start bit
  if (inv)
     56a:	11 23       	and	r17, r17
     56c:	19 f1       	breq	.+70     	; 0x5b4 <SoftwareSerial::write(unsigned char)+0xaa>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:438
    *reg |= reg_mask;
     56e:	28 2b       	or	r18, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:440
  else
    *reg &= inv_mask;
     570:	20 83       	st	Z, r18
_delay_loop_2():
c:\users\ian stedman\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     572:	e7 01       	movw	r28, r14
     574:	21 97       	sbiw	r28, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <SoftwareSerial::write(unsigned char)+0x6a>
     578:	28 e0       	ldi	r18, 0x08	; 8
write():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:447
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     57a:	46 2f       	mov	r20, r22
     57c:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:448
      *reg |= reg_mask; // send 1
     57e:	30 81       	ld	r19, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:447
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     580:	60 ff       	sbrs	r22, 0
     582:	1a c0       	rjmp	.+52     	; 0x5b8 <SoftwareSerial::write(unsigned char)+0xae>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:448
      *reg |= reg_mask; // send 1
     584:	38 2b       	or	r19, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:450
    else
      *reg &= inv_mask; // send 0
     586:	30 83       	st	Z, r19
_delay_loop_2():
c:\users\ian stedman\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     588:	e7 01       	movw	r28, r14
     58a:	21 97       	sbiw	r28, 0x01	; 1
     58c:	f1 f7       	brne	.-4      	; 0x58a <SoftwareSerial::write(unsigned char)+0x80>
write():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:453

    tunedDelay(delay);
    b >>= 1;
     58e:	ba 01       	movw	r22, r20
     590:	75 95       	asr	r23
     592:	67 95       	ror	r22
     594:	21 50       	subi	r18, 0x01	; 1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:445
    *reg &= inv_mask;

  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
     596:	89 f7       	brne	.-30     	; 0x57a <SoftwareSerial::write(unsigned char)+0x70>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:457
    tunedDelay(delay);
    b >>= 1;
  }

  // restore pin to natural state
  if (inv)
     598:	11 23       	and	r17, r17
     59a:	81 f0       	breq	.+32     	; 0x5bc <SoftwareSerial::write(unsigned char)+0xb2>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:458
    *reg &= inv_mask;
     59c:	80 81       	ld	r24, Z
     59e:	89 23       	and	r24, r25
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:460
  else
    *reg |= reg_mask;
     5a0:	80 83       	st	Z, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:462

  SREG = oldSREG; // turn interrupts back on
     5a2:	0f bf       	out	0x3f, r16	; 63
_delay_loop_2():
c:\users\ian stedman\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     5a4:	5c 96       	adiw	r26, 0x1c	; 28
     5a6:	8d 91       	ld	r24, X+
     5a8:	9c 91       	ld	r25, X
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <SoftwareSerial::write(unsigned char)+0xa0>
write():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:465
  tunedDelay(_tx_delay);

  return 1;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	c1 cf       	rjmp	.-126    	; 0x536 <SoftwareSerial::write(unsigned char)+0x2c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:440

  // Write the start bit
  if (inv)
    *reg |= reg_mask;
  else
    *reg &= inv_mask;
     5b4:	29 23       	and	r18, r25
     5b6:	dc cf       	rjmp	.-72     	; 0x570 <SoftwareSerial::write(unsigned char)+0x66>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:450
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
      *reg |= reg_mask; // send 1
    else
      *reg &= inv_mask; // send 0
     5b8:	39 23       	and	r19, r25
     5ba:	e5 cf       	rjmp	.-54     	; 0x586 <SoftwareSerial::write(unsigned char)+0x7c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:460

  // restore pin to natural state
  if (inv)
    *reg &= inv_mask;
  else
    *reg |= reg_mask;
     5bc:	90 81       	ld	r25, Z
     5be:	89 2b       	or	r24, r25
     5c0:	ef cf       	rjmp	.-34     	; 0x5a0 <SoftwareSerial::write(unsigned char)+0x96>

000005c2 <SoftwareSerial::available()>:
available():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:407
  return d;
}

int SoftwareSerial::available()
{
  if (!isListening())
     5c2:	20 91 d9 00 	lds	r18, 0x00D9	; 0x8000d9 <SoftwareSerial::active_object>
     5c6:	30 91 da 00 	lds	r19, 0x00DA	; 0x8000da <SoftwareSerial::active_object+0x1>
     5ca:	28 17       	cp	r18, r24
     5cc:	39 07       	cpc	r19, r25
     5ce:	69 f4       	brne	.+26     	; 0x5ea <SoftwareSerial::available()+0x28>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:410
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     5d0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <SoftwareSerial::_receive_buffer_tail>
     5d4:	20 91 d7 00 	lds	r18, 0x00D7	; 0x8000d7 <SoftwareSerial::_receive_buffer_head>
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	80 5c       	subi	r24, 0xC0	; 192
     5dc:	9f 4f       	sbci	r25, 0xFF	; 255
     5de:	82 1b       	sub	r24, r18
     5e0:	91 09       	sbc	r25, r1
     5e2:	60 e4       	ldi	r22, 0x40	; 64
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	c6 d8       	rcall	.-3700   	; 0xfffff774 <__eeprom_end+0xff7ef774>
     5e8:	08 95       	ret
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:408
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:411

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
     5ee:	08 95       	ret

000005f0 <SoftwareSerial::read()>:
read():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:392


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
     5f0:	20 91 d9 00 	lds	r18, 0x00D9	; 0x8000d9 <SoftwareSerial::active_object>
     5f4:	30 91 da 00 	lds	r19, 0x00DA	; 0x8000da <SoftwareSerial::active_object+0x1>
     5f8:	28 17       	cp	r18, r24
     5fa:	39 07       	cpc	r19, r25
     5fc:	b9 f4       	brne	.+46     	; 0x62c <SoftwareSerial::read()+0x3c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:396
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     5fe:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <SoftwareSerial::_receive_buffer_head>
     602:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <SoftwareSerial::_receive_buffer_tail>
     606:	98 17       	cp	r25, r24
     608:	89 f0       	breq	.+34     	; 0x62c <SoftwareSerial::read()+0x3c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:400
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     60a:	e0 91 d7 00 	lds	r30, 0x00D7	; 0x8000d7 <SoftwareSerial::_receive_buffer_head>
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	e2 57       	subi	r30, 0x72	; 114
     612:	ff 4f       	sbci	r31, 0xFF	; 255
     614:	80 81       	ld	r24, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:401
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     616:	20 91 d7 00 	lds	r18, 0x00D7	; 0x8000d7 <SoftwareSerial::_receive_buffer_head>
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	2f 5f       	subi	r18, 0xFF	; 255
     61e:	3f 4f       	sbci	r19, 0xFF	; 255
     620:	2f 73       	andi	r18, 0x3F	; 63
     622:	33 27       	eor	r19, r19
     624:	20 93 d7 00 	sts	0x00D7, r18	; 0x8000d7 <SoftwareSerial::_receive_buffer_head>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:402
  return d;
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	08 95       	ret
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:393

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
     62c:	8f ef       	ldi	r24, 0xFF	; 255
     62e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:403

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
     630:	08 95       	ret

00000632 <ReadSetupSwitch()>:
ReadSetupSwitch():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:254
 * Function to read the analogue input and see if the voltage matches the expected range of the setup switch.
 * Will return SWITCHPRESSED or SWITCHOPEN in response
 */

unsigned char ReadSetupSwitch()
{
     632:	cf 92       	push	r12
     634:	df 92       	push	r13
     636:	ef 92       	push	r14
     638:	ff 92       	push	r15
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:256
  float ADCReading;
  ADCReading=AvgADCRead(SELECTION_IN);
     63a:	a2 dd       	rcall	.-1212   	; 0x180 <AvgADCRead(unsigned char) [clone .constprop.11]>
     63c:	6b 01       	movw	r12, r22
     63e:	7c 01       	movw	r14, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:257
  if (ADCReading >SETUP_LOWER && ADCReading < SETUP_UPPER)
     640:	28 e4       	ldi	r18, 0x48	; 72
     642:	31 ee       	ldi	r19, 0xE1	; 225
     644:	4a ef       	ldi	r20, 0xFA	; 250
     646:	5e e3       	ldi	r21, 0x3E	; 62
     648:	7d d8       	rcall	.-3846   	; 0xfffff744 <__eeprom_end+0xff7ef744>
     64a:	18 16       	cp	r1, r24
     64c:	7c f4       	brge	.+30     	; 0x66c <ReadSetupSwitch()+0x3a>
     64e:	2a e0       	ldi	r18, 0x0A	; 10
     650:	37 ed       	ldi	r19, 0xD7	; 215
     652:	43 e8       	ldi	r20, 0x83	; 131
     654:	5f e3       	ldi	r21, 0x3F	; 63
     656:	c7 01       	movw	r24, r14
     658:	b6 01       	movw	r22, r12
     65a:	3d d7       	rcall	.+3706   	; 0x14d6 <__cmpsf2>
     65c:	87 ff       	sbrs	r24, 7
     65e:	06 c0       	rjmp	.+12     	; 0x66c <ReadSetupSwitch()+0x3a>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:259
  {
    return(SWITCHCLOSED);
     660:	87 e7       	ldi	r24, 0x77	; 119
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:267
  {
    return(SWITCHOPEN);
  }
  
  
}
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	df 90       	pop	r13
     668:	cf 90       	pop	r12
     66a:	08 95       	ret
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:263
  {
    return(SWITCHCLOSED);
  }
  else
  {
    return(SWITCHOPEN);
     66c:	86 e6       	ldi	r24, 0x66	; 102
     66e:	f9 cf       	rjmp	.-14     	; 0x662 <ReadSetupSwitch()+0x30>

00000670 <CalculateGears()>:
CalculateGears():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:96
}

byte CalculateGears(void)
{
   unsigned int GearCalc=0;
   if(ThrotNormReverse==NORMAL_THROT)
     670:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ThrotNormReverse>
     674:	84 33       	cpi	r24, 0x34	; 52
     676:	49 f5       	brne	.+82     	; 0x6ca <CalculateGears()+0x5a>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:98
      {
          GearCalc=(ForwardThrot-NeutralThrot)/5;    // Get the difference and divide by 5
     678:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <__data_end>
     67c:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <__data_end+0x1>
     680:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <NeutralThrot>
     684:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <NeutralThrot+0x1>
     688:	cf 01       	movw	r24, r30
     68a:	82 1b       	sub	r24, r18
     68c:	93 0b       	sbc	r25, r19
     68e:	65 e0       	ldi	r22, 0x05	; 5
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	5c d8       	rcall	.-3912   	; 0xfffff74c <__eeprom_end+0xff7ef74c>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:99
          FirstGear=GearCalc+NeutralThrot;
     694:	26 0f       	add	r18, r22
     696:	37 1f       	adc	r19, r23
     698:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <FirstGear+0x1>
     69c:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <FirstGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:100
          SecondGear=FirstGear+GearCalc;      
     6a0:	26 0f       	add	r18, r22
     6a2:	37 1f       	adc	r19, r23
     6a4:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <SecondGear+0x1>
     6a8:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <SecondGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:101
          ThirdGear=SecondGear+GearCalc;
     6ac:	26 0f       	add	r18, r22
     6ae:	37 1f       	adc	r19, r23
     6b0:	30 93 ff 00 	sts	0x00FF, r19	; 0x8000ff <ThirdGear+0x1>
     6b4:	20 93 fe 00 	sts	0x00FE, r18	; 0x8000fe <ThirdGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:102
          FourthGear=ForwardThrot-GearCalc;
     6b8:	e6 1b       	sub	r30, r22
     6ba:	f7 0b       	sbc	r31, r23
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:110
      {
          GearCalc=(NeutralThrot-ForwardThrot)/5;    // Get the difference and divide by 5
          FirstGear=NeutralThrot-GearCalc;
          SecondGear=FirstGear-GearCalc;      
          ThirdGear=SecondGear-GearCalc;
          FourthGear=ForwardThrot+GearCalc;
     6bc:	f0 93 fd 00 	sts	0x00FD, r31	; 0x8000fd <FourthGear+0x1>
     6c0:	e0 93 fc 00 	sts	0x00FC, r30	; 0x8000fc <FourthGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:128
      mySerial.print(F(" Neutral: "));
      mySerial.print(NeutralThrot);
      mySerial.print(F(" Reverse: "));
      mySerial.println(ReverseThrot);
      #endif
      CurrentGear=0; // For initialisation to be sure in case PWM count is way off.
     6c4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <CurrentGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:129
}
     6c8:	08 95       	ret
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:104
          FirstGear=GearCalc+NeutralThrot;
          SecondGear=FirstGear+GearCalc;      
          ThirdGear=SecondGear+GearCalc;
          FourthGear=ForwardThrot-GearCalc;
      }
      else if (ThrotNormReverse==REVERSE_THROT)
     6ca:	83 32       	cpi	r24, 0x23	; 35
     6cc:	d9 f7       	brne	.-10     	; 0x6c4 <CalculateGears()+0x54>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:106
      {
          GearCalc=(NeutralThrot-ForwardThrot)/5;    // Get the difference and divide by 5
     6ce:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <NeutralThrot>
     6d2:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <NeutralThrot+0x1>
     6d6:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <__data_end>
     6da:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <__data_end+0x1>
     6de:	c9 01       	movw	r24, r18
     6e0:	8e 1b       	sub	r24, r30
     6e2:	9f 0b       	sbc	r25, r31
     6e4:	65 e0       	ldi	r22, 0x05	; 5
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	31 d8       	rcall	.-3998   	; 0xfffff74c <__eeprom_end+0xff7ef74c>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:107
          FirstGear=NeutralThrot-GearCalc;
     6ea:	26 1b       	sub	r18, r22
     6ec:	37 0b       	sbc	r19, r23
     6ee:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <FirstGear+0x1>
     6f2:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <FirstGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:108
          SecondGear=FirstGear-GearCalc;      
     6f6:	26 1b       	sub	r18, r22
     6f8:	37 0b       	sbc	r19, r23
     6fa:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <SecondGear+0x1>
     6fe:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <SecondGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:109
          ThirdGear=SecondGear-GearCalc;
     702:	26 1b       	sub	r18, r22
     704:	37 0b       	sbc	r19, r23
     706:	30 93 ff 00 	sts	0x00FF, r19	; 0x8000ff <ThirdGear+0x1>
     70a:	20 93 fe 00 	sts	0x00FE, r18	; 0x8000fe <ThirdGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:110
          FourthGear=ForwardThrot+GearCalc;
     70e:	e6 0f       	add	r30, r22
     710:	f7 1f       	adc	r31, r23
     712:	d4 cf       	rjmp	.-88     	; 0x6bc <CalculateGears()+0x4c>

00000714 <digitalWrite>:
digitalWrite():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:139
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	fc 01       	movw	r30, r24
     718:	e6 5d       	subi	r30, 0xD6	; 214
     71a:	ff 4f       	sbci	r31, 0xFF	; 255
     71c:	34 91       	lpm	r19, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:140
  uint8_t bit = digitalPinToBitMask(pin);
     71e:	fc 01       	movw	r30, r24
     720:	e4 5c       	subi	r30, 0xC4	; 196
     722:	ff 4f       	sbci	r31, 0xFF	; 255
     724:	24 91       	lpm	r18, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:141
  uint8_t port = digitalPinToPort(pin);
     726:	fc 01       	movw	r30, r24
     728:	ea 5c       	subi	r30, 0xCA	; 202
     72a:	ff 4f       	sbci	r31, 0xFF	; 255
     72c:	e4 91       	lpm	r30, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:144
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     72e:	ee 23       	and	r30, r30
     730:	b9 f0       	breq	.+46     	; 0x760 <digitalWrite+0x4c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:148

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     732:	33 23       	and	r19, r19
     734:	29 f0       	breq	.+10     	; 0x740 <digitalWrite+0x2c>
turnOffPWM():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:67
}

static void turnOffPWM(uint8_t timer)
{
  #if defined(TCCR0A) && defined(COM0A1)
    if( timer == TIMER0A){
     736:	31 30       	cpi	r19, 0x01	; 1
     738:	a1 f4       	brne	.+40     	; 0x762 <digitalWrite+0x4e>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:68
      cbi(TCCR0A, COM0A1);
     73a:	8a b5       	in	r24, 0x2a	; 42
     73c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:74
      //cbi(TCCR0A, COM0A0);
    } else
  #endif
  #if defined(TCCR0A) && defined(COM0B1)
    if( timer == TIMER0B){
      cbi(TCCR0A, COM0B1);
     73e:	8a bd       	out	0x2a, r24	; 42
digitalWrite():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:150

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	ee 0f       	add	r30, r30
     744:	ff 1f       	adc	r31, r31
     746:	ec 5d       	subi	r30, 0xDC	; 220
     748:	ff 4f       	sbci	r31, 0xFF	; 255
     74a:	a5 91       	lpm	r26, Z+
     74c:	b4 91       	lpm	r27, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:153

  if (val == LOW) {
    uint8_t oldSREG = SREG;
     74e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:152
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);

  if (val == LOW) {
     750:	61 11       	cpse	r22, r1
     752:	18 c0       	rjmp	.+48     	; 0x784 <digitalWrite+0x70>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:154
    uint8_t oldSREG = SREG;
    cli();
     754:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:155
    *out &= ~bit;
     756:	ec 91       	ld	r30, X
     758:	20 95       	com	r18
     75a:	2e 23       	and	r18, r30
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:160
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    *out |= bit;
     75c:	2c 93       	st	X, r18
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:161
    SREG = oldSREG;
     75e:	8f bf       	out	0x3f, r24	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:163
  }
}
     760:	08 95       	ret
turnOffPWM():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:73
      cbi(TCCR0A, COM0A1);
      //cbi(TCCR0A, COM0A0);
    } else
  #endif
  #if defined(TCCR0A) && defined(COM0B1)
    if( timer == TIMER0B){
     762:	32 30       	cpi	r19, 0x02	; 2
     764:	19 f4       	brne	.+6      	; 0x76c <digitalWrite+0x58>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:74
      cbi(TCCR0A, COM0B1);
     766:	8a b5       	in	r24, 0x2a	; 42
     768:	8f 7d       	andi	r24, 0xDF	; 223
     76a:	e9 cf       	rjmp	.-46     	; 0x73e <digitalWrite+0x2a>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:106
      //cbi(TCCR1C,COM1D0);
    } else
  #else
    // Timer1 for non-x61/x7
    #if defined(TCCR1) && defined(COM1A1) // x5
      if(timer == TIMER1A){
     76c:	33 30       	cpi	r19, 0x03	; 3
     76e:	21 f4       	brne	.+8      	; 0x778 <digitalWrite+0x64>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:107
        TCCR1 &= ~(1<<COM1A1);
     770:	80 b7       	in	r24, 0x30	; 48
     772:	8f 7d       	andi	r24, 0xDF	; 223
     774:	80 bf       	out	0x30, r24	; 48
     776:	e4 cf       	rjmp	.-56     	; 0x740 <digitalWrite+0x2c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:112
        //cbi(TCCR1, COM1A0);
      } else
    #endif
    #if defined(TCCR1) && defined(COM1B1) // x5
      if( timer == TIMER1B){
     778:	34 30       	cpi	r19, 0x04	; 4
     77a:	11 f7       	brne	.-60     	; 0x740 <digitalWrite+0x2c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:113
        GTCCR &= ~(1<<COM1B1);
     77c:	8c b5       	in	r24, 0x2c	; 44
     77e:	8f 7d       	andi	r24, 0xDF	; 223
     780:	8c bd       	out	0x2c, r24	; 44
     782:	de cf       	rjmp	.-68     	; 0x740 <digitalWrite+0x2c>
digitalWrite():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:159
    cli();
    *out &= ~bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
     784:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:160
    *out |= bit;
     786:	ec 91       	ld	r30, X
     788:	2e 2b       	or	r18, r30
     78a:	e8 cf       	rjmp	.-48     	; 0x75c <digitalWrite+0x48>

0000078c <BlinkLED(unsigned char, unsigned int, unsigned int)>:
BlinkLED():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:720
    #endif

}// End loop()

void BlinkLED(byte numTimes, word ontime, word offtime)
{
     78c:	8f 92       	push	r8
     78e:	9f 92       	push	r9
     790:	af 92       	push	r10
     792:	bf 92       	push	r11
     794:	cf 92       	push	r12
     796:	df 92       	push	r13
     798:	ef 92       	push	r14
     79a:	ff 92       	push	r15
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	d8 2f       	mov	r29, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:721
  byte numblinks=0;
     7a2:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:725
  while(numblinks<numTimes)
  {
      digitalWrite(LEDPIN,LEDON);
      delay(ontime);
     7a4:	4b 01       	movw	r8, r22
     7a6:	b1 2c       	mov	r11, r1
     7a8:	a1 2c       	mov	r10, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:727
      digitalWrite(LEDPIN,LEDOFF);
      delay(offtime);
     7aa:	6a 01       	movw	r12, r20
     7ac:	f1 2c       	mov	r15, r1
     7ae:	e1 2c       	mov	r14, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:724
void BlinkLED(byte numTimes, word ontime, word offtime)
{
  byte numblinks=0;
  while(numblinks<numTimes)
  {
      digitalWrite(LEDPIN,LEDON);
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	af df       	rcall	.-162    	; 0x714 <digitalWrite>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:725
      delay(ontime);
     7b6:	c5 01       	movw	r24, r10
     7b8:	b4 01       	movw	r22, r8
     7ba:	b9 dc       	rcall	.-1678   	; 0x12e <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:726
      digitalWrite(LEDPIN,LEDOFF);
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	82 e0       	ldi	r24, 0x02	; 2
     7c0:	a9 df       	rcall	.-174    	; 0x714 <digitalWrite>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:727
      delay(offtime);
     7c2:	c7 01       	movw	r24, r14
     7c4:	b6 01       	movw	r22, r12
     7c6:	b3 dc       	rcall	.-1690   	; 0x12e <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:728
      numblinks++;
     7c8:	cf 5f       	subi	r28, 0xFF	; 255
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:722
}// End loop()

void BlinkLED(byte numTimes, word ontime, word offtime)
{
  byte numblinks=0;
  while(numblinks<numTimes)
     7ca:	dc 13       	cpse	r29, r28
     7cc:	f1 cf       	rjmp	.-30     	; 0x7b0 <BlinkLED(unsigned char, unsigned int, unsigned int)+0x24>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:731
      digitalWrite(LEDPIN,LEDOFF);
      delay(offtime);
      numblinks++;
  }    
  
}
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	ff 90       	pop	r15
     7d4:	ef 90       	pop	r14
     7d6:	df 90       	pop	r13
     7d8:	cf 90       	pop	r12
     7da:	bf 90       	pop	r11
     7dc:	af 90       	pop	r10
     7de:	9f 90       	pop	r9
     7e0:	8f 90       	pop	r8
     7e2:	08 95       	ret

000007e4 <pinMode>:
pinMode():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:33
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:35
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t bit = digitalPinToBitMask(pin);
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	fc 01       	movw	r30, r24
     7ec:	e4 5c       	subi	r30, 0xC4	; 196
     7ee:	ff 4f       	sbci	r31, 0xFF	; 255
     7f0:	24 91       	lpm	r18, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:36
  uint8_t port = digitalPinToPort(pin);
     7f2:	8a 5c       	subi	r24, 0xCA	; 202
     7f4:	9f 4f       	sbci	r25, 0xFF	; 255
     7f6:	fc 01       	movw	r30, r24
     7f8:	84 91       	lpm	r24, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:39
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     7fa:	88 23       	and	r24, r24
     7fc:	c9 f0       	breq	.+50     	; 0x830 <pinMode+0x4c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:41

  reg = portModeRegister(port);
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	88 0f       	add	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	fc 01       	movw	r30, r24
     806:	e2 5e       	subi	r30, 0xE2	; 226
     808:	ff 4f       	sbci	r31, 0xFF	; 255
     80a:	a5 91       	lpm	r26, Z+
     80c:	b4 91       	lpm	r27, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:42
  out = portOutputRegister(port);
     80e:	fc 01       	movw	r30, r24
     810:	ec 5d       	subi	r30, 0xDC	; 220
     812:	ff 4f       	sbci	r31, 0xFF	; 255
     814:	c5 91       	lpm	r28, Z+
     816:	d4 91       	lpm	r29, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:44

  if (mode == INPUT) {
     818:	61 11       	cpse	r22, r1
     81a:	0d c0       	rjmp	.+26     	; 0x836 <pinMode+0x52>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:45
    uint8_t oldSREG = SREG;
     81c:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:46
                cli();
     81e:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:47
    *reg &= ~bit;
     820:	8c 91       	ld	r24, X
     822:	20 95       	com	r18
     824:	82 23       	and	r24, r18
     826:	8c 93       	st	X, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:48
    *out &= ~bit;
     828:	88 81       	ld	r24, Y
     82a:	28 23       	and	r18, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:54
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
                cli();
    *reg &= ~bit;
    *out |= bit;
     82c:	28 83       	st	Y, r18
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:55
    SREG = oldSREG;
     82e:	9f bf       	out	0x3f, r25	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:62
    uint8_t oldSREG = SREG;
                cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	08 95       	ret
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:50
    uint8_t oldSREG = SREG;
                cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     836:	62 30       	cpi	r22, 0x02	; 2
     838:	51 f4       	brne	.+20     	; 0x84e <pinMode+0x6a>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:51
    uint8_t oldSREG = SREG;
     83a:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:52
                cli();
     83c:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:53
    *reg &= ~bit;
     83e:	3c 91       	ld	r19, X
     840:	82 2f       	mov	r24, r18
     842:	80 95       	com	r24
     844:	83 23       	and	r24, r19
     846:	8c 93       	st	X, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:54
    *out |= bit;
     848:	e8 81       	ld	r30, Y
     84a:	2e 2b       	or	r18, r30
     84c:	ef cf       	rjmp	.-34     	; 0x82c <pinMode+0x48>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:57
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     84e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:58
                cli();
     850:	f8 94       	cli
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:59
    *reg |= bit;
     852:	ec 91       	ld	r30, X
     854:	2e 2b       	or	r18, r30
     856:	2c 93       	st	X, r18
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_digital.c:60
    SREG = oldSREG;
     858:	8f bf       	out	0x3f, r24	; 63
     85a:	ea cf       	rjmp	.-44     	; 0x830 <pinMode+0x4c>

0000085c <pulseIn.constprop.13>:
pulseIn():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:33
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:38
{
    // cache the port and bit of the pin in order to speed up the
    // pulse width measuring loop and achieve finer resolution.  calling
    // digitalRead() instead yields much coarser resolution.
    uint8_t bit = digitalPinToBitMask(pin);
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	fc 01       	movw	r30, r24
     864:	e4 5c       	subi	r30, 0xC4	; 196
     866:	ff 4f       	sbci	r31, 0xFF	; 255
     868:	64 91       	lpm	r22, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:39
    uint8_t port = digitalPinToPort(pin);
     86a:	fc 01       	movw	r30, r24
     86c:	ea 5c       	subi	r30, 0xCA	; 202
     86e:	ff 4f       	sbci	r31, 0xFF	; 255
     870:	e4 91       	lpm	r30, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:46

    // convert the timeout from microseconds to a number of times through
    // the initial loop; it takes approximately 16 clock cycles per iteration
    unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

    unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	ee 0f       	add	r30, r30
     876:	ff 1f       	adc	r31, r31
     878:	e0 5d       	subi	r30, 0xD0	; 208
     87a:	ff 4f       	sbci	r31, 0xFF	; 255
     87c:	85 91       	lpm	r24, Z+
     87e:	94 91       	lpm	r25, Z
     880:	00 e4       	ldi	r16, 0x40	; 64
     882:	12 e4       	ldi	r17, 0x42	; 66
     884:	2f e0       	ldi	r18, 0x0F	; 15
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	46 2f       	mov	r20, r22
     88a:	73 d2       	rcall	.+1254   	; 0xd72 <countPulseASM>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:49

    // prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
    if (width)
     88c:	61 15       	cp	r22, r1
     88e:	71 05       	cpc	r23, r1
     890:	81 05       	cpc	r24, r1
     892:	91 05       	cpc	r25, r1
     894:	29 f0       	breq	.+10     	; 0x8a0 <pulseIn.constprop.13+0x44>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:50
        return clockCyclesToMicroseconds(width * 16 + 16);
     896:	6f 5f       	subi	r22, 0xFF	; 255
     898:	7f 4f       	sbci	r23, 0xFF	; 255
     89a:	8f 4f       	sbci	r24, 0xFF	; 255
     89c:	9f 4f       	sbci	r25, 0xFF	; 255
     89e:	9f 70       	andi	r25, 0x0F	; 15
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.c:53
    else
        return 0;
}
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	08 95       	ret

000008a6 <CheckforPWMInputs()>:
CheckforPWMInputs():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:280
 * 10   Throttle input only
 * 11   Horn and throttle present
 */

byte CheckforPWMInputs(void)
{
     8a6:	cf 92       	push	r12
     8a8:	df 92       	push	r13
     8aa:	ef 92       	push	r14
     8ac:	ff 92       	push	r15
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:284
  int pwm1,pwm2;
  byte pwmfound=0;

  pwm1=pulseIn(HORN_IN,HIGH);
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	d5 df       	rcall	.-86     	; 0x85c <pulseIn.constprop.13>
     8b2:	6b 01       	movw	r12, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:285
  pwm2=pulseIn(THROTTLE_IN,HIGH);
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	d2 df       	rcall	.-92     	; 0x85c <pulseIn.constprop.13>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:287

  if(pwm1>500 && pwm1 <3000)
     8b8:	25 ef       	ldi	r18, 0xF5	; 245
     8ba:	c2 1a       	sub	r12, r18
     8bc:	21 e0       	ldi	r18, 0x01	; 1
     8be:	d2 0a       	sbc	r13, r18
     8c0:	21 e0       	ldi	r18, 0x01	; 1
     8c2:	33 ec       	ldi	r19, 0xC3	; 195
     8c4:	c3 16       	cp	r12, r19
     8c6:	39 e0       	ldi	r19, 0x09	; 9
     8c8:	d3 06       	cpc	r13, r19
     8ca:	08 f0       	brcs	.+2      	; 0x8ce <CheckforPWMInputs()+0x28>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:291
  {
    pwmfound=1;   // Found horn PWM
  }
  if (pwm2>500 && pwm2 <3000)
     8ce:	ab 01       	movw	r20, r22
     8d0:	45 5f       	subi	r20, 0xF5	; 245
     8d2:	51 40       	sbci	r21, 0x01	; 1
     8d4:	43 3c       	cpi	r20, 0xC3	; 195
     8d6:	59 40       	sbci	r21, 0x09	; 9
     8d8:	08 f4       	brcc	.+2      	; 0x8dc <CheckforPWMInputs()+0x36>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:293
  {
    pwmfound+=10; // Found throttle PWM
     8da:	26 5f       	subi	r18, 0xF6	; 246
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:300
  #ifdef DEBUG
  mySerial.print(F(" PWM found: "));
  mySerial.println(pwmfound);
  #endif
  return(pwmfound); // Return result. Is initialised to zero in case no signals found
}
     8dc:	82 2f       	mov	r24, r18
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	08 95       	ret

000008e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
operator=():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:61
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    #if  (defined(__AVR_ATtinyX41__) && F_CPU==16000000 && CLOCK_SOURCE==0)
      EERef &operator=( uint8_t in )       { return safe_eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    #else
      EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     8e8:	1f c7       	rjmp	.+3646   	; 0x1728 <eeprom_write_byte>

000008ea <DoThrottleSetup()>:
DoThrottleSetup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:461
 * Function to read the PWM input from the throttle and store the values in EEPROM.
 * Can handle normal or reverse PWM inputs. We have to detect and store neutral, full forward throttle and full reverse throttle
 */

byte DoThrottleSetup(void)
{
     8ea:	6f 92       	push	r6
     8ec:	7f 92       	push	r7
     8ee:	8f 92       	push	r8
     8f0:	9f 92       	push	r9
     8f2:	af 92       	push	r10
     8f4:	bf 92       	push	r11
     8f6:	cf 92       	push	r12
     8f8:	df 92       	push	r13
     8fa:	ef 92       	push	r14
     8fc:	ff 92       	push	r15
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:471
    byte i=0;
    
    // First we need the neutral position, wait for user to press button
    do
    {
        Dbounce1=ReadSetupSwitch();
     906:	95 de       	rcall	.-726    	; 0x632 <ReadSetupSwitch()>
     908:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:472
        delay(DEBOUNCETIME);
     90a:	68 ec       	ldi	r22, 0xC8	; 200
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0d dc       	rcall	.-2022   	; 0x12e <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:473
        Dbounce2=ReadSetupSwitch();        
     914:	8e de       	rcall	.-740    	; 0x632 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:474
    } while(Dbounce1==SWITCHOPEN && Dbounce2==SWITCHOPEN );
     916:	c6 36       	cpi	r28, 0x66	; 102
     918:	11 f4       	brne	.+4      	; 0x91e <DoThrottleSetup()+0x34>
     91a:	86 36       	cpi	r24, 0x66	; 102
     91c:	a1 f3       	breq	.-24     	; 0x906 <DoThrottleSetup()+0x1c>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:476

    NeutralPulse=pulseIn(THROTTLE_IN, HIGH);
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	9d df       	rcall	.-198    	; 0x85c <pulseIn.constprop.13>
     922:	3b 01       	movw	r6, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:480
    #ifdef DEBUG
    mySerial.println(F("Neutral set"));
    #endif
    BlinkLED(1, 300, 300);
     924:	4c e2       	ldi	r20, 0x2C	; 44
     926:	51 e0       	ldi	r21, 0x01	; 1
     928:	6c e2       	ldi	r22, 0x2C	; 44
     92a:	71 e0       	ldi	r23, 0x01	; 1
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	2e df       	rcall	.-420    	; 0x78c <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:485
 
    //Now we need the full extent/on value, let user release switch
    do
    {
        Dbounce1=ReadSetupSwitch();
     930:	80 de       	rcall	.-768    	; 0x632 <ReadSetupSwitch()>
     932:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:486
        delay(DEBOUNCETIME);
     934:	68 ec       	ldi	r22, 0xC8	; 200
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	f8 db       	rcall	.-2064   	; 0x12e <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:487
        Dbounce2=ReadSetupSwitch();        
     93e:	79 de       	rcall	.-782    	; 0x632 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:488
    } while(Dbounce1==SWITCHCLOSED && Dbounce2==SWITCHCLOSED );      
     940:	c7 37       	cpi	r28, 0x77	; 119
     942:	11 f4       	brne	.+4      	; 0x948 <DoThrottleSetup()+0x5e>
     944:	87 37       	cpi	r24, 0x77	; 119
     946:	a1 f3       	breq	.-24     	; 0x930 <DoThrottleSetup()+0x46>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:494
    
    //Now move to final value and close switch.
    // Now we need the off position, wait for user to press button
    do
    {
        Dbounce1=ReadSetupSwitch();
     948:	74 de       	rcall	.-792    	; 0x632 <ReadSetupSwitch()>
     94a:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:495
        delay(DEBOUNCETIME);
     94c:	68 ec       	ldi	r22, 0xC8	; 200
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	ec db       	rcall	.-2088   	; 0x12e <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:496
        Dbounce2=ReadSetupSwitch();        
     956:	6d de       	rcall	.-806    	; 0x632 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:497
    } while(Dbounce1==SWITCHOPEN && Dbounce2==SWITCHOPEN );  
     958:	c6 36       	cpi	r28, 0x66	; 102
     95a:	11 f4       	brne	.+4      	; 0x960 <DoThrottleSetup()+0x76>
     95c:	86 36       	cpi	r24, 0x66	; 102
     95e:	a1 f3       	breq	.-24     	; 0x948 <DoThrottleSetup()+0x5e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:501
    #ifdef DEBUG
    mySerial.println("Full throtle set");
    #endif
    BlinkLED(2, 300, 300);
     960:	4c e2       	ldi	r20, 0x2C	; 44
     962:	51 e0       	ldi	r21, 0x01	; 1
     964:	6c e2       	ldi	r22, 0x2C	; 44
     966:	71 e0       	ldi	r23, 0x01	; 1
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	10 df       	rcall	.-480    	; 0x78c <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:502
     ForwardPulse = pulseIn(THROTTLE_IN, HIGH);   // get the timer value
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	76 df       	rcall	.-276    	; 0x85c <pulseIn.constprop.13>
     970:	4b 01       	movw	r8, r22
     972:	8b 01       	movw	r16, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:507

  //Now we need the reverse value, let user release switch
    do
    {
        Dbounce1=ReadSetupSwitch();
     974:	5e de       	rcall	.-836    	; 0x632 <ReadSetupSwitch()>
     976:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:508
        delay(DEBOUNCETIME);
     978:	68 ec       	ldi	r22, 0xC8	; 200
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	d6 db       	rcall	.-2132   	; 0x12e <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:509
        Dbounce2=ReadSetupSwitch();        
     982:	57 de       	rcall	.-850    	; 0x632 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:510
    } while(Dbounce1==SWITCHCLOSED && Dbounce2==SWITCHCLOSED );      
     984:	c7 37       	cpi	r28, 0x77	; 119
     986:	11 f4       	brne	.+4      	; 0x98c <DoThrottleSetup()+0xa2>
     988:	87 37       	cpi	r24, 0x77	; 119
     98a:	a1 f3       	breq	.-24     	; 0x974 <DoThrottleSetup()+0x8a>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:517
    //Now move to final value and close switch.
    // Now we need the off position, wait for user to press button
    
     do
    {
        Dbounce1=ReadSetupSwitch();
     98c:	52 de       	rcall	.-860    	; 0x632 <ReadSetupSwitch()>
     98e:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:518
        delay(DEBOUNCETIME);
     990:	68 ec       	ldi	r22, 0xC8	; 200
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	ca db       	rcall	.-2156   	; 0x12e <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:519
        Dbounce2=ReadSetupSwitch();        
     99a:	4b de       	rcall	.-874    	; 0x632 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:520
    } while(Dbounce1==SWITCHOPEN && Dbounce2==SWITCHOPEN );  
     99c:	c6 36       	cpi	r28, 0x66	; 102
     99e:	11 f4       	brne	.+4      	; 0x9a4 <DoThrottleSetup()+0xba>
     9a0:	86 36       	cpi	r24, 0x66	; 102
     9a2:	a1 f3       	breq	.-24     	; 0x98c <DoThrottleSetup()+0xa2>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:526
    #ifdef DEBUG
    mySerial.println("Reverse set");
    #endif
    
    
     ReversePulse = pulseIn(THROTTLE_IN, HIGH);   // get the timer value
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	5a df       	rcall	.-332    	; 0x85c <pulseIn.constprop.13>
     9a8:	6b 01       	movw	r12, r22
     9aa:	eb 01       	movw	r28, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:527
     BlinkLED(3, 300, 300);
     9ac:	4c e2       	ldi	r20, 0x2C	; 44
     9ae:	51 e0       	ldi	r21, 0x01	; 1
     9b0:	6c e2       	ldi	r22, 0x2C	; 44
     9b2:	71 e0       	ldi	r23, 0x01	; 1
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	ea de       	rcall	.-556    	; 0x78c <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:536
     * If we subtract ForwardPulse from ReversePulse and it is negative, we are looking at a reverse throtle so
     * we store REVERSE_THROT in THROT_EEPROM_DIRECTION
     * We store neutral position as-is regardl;ess of direction
     */ 
 
    if(ForwardPulse>ReversePulse)
     9b8:	c0 16       	cp	r12, r16
     9ba:	d1 06       	cpc	r13, r17
     9bc:	80 f5       	brcc	.+96     	; 0xa1e <DoThrottleSetup()+0x134>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:538
    {
        ForwardPulse+=TimerAdjustment;    // Add PWM neutral adjustment
     9be:	84 01       	movw	r16, r8
     9c0:	05 5e       	subi	r16, 0xE5	; 229
     9c2:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:539
        ReversePulse-=TimerAdjustment;
     9c4:	6b 97       	sbiw	r28, 0x1b	; 27
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:540
        EEPROM.write(THROT_EEPROM_DIRECTION ,NORMAL_THROT);
     9c6:	64 e3       	ldi	r22, 0x34	; 52
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:546
    }
    else if (ReversePulse>ForwardPulse)
    {
        ForwardPulse-=TimerAdjustment;    // Add PWM neutral adjustment
        ReversePulse+=TimerAdjustment;
        EEPROM.write(THROT_EEPROM_DIRECTION,REVERSE_THROT);
     9c8:	89 e0       	ldi	r24, 0x09	; 9
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	8d df       	rcall	.-230    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:551
    }

        Byte1=(unsigned char)(ForwardPulse&0xFF);
        Byte2=(unsigned char)(ForwardPulse>>8);
        EEPROM.write(THROT_EEPROM_FORWARD_LO,Byte1);
     9ce:	60 2f       	mov	r22, r16
     9d0:	83 e0       	ldi	r24, 0x03	; 3
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	89 df       	rcall	.-238    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:552
        EEPROM.write(THROT_EEPROM_FORWARD_HI,Byte2);
     9d6:	61 2f       	mov	r22, r17
     9d8:	84 e0       	ldi	r24, 0x04	; 4
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	85 df       	rcall	.-246    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:555
        Byte1=(unsigned char)(NeutralPulse&0xFF);
        Byte2=(unsigned char)(NeutralPulse>>8);
        EEPROM.write(THROT_EEPROM_NEUTRAL_LO,Byte1);
     9de:	66 2d       	mov	r22, r6
     9e0:	85 e0       	ldi	r24, 0x05	; 5
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	81 df       	rcall	.-254    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:556
        EEPROM.write(THROT_EEPROM_NEUTRAL_HI,Byte2);
     9e6:	67 2d       	mov	r22, r7
     9e8:	86 e0       	ldi	r24, 0x06	; 6
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	7d df       	rcall	.-262    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:559
        Byte1=(unsigned char)(ReversePulse&0xFF);
        Byte2=(unsigned char)(ReversePulse>>8);
        EEPROM.write(THROT_EEPROM_REVERSE_LO,Byte1);
     9ee:	6c 2f       	mov	r22, r28
     9f0:	87 e0       	ldi	r24, 0x07	; 7
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	79 df       	rcall	.-270    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:560
        EEPROM.write(THROT_EEPROM_REVERSE_HI,Byte2);     
     9f6:	6d 2f       	mov	r22, r29
     9f8:	88 e0       	ldi	r24, 0x08	; 8
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	75 df       	rcall	.-278    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:564
      
    return(1);
  
}
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	ff 90       	pop	r15
     a0a:	ef 90       	pop	r14
     a0c:	df 90       	pop	r13
     a0e:	cf 90       	pop	r12
     a10:	bf 90       	pop	r11
     a12:	af 90       	pop	r10
     a14:	9f 90       	pop	r9
     a16:	8f 90       	pop	r8
     a18:	7f 90       	pop	r7
     a1a:	6f 90       	pop	r6
     a1c:	08 95       	ret
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:542
    {
        ForwardPulse+=TimerAdjustment;    // Add PWM neutral adjustment
        ReversePulse-=TimerAdjustment;
        EEPROM.write(THROT_EEPROM_DIRECTION ,NORMAL_THROT);
    }
    else if (ReversePulse>ForwardPulse)
     a1e:	0c 15       	cp	r16, r12
     a20:	1d 05       	cpc	r17, r13
     a22:	a8 f6       	brcc	.-86     	; 0x9ce <DoThrottleSetup()+0xe4>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:544
    {
        ForwardPulse-=TimerAdjustment;    // Add PWM neutral adjustment
     a24:	84 01       	movw	r16, r8
     a26:	0b 51       	subi	r16, 0x1B	; 27
     a28:	11 09       	sbc	r17, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:545
        ReversePulse+=TimerAdjustment;
     a2a:	6b 96       	adiw	r28, 0x1b	; 27
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:546
        EEPROM.write(THROT_EEPROM_DIRECTION,REVERSE_THROT);
     a2c:	63 e2       	ldi	r22, 0x23	; 35
     a2e:	cc cf       	rjmp	.-104    	; 0x9c8 <DoThrottleSetup()+0xde>

00000a30 <DoHornSetup()>:
DoHornSetup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:382
/*
 * Function to read the PWM input from the horn and store the values in EEPROM.
 * Can handle normal or reverse PWM inputs
 */
byte DoHornSetup(void)
{
     a30:	cf 92       	push	r12
     a32:	df 92       	push	r13
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:392
    byte i=0;
    
    // First we need the off position, wait for user to press button
    do
    {
        Dbounce1=ReadSetupSwitch();
     a40:	f8 dd       	rcall	.-1040   	; 0x632 <ReadSetupSwitch()>
     a42:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:393
        delay(DEBOUNCETIME);
     a44:	68 ec       	ldi	r22, 0xC8	; 200
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	70 db       	rcall	.-2336   	; 0x12e <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:394
        Dbounce2=ReadSetupSwitch();        
     a4e:	f1 dd       	rcall	.-1054   	; 0x632 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:395
    } while(Dbounce1==SWITCHOPEN && Dbounce2==SWITCHOPEN );
     a50:	c6 36       	cpi	r28, 0x66	; 102
     a52:	11 f4       	brne	.+4      	; 0xa58 <DoHornSetup()+0x28>
     a54:	86 36       	cpi	r24, 0x66	; 102
     a56:	a1 f3       	breq	.-24     	; 0xa40 <DoHornSetup()+0x10>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:397

    Pulse1=pulseIn(HORN_IN, HIGH);
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	00 df       	rcall	.-512    	; 0x85c <pulseIn.constprop.13>
     a5c:	eb 01       	movw	r28, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:401
    #ifdef DEBUG
    mySerial.println(F("Hornoff"));
    #endif
    BlinkLED(1, 300, 300);
     a5e:	4c e2       	ldi	r20, 0x2C	; 44
     a60:	51 e0       	ldi	r21, 0x01	; 1
     a62:	6c e2       	ldi	r22, 0x2C	; 44
     a64:	71 e0       	ldi	r23, 0x01	; 1
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	91 de       	rcall	.-734    	; 0x78c <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:406

    //Now we need the full extent/on value, let user release switch
    do
    {
        Dbounce1=ReadSetupSwitch();
     a6a:	e3 dd       	rcall	.-1082   	; 0x632 <ReadSetupSwitch()>
     a6c:	18 2f       	mov	r17, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:407
        delay(DEBOUNCETIME);
     a6e:	68 ec       	ldi	r22, 0xC8	; 200
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	5b db       	rcall	.-2378   	; 0x12e <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:408
        Dbounce2=ReadSetupSwitch();        
     a78:	dc dd       	rcall	.-1096   	; 0x632 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:409
    } while(Dbounce1==SWITCHCLOSED && Dbounce2==SWITCHCLOSED );      
     a7a:	17 37       	cpi	r17, 0x77	; 119
     a7c:	11 f4       	brne	.+4      	; 0xa82 <DoHornSetup()+0x52>
     a7e:	87 37       	cpi	r24, 0x77	; 119
     a80:	a1 f3       	breq	.-24     	; 0xa6a <DoHornSetup()+0x3a>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:416
    //Now move to final value and close switch.
    // Now we need the off position, wait for user to press button
    
     do
    {
        Dbounce1=ReadSetupSwitch();
     a82:	d7 dd       	rcall	.-1106   	; 0x632 <ReadSetupSwitch()>
     a84:	18 2f       	mov	r17, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:417
        delay(DEBOUNCETIME);
     a86:	68 ec       	ldi	r22, 0xC8	; 200
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	4f db       	rcall	.-2402   	; 0x12e <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:418
        Dbounce2=ReadSetupSwitch();        
     a90:	d0 dd       	rcall	.-1120   	; 0x632 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:419
    } while(Dbounce1==SWITCHOPEN && Dbounce2==SWITCHOPEN );  
     a92:	16 36       	cpi	r17, 0x66	; 102
     a94:	11 f4       	brne	.+4      	; 0xa9a <DoHornSetup()+0x6a>
     a96:	86 36       	cpi	r24, 0x66	; 102
     a98:	a1 f3       	breq	.-24     	; 0xa82 <DoHornSetup()+0x52>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:421
    
     Pulse2 = pulseIn(HORN_IN, HIGH);   // get the timer value
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	df de       	rcall	.-578    	; 0x85c <pulseIn.constprop.13>
     a9e:	6b 01       	movw	r12, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:425
      #ifdef DEBUG
      mySerial.println(F("Hornon"));
      #endif
     BlinkLED(2, 300, 300);
     aa0:	4c e2       	ldi	r20, 0x2C	; 44
     aa2:	51 e0       	ldi	r21, 0x01	; 1
     aa4:	6c e2       	ldi	r22, 0x2C	; 44
     aa6:	71 e0       	ldi	r23, 0x01	; 1
     aa8:	82 e0       	ldi	r24, 0x02	; 2
     aaa:	70 de       	rcall	.-800    	; 0x78c <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:434
     * so we store pulse2 and GREATERTHAN to EEPROM
     * otherwise if pulse2-pulse1 is negative, we are looking for less than pulse 2 so we store pulse2+TimerAdjustmen
     * and LESSTHAN to EEPROM
     */ 
 
    if(Pulse2>Pulse1)
     aac:	cc 15       	cp	r28, r12
     aae:	dd 05       	cpc	r29, r13
     ab0:	c8 f4       	brcc	.+50     	; 0xae4 <DoHornSetup()+0xb4>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:436
    {
        Pulse2=Pulse2-TimerAdjustment;
     ab2:	8b e1       	ldi	r24, 0x1B	; 27
     ab4:	c8 1a       	sub	r12, r24
     ab6:	d1 08       	sbc	r13, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:439
        Byte1=(unsigned char)(Pulse2&0xFF);
        Byte2=(unsigned char)(Pulse2>>8);
        EEPROM.write(HORN_EEPROM_LO,Byte1);
     ab8:	6c 2d       	mov	r22, r12
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	14 df       	rcall	.-472    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:440
        EEPROM.write(HORN_EEPROM_HI,Byte2);
     ac0:	6d 2d       	mov	r22, r13
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	10 df       	rcall	.-480    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:441
        EEPROM.write(HORN_EEPROM_GT_LT,GREATERTHAN);
     ac8:	63 e3       	ldi	r22, 0x33	; 51
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:450
        Pulse2=Pulse2+TimerAdjustment;
        Byte1=(unsigned char)(Pulse2&0xFF);
        Byte2=(unsigned char)(Pulse2>>8);
        EEPROM.write(HORN_EEPROM_LO,Byte1);
        EEPROM.write(HORN_EEPROM_HI,Byte2);
        EEPROM.write(HORN_EEPROM_GT_LT,LESSTHAN);
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0c df       	rcall	.-488    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:453
    }
     return(1);
} // End DoHornSetup()
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	df 90       	pop	r13
     ae0:	cf 90       	pop	r12
     ae2:	08 95       	ret
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:443
        Byte2=(unsigned char)(Pulse2>>8);
        EEPROM.write(HORN_EEPROM_LO,Byte1);
        EEPROM.write(HORN_EEPROM_HI,Byte2);
        EEPROM.write(HORN_EEPROM_GT_LT,GREATERTHAN);
    }
    else if (Pulse1>Pulse2)
     ae4:	cc 16       	cp	r12, r28
     ae6:	dd 06       	cpc	r13, r29
     ae8:	98 f7       	brcc	.-26     	; 0xad0 <DoHornSetup()+0xa0>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:445
    {
        Pulse2=Pulse2+TimerAdjustment;
     aea:	8b e1       	ldi	r24, 0x1B	; 27
     aec:	c8 0e       	add	r12, r24
     aee:	d1 1c       	adc	r13, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:448
        Byte1=(unsigned char)(Pulse2&0xFF);
        Byte2=(unsigned char)(Pulse2>>8);
        EEPROM.write(HORN_EEPROM_LO,Byte1);
     af0:	6c 2d       	mov	r22, r12
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	f8 de       	rcall	.-528    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:449
        EEPROM.write(HORN_EEPROM_HI,Byte2);
     af8:	6d 2d       	mov	r22, r13
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	f4 de       	rcall	.-536    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:450
        EEPROM.write(HORN_EEPROM_GT_LT,LESSTHAN);
     b00:	62 e2       	ldi	r22, 0x22	; 34
     b02:	e3 cf       	rjmp	.-58     	; 0xaca <DoHornSetup()+0x9a>

00000b04 <ResetSettings()>:
ResetSettings():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:171
int ResetSettings(void)
{

    byte i;
    
    EEPROM.write(HORN_EEPROM_LO,0x78);
     b04:	68 e7       	ldi	r22, 0x78	; 120
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	ee de       	rcall	.-548    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:172
    EEPROM.write(HORN_EEPROM_HI,0x05); // 0x5DC = 1400 (us)
     b0c:	65 e0       	ldi	r22, 0x05	; 5
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	ea de       	rcall	.-556    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:173
    EEPROM.write(HORN_EEPROM_GT_LT,GREATERTHAN);
     b14:	63 e3       	ldi	r22, 0x33	; 51
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	e6 de       	rcall	.-564    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:176
    //Now store the default throttle settings
   
    EEPROM.write(THROT_EEPROM_FORWARD_LO,0xD0);
     b1c:	60 ed       	ldi	r22, 0xD0	; 208
     b1e:	83 e0       	ldi	r24, 0x03	; 3
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	e2 de       	rcall	.-572    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:177
    EEPROM.write(THROT_EEPROM_FORWARD_HI,0x07); // 0x7D0 = 2000 (us)
     b24:	67 e0       	ldi	r22, 0x07	; 7
     b26:	84 e0       	ldi	r24, 0x04	; 4
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	de de       	rcall	.-580    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:178
    EEPROM.write(THROT_EEPROM_NEUTRAL_LO,0xDC);
     b2c:	6c ed       	ldi	r22, 0xDC	; 220
     b2e:	85 e0       	ldi	r24, 0x05	; 5
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	da de       	rcall	.-588    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:179
    EEPROM.write(THROT_EEPROM_NEUTRAL_HI,0x05); // 0x5DC = 1500 (us)
     b34:	65 e0       	ldi	r22, 0x05	; 5
     b36:	86 e0       	ldi	r24, 0x06	; 6
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	d6 de       	rcall	.-596    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:180
    EEPROM.write(THROT_EEPROM_REVERSE_LO,0xE8);
     b3c:	68 ee       	ldi	r22, 0xE8	; 232
     b3e:	87 e0       	ldi	r24, 0x07	; 7
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	d2 de       	rcall	.-604    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:181
    EEPROM.write(THROT_EEPROM_REVERSE_HI,0x03); // 0x3E8 = 1000 (us)
     b44:	63 e0       	ldi	r22, 0x03	; 3
     b46:	88 e0       	ldi	r24, 0x08	; 8
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	ce de       	rcall	.-612    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:182
    EEPROM.write(THROT_EEPROM_DIRECTION,NORMAL_THROT);
     b4c:	64 e3       	ldi	r22, 0x34	; 52
     b4e:	89 e0       	ldi	r24, 0x09	; 9
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	ca de       	rcall	.-620    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:183
    EEPROM.write(E_INIT,'T');
     b54:	64 e5       	ldi	r22, 0x54	; 84
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	c6 de       	rcall	.-628    	; 0x8e8 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:188
    #ifdef DEBUG
    mySerial.println(F("Settings reset"));
    #endif
    //A little LED flash or 4 to indicate settings reset
    BlinkLED(4, 700, 300);
     b5c:	4c e2       	ldi	r20, 0x2C	; 44
     b5e:	51 e0       	ldi	r21, 0x01	; 1
     b60:	6c eb       	ldi	r22, 0xBC	; 188
     b62:	72 e0       	ldi	r23, 0x02	; 2
     b64:	84 e0       	ldi	r24, 0x04	; 4
     b66:	12 de       	rcall	.-988    	; 0x78c <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:189
}
     b68:	08 95       	ret

00000b6a <EEPROMClass::read(int) [clone .isra.0]>:
operator*():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     b6a:	d6 c5       	rjmp	.+2988   	; 0x1718 <eeprom_read_byte>

00000b6c <RecallSettings()>:
RecallSettings():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:137
 * Function to recall all settings from EEPROM and initilise the global variables.
 *  Easier to do this as I only have to concatenate two
 * bytes from EEPROM once. If read from EEPROM, would do this every time around loop.
 */
byte RecallSettings(void)
{
     b6c:	cf 93       	push	r28
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:140
      byte LimLo,LimHi;
      
      LimLo=EEPROM.read(HORN_EEPROM_LO);
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	fb df       	rcall	.-10     	; 0xb6a <EEPROMClass::read(int) [clone .isra.0]>
     b74:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:141
      LimHi=EEPROM.read(HORN_EEPROM_HI);
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	f7 df       	rcall	.-18     	; 0xb6a <EEPROMClass::read(int) [clone .isra.0]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:142
      HornPulseLimit=LimHi<<8 | LimLo;
     b7c:	98 2f       	mov	r25, r24
     b7e:	8c 2f       	mov	r24, r28
     b80:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <HornPulseLimit+0x1>
     b84:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <HornPulseLimit>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:143
      HornGreatOrLessThan=EEPROM.read(HORN_EEPROM_GT_LT);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	ee df       	rcall	.-36     	; 0xb6a <EEPROMClass::read(int) [clone .isra.0]>
     b8e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <HornGreatOrLessThan>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:145
      //Now read the throttle settings from EEPROM
      LimLo=EEPROM.read(THROT_EEPROM_FORWARD_LO);
     b92:	83 e0       	ldi	r24, 0x03	; 3
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	e9 df       	rcall	.-46     	; 0xb6a <EEPROMClass::read(int) [clone .isra.0]>
     b98:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:146
      LimHi=EEPROM.read(THROT_EEPROM_FORWARD_HI);
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	e5 df       	rcall	.-54     	; 0xb6a <EEPROMClass::read(int) [clone .isra.0]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:147
      ForwardThrot=LimHi<<8 | LimLo;
     ba0:	98 2f       	mov	r25, r24
     ba2:	8c 2f       	mov	r24, r28
     ba4:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__data_end+0x1>
     ba8:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:148
      LimLo=EEPROM.read(THROT_EEPROM_NEUTRAL_LO);
     bac:	85 e0       	ldi	r24, 0x05	; 5
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	dc df       	rcall	.-72     	; 0xb6a <EEPROMClass::read(int) [clone .isra.0]>
     bb2:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:149
      LimHi=EEPROM.read(THROT_EEPROM_NEUTRAL_HI);
     bb4:	86 e0       	ldi	r24, 0x06	; 6
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	d8 df       	rcall	.-80     	; 0xb6a <EEPROMClass::read(int) [clone .isra.0]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:150
      NeutralThrot=LimHi<<8 | LimLo;
     bba:	98 2f       	mov	r25, r24
     bbc:	8c 2f       	mov	r24, r28
     bbe:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <NeutralThrot+0x1>
     bc2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <NeutralThrot>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:151
      LimLo=EEPROM.read(THROT_EEPROM_REVERSE_LO);
     bc6:	87 e0       	ldi	r24, 0x07	; 7
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	cf df       	rcall	.-98     	; 0xb6a <EEPROMClass::read(int) [clone .isra.0]>
     bcc:	c8 2f       	mov	r28, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:152
      LimHi=EEPROM.read(THROT_EEPROM_REVERSE_HI);
     bce:	88 e0       	ldi	r24, 0x08	; 8
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	cb df       	rcall	.-106    	; 0xb6a <EEPROMClass::read(int) [clone .isra.0]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:153
      ReverseThrot=LimHi<<8 | LimLo;     
     bd4:	98 2f       	mov	r25, r24
     bd6:	8c 2f       	mov	r24, r28
     bd8:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <ReverseThrot+0x1>
     bdc:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <ReverseThrot>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:154
      ThrotNormReverse=EEPROM.read(THROT_EEPROM_DIRECTION);
     be0:	89 e0       	ldi	r24, 0x09	; 9
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	c2 df       	rcall	.-124    	; 0xb6a <EEPROMClass::read(int) [clone .isra.0]>
     be6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ThrotNormReverse>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:158
      #ifdef DEBUG
      mySerial.println(F("\nEEPROM Settings used "));
      #endif
}
     bea:	cf 91       	pop	r28
     bec:	08 95       	ret

00000bee <__vector_5>:
__vector_5():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:308
      #error "cannot find Millis() timer overflow vector"
    #endif
  #else
    #error "Millis() timer not defined!"
  #endif
  {
     bee:	1f 92       	push	r1
     bf0:	0f 92       	push	r0
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	0f 92       	push	r0
     bf6:	11 24       	eor	r1, r1
     bf8:	2f 93       	push	r18
     bfa:	3f 93       	push	r19
     bfc:	8f 93       	push	r24
     bfe:	9f 93       	push	r25
     c00:	af 93       	push	r26
     c02:	bf 93       	push	r27
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:311
    // copy these to local variables so they can be stored in registers
    // (volatile variables must be read from memory on every access)
    unsigned long m = millis_timer_millis;
     c04:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <millis_timer_millis>
     c08:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <millis_timer_millis+0x1>
     c0c:	a0 91 d1 00 	lds	r26, 0x00D1	; 0x8000d1 <millis_timer_millis+0x2>
     c10:	b0 91 d2 00 	lds	r27, 0x00D2	; 0x8000d2 <millis_timer_millis+0x3>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:312
    unsigned char f = millis_timer_fract;
     c14:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <millis_timer_fract>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:319
    static unsigned char correct_exact = 0;     // rollover intended
    if (++correct_exact < CORRECT_EXACT_MANY) {
      ++f;
    }
#endif
    f += FRACT_INC;
     c18:	23 e0       	ldi	r18, 0x03	; 3
     c1a:	23 0f       	add	r18, r19
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:321

    if (f >= FRACT_MAX)
     c1c:	2d 37       	cpi	r18, 0x7D	; 125
     c1e:	68 f1       	brcs	.+90     	; 0xc7a <__vector_5+0x8c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:323
    {
      f -= FRACT_MAX;
     c20:	26 e8       	ldi	r18, 0x86	; 134
     c22:	23 0f       	add	r18, r19
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:324
      m += MILLIS_INC + 1;
     c24:	02 96       	adiw	r24, 0x02	; 2
     c26:	a1 1d       	adc	r26, r1
     c28:	b1 1d       	adc	r27, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:331
    else
    {
      m += MILLIS_INC;
    }

    millis_timer_fract = f;
     c2a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <millis_timer_fract>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:332
    millis_timer_millis = m;
     c2e:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <millis_timer_millis>
     c32:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <millis_timer_millis+0x1>
     c36:	a0 93 d1 00 	sts	0x00D1, r26	; 0x8000d1 <millis_timer_millis+0x2>
     c3a:	b0 93 d2 00 	sts	0x00D2, r27	; 0x8000d2 <millis_timer_millis+0x3>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:334
#ifndef CORRECT_EXACT_MICROS
    millis_timer_overflow_count++;
     c3e:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <millis_timer_overflow_count>
     c42:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <millis_timer_overflow_count+0x1>
     c46:	a0 91 d5 00 	lds	r26, 0x00D5	; 0x8000d5 <millis_timer_overflow_count+0x2>
     c4a:	b0 91 d6 00 	lds	r27, 0x00D6	; 0x8000d6 <millis_timer_overflow_count+0x3>
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	a1 1d       	adc	r26, r1
     c52:	b1 1d       	adc	r27, r1
     c54:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <millis_timer_overflow_count>
     c58:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <millis_timer_overflow_count+0x1>
     c5c:	a0 93 d5 00 	sts	0x00D5, r26	; 0x8000d5 <millis_timer_overflow_count+0x2>
     c60:	b0 93 d6 00 	sts	0x00D6, r27	; 0x8000d6 <millis_timer_overflow_count+0x3>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:336
#endif
  }
     c64:	bf 91       	pop	r27
     c66:	af 91       	pop	r26
     c68:	9f 91       	pop	r25
     c6a:	8f 91       	pop	r24
     c6c:	3f 91       	pop	r19
     c6e:	2f 91       	pop	r18
     c70:	0f 90       	pop	r0
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	0f 90       	pop	r0
     c76:	1f 90       	pop	r1
     c78:	18 95       	reti
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:328
      f -= FRACT_MAX;
      m += MILLIS_INC + 1;
    }
    else
    {
      m += MILLIS_INC;
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	a1 1d       	adc	r26, r1
     c7e:	b1 1d       	adc	r27, r1
     c80:	d4 cf       	rjmp	.-88     	; 0xc2a <__vector_5+0x3c>

00000c82 <__vector_2>:
__vector_2():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:227
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     c82:	1f 92       	push	r1
     c84:	0f 92       	push	r0
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	0f 92       	push	r0
     c8a:	11 24       	eor	r1, r1
     c8c:	2f 93       	push	r18
     c8e:	3f 93       	push	r19
     c90:	4f 93       	push	r20
     c92:	5f 93       	push	r21
     c94:	6f 93       	push	r22
     c96:	7f 93       	push	r23
     c98:	8f 93       	push	r24
     c9a:	9f 93       	push	r25
     c9c:	af 93       	push	r26
     c9e:	bf 93       	push	r27
     ca0:	ef 93       	push	r30
     ca2:	ff 93       	push	r31
_ZN14SoftwareSerial16handle_interruptEv():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:219
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     ca4:	e0 91 d9 00 	lds	r30, 0x00D9	; 0x8000d9 <SoftwareSerial::active_object>
     ca8:	f0 91 da 00 	lds	r31, 0x00DA	; 0x8000da <SoftwareSerial::active_object+0x1>
     cac:	30 97       	sbiw	r30, 0x00	; 0
     cae:	49 f0       	breq	.+18     	; 0xcc2 <__vector_2+0x40>
     cb0:	a6 85       	ldd	r26, Z+14	; 0x0e
     cb2:	b7 85       	ldd	r27, Z+15	; 0x0f
     cb4:	85 85       	ldd	r24, Z+13	; 0x0d
recv():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:144

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     cb6:	96 8d       	ldd	r25, Z+30	; 0x1e
     cb8:	91 ff       	sbrs	r25, 1
     cba:	14 c0       	rjmp	.+40     	; 0xce4 <__vector_2+0x62>
rx_pin_read():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:209
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     cbc:	9c 91       	ld	r25, X
     cbe:	89 23       	and	r24, r25
recv():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:144

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     cc0:	a1 f4       	brne	.+40     	; 0xcea <__vector_2+0x68>
__vector_2():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:229

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     cc2:	ff 91       	pop	r31
     cc4:	ef 91       	pop	r30
     cc6:	bf 91       	pop	r27
     cc8:	af 91       	pop	r26
     cca:	9f 91       	pop	r25
     ccc:	8f 91       	pop	r24
     cce:	7f 91       	pop	r23
     cd0:	6f 91       	pop	r22
     cd2:	5f 91       	pop	r21
     cd4:	4f 91       	pop	r20
     cd6:	3f 91       	pop	r19
     cd8:	2f 91       	pop	r18
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	0f 90       	pop	r0
     ce0:	1f 90       	pop	r1
     ce2:	18 95       	reti
rx_pin_read():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:209
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     ce4:	9c 91       	ld	r25, X
     ce6:	89 23       	and	r24, r25
recv():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:144

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     ce8:	61 f7       	brne	.-40     	; 0xcc2 <__vector_2+0x40>
setRxIntMsk():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:380
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     cea:	a3 89       	ldd	r26, Z+19	; 0x13
     cec:	b4 89       	ldd	r27, Z+20	; 0x14
     cee:	9c 91       	ld	r25, X
     cf0:	85 89       	ldd	r24, Z+21	; 0x15
     cf2:	80 95       	com	r24
     cf4:	89 23       	and	r24, r25
     cf6:	8c 93       	st	X, r24
_delay_loop_2():
c:\users\ian stedman\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     cf8:	86 89       	ldd	r24, Z+22	; 0x16
     cfa:	97 89       	ldd	r25, Z+23	; 0x17
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	f1 f7       	brne	.-4      	; 0xcfc <__vector_2+0x7a>
recv():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:158
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
     d00:	60 8d       	ldd	r22, Z+24	; 0x18
     d02:	71 8d       	ldd	r23, Z+25	; 0x19
rx_pin_read():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:209
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     d04:	a6 85       	ldd	r26, Z+14	; 0x0e
     d06:	b7 85       	ldd	r27, Z+15	; 0x0f
     d08:	55 85       	ldd	r21, Z+13	; 0x0d
     d0a:	38 e0       	ldi	r19, 0x08	; 8
__vector_2():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:140
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif

  uint8_t d = 0;
     d0c:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
c:\users\ian stedman\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     d0e:	cb 01       	movw	r24, r22
     d10:	01 97       	sbiw	r24, 0x01	; 1
     d12:	f1 f7       	brne	.-4      	; 0xd10 <__vector_2+0x8e>
recv():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:159

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
     d14:	82 2f       	mov	r24, r18
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	95 95       	asr	r25
     d1a:	87 95       	ror	r24
     d1c:	28 2f       	mov	r18, r24
rx_pin_read():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:209
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     d1e:	4c 91       	ld	r20, X
     d20:	45 23       	and	r20, r21
recv():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:161
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
     d22:	09 f0       	breq	.+2      	; 0xd26 <__vector_2+0xa4>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:162
        d |= 0x80;
     d24:	20 68       	ori	r18, 0x80	; 128
     d26:	31 50       	subi	r19, 0x01	; 1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:156
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     d28:	91 f7       	brne	.-28     	; 0xd0e <__vector_2+0x8c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:165
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     d2a:	86 8d       	ldd	r24, Z+30	; 0x1e
     d2c:	81 fd       	sbrc	r24, 1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:166
      d = ~d;
     d2e:	20 95       	com	r18
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:169

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     d30:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <SoftwareSerial::_receive_buffer_tail>
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	8f 73       	andi	r24, 0x3F	; 63
     d3a:	99 27       	eor	r25, r25
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:170
    if (next != _receive_buffer_head)
     d3c:	30 91 d7 00 	lds	r19, 0x00D7	; 0x8000d7 <SoftwareSerial::_receive_buffer_head>
     d40:	38 17       	cp	r19, r24
     d42:	99 f0       	breq	.+38     	; 0xd6a <__vector_2+0xe8>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:173
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     d44:	a0 91 d8 00 	lds	r26, 0x00D8	; 0x8000d8 <SoftwareSerial::_receive_buffer_tail>
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	a2 57       	subi	r26, 0x72	; 114
     d4c:	bf 4f       	sbci	r27, 0xFF	; 255
     d4e:	2c 93       	st	X, r18
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:174
      _receive_buffer_tail = next;
     d50:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
c:\users\ian stedman\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     d54:	82 8d       	ldd	r24, Z+26	; 0x1a
     d56:	93 8d       	ldd	r25, Z+27	; 0x1b
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <__vector_2+0xd6>
setRxIntMsk():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:378
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
     d5c:	a3 89       	ldd	r26, Z+19	; 0x13
     d5e:	b4 89       	ldd	r27, Z+20	; 0x14
     d60:	8c 91       	ld	r24, X
     d62:	95 89       	ldd	r25, Z+21	; 0x15
     d64:	89 2b       	or	r24, r25
     d66:	8c 93       	st	X, r24
     d68:	ac cf       	rjmp	.-168    	; 0xcc2 <__vector_2+0x40>
recv():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:179
      _receive_buffer_tail = next;
    }
    else
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
     d6a:	86 8d       	ldd	r24, Z+30	; 0x1e
     d6c:	81 60       	ori	r24, 0x01	; 1
     d6e:	86 8f       	std	Z+30, r24	; 0x1e
     d70:	f1 cf       	rjmp	.-30     	; 0xd54 <__vector_2+0xd2>

00000d72 <countPulseASM>:
countPulseASM():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:70

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
     d72:	cf 92       	push	r12
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:71
    push r13   ;   ;  131 pushqi1/1 [length = 1]
     d74:	df 92       	push	r13
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:72
    push r14   ;   ;  132 pushqi1/1 [length = 1]
     d76:	ef 92       	push	r14
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:73
    push r15   ;   ;  133 pushqi1/1 [length = 1]
     d78:	ff 92       	push	r15
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:74
    push r16   ;   ;  134 pushqi1/1 [length = 1]
     d7a:	0f 93       	push	r16
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:75
    push r17   ;   ;  135 pushqi1/1 [length = 1]
     d7c:	1f 93       	push	r17
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:80
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
     d7e:	e8 2f       	mov	r30, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:81
    mov r31,r25  ;  port, port
     d80:	f9 2f       	mov	r31, r25
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:87
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
     d82:	08 c0       	rjmp	.+16     	; 0xd94 <countPulseASM+0x22>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:91
.L4:
/*         if (--maxloops == 0) */
.LM2:
    rjmp .LM2A ; waste an extra 5 cycles
     d84:	00 c0       	rjmp	.+0      	; 0xd86 <countPulseASM+0x14>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:93
.LM2A:
    rjmp .LM2B ;
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <countPulseASM+0x16>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:95
.LM2B:
    nop ;
     d88:	00 00       	nop
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:96
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
     d8a:	01 50       	subi	r16, 0x01	; 1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:97
    sbc r17, r1   ;  maxloops
     d8c:	11 09       	sbc	r17, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:98
    sbc r18, r1   ;  maxloops
     d8e:	21 09       	sbc	r18, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:99
    sbc r19, r1   ;  maxloops
     d90:	31 09       	sbc	r19, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:100
    breq .L13  ; ,   ;  19  branch  [length = 1]
     d92:	49 f1       	breq	.+82     	; 0xde6 <countPulseASM+0x74>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:104
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
     d94:	90 81       	ld	r25, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:105
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
     d96:	96 23       	and	r25, r22
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:106
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
     d98:	94 17       	cp	r25, r20
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:107
    breq .L4   ; ,   ;  26  branch  [length = 1]
     d9a:	a1 f3       	breq	.-24     	; 0xd84 <countPulseASM+0x12>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:108
    rjmp .L6   ;   ;  184 jump  [length = 1]
     d9c:	08 c0       	rjmp	.+16     	; 0xdae <countPulseASM+0x3c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:117
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    rjmp .LM4A ; waste an extra 5 cycles
     d9e:	00 c0       	rjmp	.+0      	; 0xda0 <countPulseASM+0x2e>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:119
.LM4A:
    rjmp .LM4B ;
     da0:	00 c0       	rjmp	.+0      	; 0xda2 <countPulseASM+0x30>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:121
.LM4B:
    nop ;
     da2:	00 00       	nop
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:122
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
     da4:	01 50       	subi	r16, 0x01	; 1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:123
    sbc r17, r1   ;  maxloops
     da6:	11 09       	sbc	r17, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:124
    sbc r18, r1   ;  maxloops
     da8:	21 09       	sbc	r18, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:125
    sbc r19, r1   ;  maxloops
     daa:	31 09       	sbc	r19, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:126
    breq .L13  ; ,   ;  33  branch  [length = 1]
     dac:	e1 f0       	breq	.+56     	; 0xde6 <countPulseASM+0x74>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:130
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
     dae:	90 81       	ld	r25, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:131
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
     db0:	96 23       	and	r25, r22
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:132
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
     db2:	94 13       	cpse	r25, r20
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:133
    rjmp .L7   ;
     db4:	f4 cf       	rjmp	.-24     	; 0xd9e <countPulseASM+0x2c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:134
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
     db6:	c1 2c       	mov	r12, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:135
    mov r13, r1   ;  width
     db8:	d1 2c       	mov	r13, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:136
    mov r14, r1   ;  width
     dba:	e1 2c       	mov	r14, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:137
    mov r15, r1   ;  width
     dbc:	f1 2c       	mov	r15, r1
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:138
    rjmp .L9   ;   ;  186 jump  [length = 1]
     dbe:	0a c0       	rjmp	.+20     	; 0xdd4 <countPulseASM+0x62>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:147
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
     dc0:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:148
    sub r12,r24  ;  width,
     dc2:	c8 1a       	sub	r12, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:149
    sbc r13,r24  ;  width,
     dc4:	d8 0a       	sbc	r13, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:150
    sbc r14,r24  ;  width,
     dc6:	e8 0a       	sbc	r14, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:151
    sbc r15,r24  ;  width,
     dc8:	f8 0a       	sbc	r15, r24
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:152
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
     dca:	0c 15       	cp	r16, r12
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:153
    cpc r17,r13  ;  maxloops, width
     dcc:	1d 05       	cpc	r17, r13
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:154
    cpc r18,r14  ;  maxloops, width
     dce:	2e 05       	cpc	r18, r14
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:155
    cpc r19,r15  ;  maxloops, width
     dd0:	3f 05       	cpc	r19, r15
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:156
    breq .L13  ; ,   ;  52  branch  [length = 1]
     dd2:	49 f0       	breq	.+18     	; 0xde6 <countPulseASM+0x74>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:160
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
     dd4:	80 81       	ld	r24, Z
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:161
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
     dd6:	86 23       	and	r24, r22
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:162
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
     dd8:	84 17       	cp	r24, r20
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:163
    breq .L10  ; ,   ;  64  branch  [length = 1]
     dda:	91 f3       	breq	.-28     	; 0xdc0 <countPulseASM+0x4e>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:169
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
     ddc:	6c 2d       	mov	r22, r12
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:170
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
     dde:	7d 2d       	mov	r23, r13
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:171
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
     de0:	8e 2d       	mov	r24, r14
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:172
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
     de2:	9f 2d       	mov	r25, r15
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:173
    rjmp .LM11 ;
     de4:	04 c0       	rjmp	.+8      	; 0xdee <countPulseASM+0x7c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:177
/* epilogue start */
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
     de6:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:178
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
     de8:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:179
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
     dea:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:180
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
     dec:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:183
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
     dee:	1f 91       	pop	r17
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:184
    pop r16  ;   ;  139 popqi [length = 1]
     df0:	0f 91       	pop	r16
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:185
    pop r15  ;   ;  140 popqi [length = 1]
     df2:	ff 90       	pop	r15
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:186
    pop r14  ;   ;  141 popqi [length = 1]
     df4:	ef 90       	pop	r14
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:187
    pop r13  ;   ;  142 popqi [length = 1]
     df6:	df 90       	pop	r13
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:188
    pop r12  ;   ;  143 popqi [length = 1]
     df8:	cf 90       	pop	r12
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring_pulse.S:189
    ret  ;  144 return_from_epilogue  [length = 1]
     dfa:	08 95       	ret

00000dfc <main>:
init():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1138
*/

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
    #if defined(WGM01) // if Timer0 has PWM
      TCCR0A = (1<<WGM01) | (1<<WGM00);
     dfc:	83 e0       	ldi	r24, 0x03	; 3
     dfe:	8a bd       	out	0x2a, r24	; 42
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1141
    #endif
    #if defined(TCCR0B) //The x61 has a wacky Timer0!
      TCCR0B = (MillisTimer_Prescale_Index << CS00);
     e00:	83 bf       	out	0x33, r24	; 51
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1162
    TCCR1A = 1<<WGM10;
    TCCR1B = (1<<WGM12) | (MillisTimer_Prescale_Index << CS10);
  #endif

  // this needs to be called before setup() or some functions won't work there
  sei();
     e02:	78 94       	sei
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1167

  #ifndef DISABLEMILLIS
    // Enable the overflow interrupt (this is the basic system tic-toc for millis)
    #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK, TOIE0);
     e04:	89 b7       	in	r24, 0x39	; 57
     e06:	82 60       	ori	r24, 0x02	; 2
     e08:	89 bf       	out	0x39, r24	; 57
initToneTimerInternal():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:958
    #elif defined(__AVR_ATtiny43__)
      TCCR1A = 3; //WGM 10=1, WGM11=1
      TCCR1B = 3; //prescaler of 64
    #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1) // ATtiny x5
      // Use the Tone Timer for fast PWM as phase correct not supported by this timer
      GTCCR = (1<<PWM1B);
     e0a:	80 e4       	ldi	r24, 0x40	; 64
     e0c:	8c bd       	out	0x2c, r24	; 44
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:959
      OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	8d bd       	out	0x2d, r24	; 45
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:960
      TCCR1 = (1<<CTC1) | (1<<PWM1A) | (ToneTimer_Prescale_Index << CS10);
     e12:	87 ec       	ldi	r24, 0xC7	; 199
     e14:	80 bf       	out	0x30, r24	; 48
init():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1214
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
    #if defined(ADCSRA)
      // set a2d prescale factor
      // ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
      // dude, this is being called on startup. We know that ADCSRA is 0! Why add a RMW cycle?!
      ADCSRA = (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
     e16:	87 e8       	ldi	r24, 0x87	; 135
     e18:	86 b9       	out	0x06, r24	; 6
begin():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:304
// Public methods
//

void SoftwareSerial::begin(long speed)
{
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     e1a:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <mySerial+0x1b>
     e1e:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <mySerial+0x1a>
     e22:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <mySerial+0x19>
     e26:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <mySerial+0x18>
     e2a:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <mySerial+0x17>
     e2e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <mySerial+0x16>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:314
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
     e32:	8d e9       	ldi	r24, 0x9D	; 157
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	90 93 f8 00 	sts	0x00F8, r25	; 0x8000f8 <mySerial+0x1d>
     e3a:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <mySerial+0x1c>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:317

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
     e3e:	30 91 e7 00 	lds	r19, 0x00E7	; 0x8000e7 <mySerial+0xc>
     e42:	36 30       	cpi	r19, 0x06	; 6
     e44:	20 f5       	brcc	.+72     	; 0xe8e <main+0x92>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:332
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     e46:	4d eb       	ldi	r20, 0xBD	; 189
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	50 93 f2 00 	sts	0x00F2, r21	; 0x8000f2 <mySerial+0x17>
     e4e:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <mySerial+0x16>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:335

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
     e52:	4b e9       	ldi	r20, 0x9B	; 155
     e54:	51 e0       	ldi	r21, 0x01	; 1
     e56:	50 93 f4 00 	sts	0x00F4, r21	; 0x8000f4 <mySerial+0x19>
     e5a:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <mySerial+0x18>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:344
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     e5e:	4c e2       	ldi	r20, 0x2C	; 44
     e60:	51 e0       	ldi	r21, 0x01	; 1
     e62:	50 93 f6 00 	sts	0x00F6, r21	; 0x8000f6 <mySerial+0x1b>
     e66:	40 93 f5 00 	sts	0x00F5, r20	; 0x8000f5 <mySerial+0x1a>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:358


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     e6a:	2b b7       	in	r18, 0x3b	; 59
     e6c:	20 62       	ori	r18, 0x20	; 32
     e6e:	2b bf       	out	0x3b, r18	; 59
main():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:361
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
     e70:	45 e3       	ldi	r20, 0x35	; 53
     e72:	50 e0       	ldi	r21, 0x00	; 0
begin():
     e74:	50 93 ef 00 	sts	0x00EF, r21	; 0x8000ef <mySerial+0x14>
     e78:	40 93 ee 00 	sts	0x00EE, r20	; 0x8000ee <mySerial+0x13>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:362
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
     e7c:	21 e0       	ldi	r18, 0x01	; 1
     e7e:	01 c0       	rjmp	.+2      	; 0xe82 <main+0x86>
     e80:	22 0f       	add	r18, r18
     e82:	3a 95       	dec	r19
     e84:	ea f7       	brpl	.-6      	; 0xe80 <main+0x84>
     e86:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <mySerial+0x15>
_delay_loop_2():
c:\users\ian stedman\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <main+0x8e>
listen():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:87

// This function sets the current object as the "listening"
// one and returns true if it replaces another
bool SoftwareSerial::listen()
{
  if (!_rx_delay_stopbit)
     e8e:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <mySerial+0x1a>
     e92:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <mySerial+0x1b>
     e96:	89 2b       	or	r24, r25
     e98:	49 f1       	breq	.+82     	; 0xeec <main+0xf0>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:90
    return false;

  if (active_object != this)
     e9a:	e0 91 d9 00 	lds	r30, 0x00D9	; 0x8000d9 <SoftwareSerial::active_object>
     e9e:	f0 91 da 00 	lds	r31, 0x00DA	; 0x8000da <SoftwareSerial::active_object+0x1>
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	eb 3d       	cpi	r30, 0xDB	; 219
     ea6:	f2 07       	cpc	r31, r18
     ea8:	09 f1       	breq	.+66     	; 0xeec <main+0xf0>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:92
  {
    if (active_object)
     eaa:	30 97       	sbiw	r30, 0x00	; 0
     eac:	39 f0       	breq	.+14     	; 0xebc <main+0xc0>
setRxIntMsk():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:380
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     eae:	a3 89       	ldd	r26, Z+19	; 0x13
     eb0:	b4 89       	ldd	r27, Z+20	; 0x14
     eb2:	9c 91       	ld	r25, X
     eb4:	85 89       	ldd	r24, Z+21	; 0x15
     eb6:	80 95       	com	r24
     eb8:	89 23       	and	r24, r25
     eba:	8c 93       	st	X, r24
listen():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:95
  if (active_object != this)
  {
    if (active_object)
      active_object->stopListening();

    _buffer_overflow = false;
     ebc:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <mySerial+0x1e>
     ec0:	8e 7f       	andi	r24, 0xFE	; 254
     ec2:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <mySerial+0x1e>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:96
    _receive_buffer_head = _receive_buffer_tail = 0;
     ec6:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <SoftwareSerial::_receive_buffer_tail>
     eca:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <SoftwareSerial::_receive_buffer_head>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:97
    active_object = this;
     ece:	8b ed       	ldi	r24, 0xDB	; 219
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	90 93 da 00 	sts	0x00DA, r25	; 0x8000da <SoftwareSerial::active_object+0x1>
     ed6:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <SoftwareSerial::active_object>
setRxIntMsk():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:378
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
     eda:	e0 91 ee 00 	lds	r30, 0x00EE	; 0x8000ee <mySerial+0x13>
     ede:	f0 91 ef 00 	lds	r31, 0x00EF	; 0x8000ef <mySerial+0x14>
     ee2:	80 81       	ld	r24, Z
     ee4:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <mySerial+0x15>
     ee8:	89 2b       	or	r24, r25
     eea:	80 83       	st	Z, r24
begin():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:99
  }
  return true;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK, bool doReset){
  _serial = &stream;
     eec:	8b ed       	ldi	r24, 0xDB	; 219
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <myMP3+0x1>
     ef4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <myMP3>
enableACK():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:77
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <myMP3+0x18>
sendStack():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:60
    delay(10);
  }
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	8c e0       	ldi	r24, 0x0C	; 12
     f04:	83 da       	rcall	.-2810   	; 0x40c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.15]>
waitAvailable():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:85
void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
}

bool DFRobotDFPlayerMini::waitAvailable(unsigned long duration){
  unsigned long timer = millis();
     f06:	68 d9       	rcall	.-3376   	; 0x1d8 <millis>
     f08:	6b 01       	movw	r12, r22
     f0a:	7c 01       	movw	r14, r24
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:89
  if (!duration) {
    duration = _timeOutDuration;
  }
  while (!available()){
     f0c:	71 d9       	rcall	.-3358   	; 0x1f0 <DFRobotDFPlayerMini::available() [clone .constprop.17]>
     f0e:	81 11       	cpse	r24, r1
     f10:	0f c0       	rjmp	.+30     	; 0xf30 <main+0x134>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:90
    if (millis() - timer > duration) {
     f12:	62 d9       	rcall	.-3388   	; 0x1d8 <millis>
     f14:	6c 19       	sub	r22, r12
     f16:	7d 09       	sbc	r23, r13
     f18:	8e 09       	sbc	r24, r14
     f1a:	9f 09       	sbc	r25, r15
     f1c:	61 3d       	cpi	r22, 0xD1	; 209
     f1e:	77 40       	sbci	r23, 0x07	; 7
     f20:	81 05       	cpc	r24, r1
     f22:	91 05       	cpc	r25, r1
     f24:	28 f4       	brcc	.+10     	; 0xf30 <main+0x134>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:93
      return false;
    }
    delay(0);
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	cb 01       	movw	r24, r22
     f2c:	00 d9       	rcall	.-3584   	; 0x12e <delay>
     f2e:	ee cf       	rjmp	.-36     	; 0xf0c <main+0x110>
begin():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:111
  }
  
  if (doReset) {
    reset();
    waitAvailable(2000);
    delay(200);
     f30:	68 ec       	ldi	r22, 0xC8	; 200
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	fa d8       	rcall	.-3596   	; 0x12e <delay>
readType():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:122

  return (readType() == DFPlayerCardOnline) || (readType() == DFPlayerUSBOnline) || !isACK;
}

uint8_t DFRobotDFPlayerMini::readType(){
  _isAvailable = false;
     f3a:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <myMP3+0x24>
setup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:60
void setup()
{
  unsigned char LimLo, LimHi;
  mySerial.begin(9600);             // My debug software serial.
  myMP3.begin(mySerial);
  delay(1000);                      // Give it time to initialise
     f3e:	68 ee       	ldi	r22, 0xE8	; 232
     f40:	73 e0       	ldi	r23, 0x03	; 3
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	f3 d8       	rcall	.-3610   	; 0x12e <delay>
volume():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:312
void DFRobotDFPlayerMini::volumeDown(){
  sendStack(0x05);
}

void DFRobotDFPlayerMini::volume(uint8_t volume){
  sendStack(0x06, volume);
     f48:	6c e1       	ldi	r22, 0x1C	; 28
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	86 e0       	ldi	r24, 0x06	; 6
     f4e:	5e da       	rcall	.-2884   	; 0x40c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.15]>
setup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:62
  myMP3.volume(28);                 // Maximum value without distortion
  pinMode(HORN_IN, INPUT_PULLUP); 
     f50:	62 e0       	ldi	r22, 0x02	; 2
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	47 dc       	rcall	.-1906   	; 0x7e4 <pinMode>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:63
  pinMode(LEDPIN,OUTPUT);
     f56:	61 e0       	ldi	r22, 0x01	; 1
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	44 dc       	rcall	.-1912   	; 0x7e4 <pinMode>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:64
  pinMode(THROTTLE_IN,INPUT_PULLUP);
     f5c:	62 e0       	ldi	r22, 0x02	; 2
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	41 dc       	rcall	.-1918   	; 0x7e4 <pinMode>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:65
  BlinkLED(1,500,500);
     f62:	44 ef       	ldi	r20, 0xF4	; 244
     f64:	51 e0       	ldi	r21, 0x01	; 1
     f66:	64 ef       	ldi	r22, 0xF4	; 244
     f68:	71 e0       	ldi	r23, 0x01	; 1
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	0f dc       	rcall	.-2018   	; 0x78c <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:67

  Scaled_V=AvgADCRead(SELECTION_IN);
     f6e:	08 d9       	rcall	.-3568   	; 0x180 <AvgADCRead(unsigned char) [clone .constprop.11]>
     f70:	6b 01       	movw	r12, r22
     f72:	7c 01       	movw	r14, r24
     f74:	c0 92 0d 01 	sts	0x010D, r12	; 0x80010d <Scaled_V>
     f78:	d0 92 0e 01 	sts	0x010E, r13	; 0x80010e <Scaled_V+0x1>
     f7c:	e0 92 0f 01 	sts	0x010F, r14	; 0x80010f <Scaled_V+0x2>
     f80:	f0 92 10 01 	sts	0x0110, r15	; 0x800110 <Scaled_V+0x3>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:68
  if (Scaled_V>SETUP_LOWER && Scaled_V<SETUP_UPPER)
     f84:	28 e4       	ldi	r18, 0x48	; 72
     f86:	31 ee       	ldi	r19, 0xE1	; 225
     f88:	4a ef       	ldi	r20, 0xFA	; 250
     f8a:	5e e3       	ldi	r21, 0x3E	; 62
     f8c:	db d3       	rcall	.+1974   	; 0x1744 <__gesf2>
     f8e:	18 16       	cp	r1, r24
     f90:	2c f5       	brge	.+74     	; 0xfdc <main+0x1e0>
     f92:	2a e0       	ldi	r18, 0x0A	; 10
     f94:	37 ed       	ldi	r19, 0xD7	; 215
     f96:	43 e8       	ldi	r20, 0x83	; 131
     f98:	5f e3       	ldi	r21, 0x3F	; 63
     f9a:	c7 01       	movw	r24, r14
     f9c:	b6 01       	movw	r22, r12
     f9e:	9b d2       	rcall	.+1334   	; 0x14d6 <__cmpsf2>
     fa0:	87 ff       	sbrs	r24, 7
     fa2:	1c c0       	rjmp	.+56     	; 0xfdc <main+0x1e0>
DoSetup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:316
{
    unsigned int Timeout1=0, Timeout2=0;
    unsigned char Dbounce1=0, Dbounce2=0;
    byte PWMAvailable=0;
    //float SetupSWVal=0.0;
    digitalWrite(LEDPIN,LEDON);
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	82 e0       	ldi	r24, 0x02	; 2
     fa8:	b5 db       	rcall	.-2198   	; 0x714 <digitalWrite>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:317
    Dbounce1=ReadSetupSwitch();
     faa:	43 db       	rcall	.-2426   	; 0x632 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:318
    Timeout1=millis(); // read current time
     fac:	15 d9       	rcall	.-3542   	; 0x1d8 <millis>
     fae:	8b 01       	movw	r16, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:322
    #ifdef DEBUG
    mySerial.println(F("Setup entered"));
    #endif
    BlinkLED(6,300,300);
     fb0:	4c e2       	ldi	r20, 0x2C	; 44
     fb2:	51 e0       	ldi	r21, 0x01	; 1
     fb4:	6c e2       	ldi	r22, 0x2C	; 44
     fb6:	71 e0       	ldi	r23, 0x01	; 1
     fb8:	86 e0       	ldi	r24, 0x06	; 6
     fba:	e8 db       	rcall	.-2096   	; 0x78c <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:326
    //Wait for switch release
    do
    {
        Dbounce1=ReadSetupSwitch();
     fbc:	3a db       	rcall	.-2444   	; 0x632 <ReadSetupSwitch()>
     fbe:	d8 2f       	mov	r29, r24
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:327
        delay(DEBOUNCETIME);
     fc0:	68 ec       	ldi	r22, 0xC8	; 200
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	b2 d8       	rcall	.-3740   	; 0x12e <delay>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:328
        Dbounce2=ReadSetupSwitch();
     fca:	33 db       	rcall	.-2458   	; 0x632 <ReadSetupSwitch()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:329
        Timeout2=millis();
     fcc:	05 d9       	rcall	.-3574   	; 0x1d8 <millis>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:330
        if (Timeout2-Timeout1 >10000)
     fce:	60 1b       	sub	r22, r16
     fd0:	71 0b       	sbc	r23, r17
     fd2:	61 31       	cpi	r22, 0x11	; 17
     fd4:	77 42       	sbci	r23, 0x27	; 39
     fd6:	08 f4       	brcc	.+2      	; 0xfda <main+0x1de>
     fd8:	e9 c0       	rjmp	.+466    	; 0x11ac <main+0x3b0>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:335
        {
          #ifdef DEBUG
          mySerial.println(F("Reset settings in Dosetup"));
          #endif
          ResetSettings();
     fda:	94 dd       	rcall	.-1240   	; 0xb04 <ResetSettings()>
setup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:79
  }
  /*
   * See if the letter 'T' has been stored, indicating valid data has been set by the user.
   * If it has, recall the settings to globals.
   */
  if (EEPROM.read(E_INIT) == 'T')
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	91 e0       	ldi	r25, 0x01	; 1
     fe0:	c4 dd       	rcall	.-1144   	; 0xb6a <EEPROMClass::read(int) [clone .isra.0]>
     fe2:	84 35       	cpi	r24, 0x54	; 84
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <main+0x1ec>
     fe6:	f8 c0       	rjmp	.+496    	; 0x11d8 <main+0x3dc>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:86
     RecallSettings();
     CalculateGears();
  }
  else{  /* First run through of the software, reset to default values by calling the function below */
      ResetSettings();
      RecallSettings();
     fe8:	c1 dd       	rcall	.-1150   	; 0xb6c <RecallSettings()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:87
      CalculateGears();
     fea:	42 db       	rcall	.-2428   	; 0x670 <CalculateGears()>
loop():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:704
       }
      PreviousSound=CurrentSound;          
  }
     else if (Scaled_V>STEAM_2_LOWER && Scaled_V<STEAM_2_UPPER)
  {
      Sounds=SteamBoat2;
     fec:	03 e0       	ldi	r16, 0x03	; 3
     fee:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:694
      PreviousSound=CurrentSound;
  }
  
   else if (Scaled_V>STEAM_1_LOWER && Scaled_V<STEAM_1_UPPER)
  {
      Sounds=SteamBoat1;
     ff0:	52 e0       	ldi	r21, 0x02	; 2
     ff2:	e5 2e       	mov	r14, r21
     ff4:	f1 2c       	mov	r15, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:683
      } 
      PreviousSound=CurrentSound;
  }
  else if (Scaled_V>TUG_DIESEL_LOWER && Scaled_V<TUG_DIESEL_UPPER)
  {
      Sounds=TugDiesel;
     ff6:	cc 24       	eor	r12, r12
     ff8:	c3 94       	inc	r12
     ffa:	d1 2c       	mov	r13, r1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:648

void loop()
{
 //First check the switches input to know what sample to play
  
 Scaled_V=AvgADCRead(SELECTION_IN);
     ffc:	c1 d8       	rcall	.-3710   	; 0x180 <AvgADCRead(unsigned char) [clone .constprop.11]>
     ffe:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <Scaled_V>
    1002:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <Scaled_V+0x1>
    1006:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <Scaled_V+0x2>
    100a:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <Scaled_V+0x3>
CheckCurrentGear():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:575


byte CheckCurrentGear(void)
{
    unsigned int ThrottlePosition;
    ThrottlePosition=pulseIn(THROTTLE_IN,HIGH);  
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	25 dc       	rcall	.-1974   	; 0x85c <pulseIn.constprop.13>
    1012:	4b 01       	movw	r8, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:577
    byte PWMPresent;
    PWMPresent=CheckforPWMInputs();
    1014:	48 dc       	rcall	.-1904   	; 0x8a6 <CheckforPWMInputs()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:579

    if((PWMPresent==0)||(PWMPresent==1))  //Either no PWM inputs or just horn
    1016:	82 30       	cpi	r24, 0x02	; 2
    1018:	08 f4       	brcc	.+2      	; 0x101c <main+0x220>
    101a:	12 c1       	rjmp	.+548    	; 0x1240 <main+0x444>
    101c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <NeutralThrot>
    1020:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <NeutralThrot+0x1>
    1024:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <FirstGear>
    1028:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <FirstGear+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:590
    }
    else
    {
      

        if(ThrotNormReverse==NORMAL_THROT)
    102c:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <ThrotNormReverse>
    1030:	44 33       	cpi	r20, 0x34	; 52
    1032:	09 f0       	breq	.+2      	; 0x1036 <main+0x23a>
    1034:	d3 c0       	rjmp	.+422    	; 0x11dc <main+0x3e0>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:592
        {
            if ((ThrottlePosition > NeutralThrot) && (ThrottlePosition < FirstGear))
    1036:	88 15       	cp	r24, r8
    1038:	99 05       	cpc	r25, r9
    103a:	20 f4       	brcc	.+8      	; 0x1044 <main+0x248>
    103c:	82 16       	cp	r8, r18
    103e:	93 06       	cpc	r9, r19
    1040:	08 f4       	brcc	.+2      	; 0x1044 <main+0x248>
    1042:	fe c0       	rjmp	.+508    	; 0x1240 <main+0x444>
    1044:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <SecondGear>
    1048:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <SecondGear+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:597
            {
               return(0);
            }
            
            else if((ThrottlePosition > FirstGear) && (ThrottlePosition < SecondGear))
    104c:	28 15       	cp	r18, r8
    104e:	39 05       	cpc	r19, r9
    1050:	20 f4       	brcc	.+8      	; 0x105a <main+0x25e>
    1052:	84 16       	cp	r8, r20
    1054:	95 06       	cpc	r9, r21
    1056:	08 f4       	brcc	.+2      	; 0x105a <main+0x25e>
    1058:	f1 c0       	rjmp	.+482    	; 0x123c <main+0x440>
    105a:	20 91 fe 00 	lds	r18, 0x00FE	; 0x8000fe <ThirdGear>
    105e:	30 91 ff 00 	lds	r19, 0x00FF	; 0x8000ff <ThirdGear+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:601
            {
                return(1);
            }
            else if((ThrottlePosition > SecondGear) && (ThrottlePosition < ThirdGear))
    1062:	48 15       	cp	r20, r8
    1064:	59 05       	cpc	r21, r9
    1066:	20 f4       	brcc	.+8      	; 0x1070 <main+0x274>
    1068:	82 16       	cp	r8, r18
    106a:	93 06       	cpc	r9, r19
    106c:	08 f4       	brcc	.+2      	; 0x1070 <main+0x274>
    106e:	ea c0       	rjmp	.+468    	; 0x1244 <main+0x448>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:605
            {
                return(2);
            }
            else if((ThrottlePosition > ThirdGear) && (ThrottlePosition < FourthGear))
    1070:	28 15       	cp	r18, r8
    1072:	39 05       	cpc	r19, r9
    1074:	40 f4       	brcc	.+16     	; 0x1086 <main+0x28a>
    1076:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <FourthGear>
    107a:	30 91 fd 00 	lds	r19, 0x00FD	; 0x8000fd <FourthGear+0x1>
    107e:	82 16       	cp	r8, r18
    1080:	93 06       	cpc	r9, r19
    1082:	08 f4       	brcc	.+2      	; 0x1086 <main+0x28a>
    1084:	e1 c0       	rjmp	.+450    	; 0x1248 <main+0x44c>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:609
            {
                return(3);
            }
            else if ((ThrottlePosition < NeutralThrot) && (ThrottlePosition > ReverseThrot))    // Reverse always second gear
    1086:	88 16       	cp	r8, r24
    1088:	99 06       	cpc	r9, r25
    108a:	40 f4       	brcc	.+16     	; 0x109c <main+0x2a0>
    108c:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <ReverseThrot>
    1090:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <ReverseThrot+0x1>
    1094:	88 15       	cp	r24, r8
    1096:	99 05       	cpc	r25, r9
    1098:	08 f4       	brcc	.+2      	; 0x109c <main+0x2a0>
    109a:	d0 c0       	rjmp	.+416    	; 0x123c <main+0x440>
loop():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:649
void loop()
{
 //First check the switches input to know what sample to play
  
 Scaled_V=AvgADCRead(SELECTION_IN);
 CurrentGear=CheckCurrentGear();
    109c:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <CurrentGear>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:651

  CurrentSound=SpeedIndex[Sounds][CurrentGear];
    10a0:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    10a4:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    10a8:	ee 0f       	add	r30, r30
    10aa:	ff 1f       	adc	r31, r31
    10ac:	ee 0f       	add	r30, r30
    10ae:	ff 1f       	adc	r31, r31
    10b0:	e4 58       	subi	r30, 0x84	; 132
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	ec 0f       	add	r30, r28
    10b6:	f1 1d       	adc	r31, r1
    10b8:	80 81       	ld	r24, Z
    10ba:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <CurrentSound>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:663
 mySerial.println(CurrentSound);
 mySerial.print(F("Gear = "));
 mySerial.println(CurrentGear);
 #endif

if (myMP3.available()) 
    10be:	98 d8       	rcall	.-3792   	; 0x1f0 <DFRobotDFPlayerMini::available() [clone .constprop.17]>
    10c0:	88 23       	and	r24, r24
    10c2:	79 f0       	breq	.+30     	; 0x10e2 <main+0x2e6>
read():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:127
  _isAvailable = false;
  return _handleType;
}

uint16_t DFRobotDFPlayerMini::read(){
  _isAvailable = false;
    10c4:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <myMP3+0x24>
printDetail():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:734
  }    
  
}

void printDetail(uint8_t type, int value){
  switch (type) {
    10c8:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <myMP3+0x20>
    10cc:	82 30       	cpi	r24, 0x02	; 2
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <main+0x2d6>
    10d0:	ef c0       	rjmp	.+478    	; 0x12b0 <main+0x4b4>
    10d2:	08 f0       	brcs	.+2      	; 0x10d6 <main+0x2da>
    10d4:	bb c0       	rjmp	.+374    	; 0x124c <main+0x450>
    10d6:	88 23       	and	r24, r24
    10d8:	09 f4       	brne	.+2      	; 0x10dc <main+0x2e0>
    10da:	dd c0       	rjmp	.+442    	; 0x1296 <main+0x49a>
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	09 f4       	brne	.+2      	; 0x10e2 <main+0x2e6>
    10e0:	e1 c0       	rjmp	.+450    	; 0x12a4 <main+0x4a8>
loop():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:670
      printDetail(myMP3.readType(), myMP3.read()); //Print the detail message from DFPlayer to handle different errors and states.
  }

// Change the sample if needed
  //if (Scaled_V>NAVY_DIESEL_LOWER & Scaled_V<NAVY_DIESEL_UPPER & Sounds!=NavyDiesel)
  if (Scaled_V>NAVY_DIESEL_LOWER && Scaled_V<NAVY_DIESEL_UPPER)
    10e2:	80 90 0d 01 	lds	r8, 0x010D	; 0x80010d <Scaled_V>
    10e6:	90 90 0e 01 	lds	r9, 0x010E	; 0x80010e <Scaled_V+0x1>
    10ea:	a0 90 0f 01 	lds	r10, 0x010F	; 0x80010f <Scaled_V+0x2>
    10ee:	b0 90 10 01 	lds	r11, 0x0110	; 0x800110 <Scaled_V+0x3>
    10f2:	21 ee       	ldi	r18, 0xE1	; 225
    10f4:	3a e7       	ldi	r19, 0x7A	; 122
    10f6:	4c e8       	ldi	r20, 0x8C	; 140
    10f8:	50 e4       	ldi	r21, 0x40	; 64
    10fa:	c5 01       	movw	r24, r10
    10fc:	b4 01       	movw	r22, r8
    10fe:	22 d3       	rcall	.+1604   	; 0x1744 <__gesf2>
    1100:	18 16       	cp	r1, r24
    1102:	0c f0       	brlt	.+2      	; 0x1106 <main+0x30a>
    1104:	f5 c0       	rjmp	.+490    	; 0x12f0 <main+0x4f4>
    1106:	2b e7       	ldi	r18, 0x7B	; 123
    1108:	34 e1       	ldi	r19, 0x14	; 20
    110a:	46 e9       	ldi	r20, 0x96	; 150
    110c:	50 e4       	ldi	r21, 0x40	; 64
    110e:	c5 01       	movw	r24, r10
    1110:	b4 01       	movw	r22, r8
    1112:	e1 d1       	rcall	.+962    	; 0x14d6 <__cmpsf2>
    1114:	87 ff       	sbrs	r24, 7
    1116:	ec c0       	rjmp	.+472    	; 0x12f0 <main+0x4f4>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:672
  {
      Sounds=NavyDiesel;
    1118:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    111c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:673
      CurrentSound=SpeedIndex[Sounds][CurrentGear];
    1120:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <CurrentGear>
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	e4 58       	subi	r30, 0x84	; 132
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	60 81       	ld	r22, Z
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:705
      PreviousSound=CurrentSound;          
  }
     else if (Scaled_V>STEAM_2_LOWER && Scaled_V<STEAM_2_UPPER)
  {
      Sounds=SteamBoat2;
      CurrentSound=SpeedIndex[Sounds][CurrentGear];
    112c:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <CurrentSound>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:706
       if(CurrentSound!=PreviousSound)
    1130:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <PreviousSound>
    1134:	68 17       	cp	r22, r24
    1136:	19 f0       	breq	.+6      	; 0x113e <main+0x342>
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:320
void DFRobotDFPlayerMini::EQ(uint8_t eq) {
  sendStack(0x07, eq);
}

void DFRobotDFPlayerMini::loop(int fileNumber) {
  sendStack(0x08, fileNumber);
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	88 e0       	ldi	r24, 0x08	; 8
    113c:	67 d9       	rcall	.-3378   	; 0x40c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.15]>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:710
       {  
          myMP3.loop(CurrentSound);
       }
      PreviousSound=CurrentSound;      
    113e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <CurrentSound>
    1142:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <PreviousSound>
PlayHorn():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:200
int PlayHorn()
{
  unsigned int PWMTime;
  unsigned int Throttle;
  // Use the servo PWM input
    PWMTime = pulseIn(HORN_IN, HIGH);
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	89 db       	rcall	.-2286   	; 0x85c <pulseIn.constprop.13>
    114a:	5b 01       	movw	r10, r22
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:201
    Throttle=pulseIn(THROTTLE_IN,HIGH);
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	86 db       	rcall	.-2292   	; 0x85c <pulseIn.constprop.13>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:211
    mySerial.print(Throttle);
    mySerial.print(" PWMLimit ");
    mySerial.print(HornPulseLimit);
    
    #endif
    CurrentSound=SpeedIndex[Sounds][CurrentGear];
    1150:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1154:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1158:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <CurrentGear>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	84 58       	subi	r24, 0x84	; 132
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	82 0f       	add	r24, r18
    116a:	91 1d       	adc	r25, r1
    116c:	fc 01       	movw	r30, r24
    116e:	60 81       	ld	r22, Z
    1170:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <CurrentSound>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:213
   
    if((HornGreatOrLessThan==GREATERTHAN && PWMTime > HornPulseLimit) || (HornGreatOrLessThan==LESSTHAN && PWMTime < HornPulseLimit))
    1174:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <HornGreatOrLessThan>
    1178:	83 33       	cpi	r24, 0x33	; 51
    117a:	09 f0       	breq	.+2      	; 0x117e <main+0x382>
    117c:	11 c1       	rjmp	.+546    	; 0x13a0 <main+0x5a4>
    117e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <HornPulseLimit>
    1182:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <HornPulseLimit+0x1>
    1186:	8a 15       	cp	r24, r10
    1188:	9b 05       	cpc	r25, r11
    118a:	08 f0       	brcs	.+2      	; 0x118e <main+0x392>
    118c:	37 cf       	rjmp	.-402    	; 0xffc <main+0x200>
advertise():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:365
void DFRobotDFPlayerMini::playMp3Folder(int fileNumber){
  sendStack(0x12, fileNumber);
}

void DFRobotDFPlayerMini::advertise(int fileNumber){
  sendStack(0x13, fileNumber);
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	83 e1       	ldi	r24, 0x13	; 19
    1192:	3c d9       	rcall	.-3464   	; 0x40c <DFRobotDFPlayerMini::sendStack(unsigned char, unsigned int) [clone .constprop.15]>
PlayHorn():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:217
    {
      myMP3.advertise(CurrentSound);
      // Now switch the LED on to indicate we have detected a valid input.
      digitalWrite(LEDPIN,LEDON);
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	bd da       	rcall	.-2694   	; 0x714 <digitalWrite>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:221
      /*The delay below is to allow the advert to play out uninterrupted.
       * DO NOT need to call stopAdvertisement as it resumes playback at the end where it left off.
      */
      delay(15000);
    119a:	68 e9       	ldi	r22, 0x98	; 152
    119c:	7a e3       	ldi	r23, 0x3A	; 58
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	c5 d7       	rcall	.+3978   	; 0x212e <__TEXT_REGION_LENGTH__+0x12e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:222
      digitalWrite(LEDPIN,LEDOFF);  // Signal end of HORN/Advert.
    11a4:	61 e0       	ldi	r22, 0x01	; 1
    11a6:	82 e0       	ldi	r24, 0x02	; 2
    11a8:	b5 da       	rcall	.-2710   	; 0x714 <digitalWrite>
    11aa:	28 cf       	rjmp	.-432    	; 0xffc <main+0x200>
DoSetup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:339
          #endif
          ResetSettings();
          return(77); // Exit out now.
        }
        
    }while(Dbounce1==SWITCHCLOSED && Dbounce1==SWITCHCLOSED);
    11ac:	d7 37       	cpi	r29, 0x77	; 119
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <main+0x3b6>
    11b0:	05 cf       	rjmp	.-502    	; 0xfbc <main+0x1c0>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:341
    
    PWMAvailable=CheckforPWMInputs();
    11b2:	79 db       	rcall	.-2318   	; 0x8a6 <CheckforPWMInputs()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:347
    #ifdef DEBUG
    mySerial.print(F("PWMavail setup "));
    mySerial.println(PWMAvailable);
    #endif

    switch (PWMAvailable){
    11b4:	8a 30       	cpi	r24, 0x0A	; 10
    11b6:	39 f0       	breq	.+14     	; 0x11c6 <main+0x3ca>
    11b8:	8b 30       	cpi	r24, 0x0B	; 11
    11ba:	21 f0       	breq	.+8      	; 0x11c4 <main+0x3c8>
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	29 f4       	brne	.+10     	; 0x11ca <main+0x3ce>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:350

      case 1:             // Horn only
        DoHornSetup();
    11c0:	37 dc       	rcall	.-1938   	; 0xa30 <DoHornSetup()>
    11c2:	0c cf       	rjmp	.-488    	; 0xfdc <main+0x1e0>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:358
      case 10:            // ThrottleOnly
        DoThrottleSetup();
      break;
      
      case 11:            // Both
        DoHornSetup();
    11c4:	35 dc       	rcall	.-1942   	; 0xa30 <DoHornSetup()>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:359
        DoThrottleSetup();
    11c6:	91 db       	rcall	.-2270   	; 0x8ea <DoThrottleSetup()>
    11c8:	09 cf       	rjmp	.-494    	; 0xfdc <main+0x1e0>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:364
      break;

      case 0:               // No PWM detected so abort
      default:
            BlinkLED(6, 200, 800);
    11ca:	40 e2       	ldi	r20, 0x20	; 32
    11cc:	53 e0       	ldi	r21, 0x03	; 3
    11ce:	68 ec       	ldi	r22, 0xC8	; 200
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	86 e0       	ldi	r24, 0x06	; 6
    11d4:	db da       	rcall	.-2634   	; 0x78c <BlinkLED(unsigned char, unsigned int, unsigned int)>
    11d6:	02 cf       	rjmp	.-508    	; 0xfdc <main+0x1e0>
setup():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:85
  {
     RecallSettings();
     CalculateGears();
  }
  else{  /* First run through of the software, reset to default values by calling the function below */
      ResetSettings();
    11d8:	95 dc       	rcall	.-1750   	; 0xb04 <ResetSettings()>
    11da:	06 cf       	rjmp	.-500    	; 0xfe8 <main+0x1ec>
CheckCurrentGear():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:617
             }
        }
    
        else  // Reversed throttle channel from receiver
        {
                  if ((ThrottlePosition < NeutralThrot) &&  (ThrottlePosition > FirstGear))
    11dc:	88 16       	cp	r8, r24
    11de:	99 06       	cpc	r9, r25
    11e0:	18 f4       	brcc	.+6      	; 0x11e8 <main+0x3ec>
    11e2:	28 15       	cp	r18, r8
    11e4:	39 05       	cpc	r19, r9
    11e6:	60 f1       	brcs	.+88     	; 0x1240 <main+0x444>
    11e8:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <SecondGear>
    11ec:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <SecondGear+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:622
            {
                return(0);
            }
            
            else if((ThrottlePosition < FirstGear) && (ThrottlePosition > SecondGear))
    11f0:	82 16       	cp	r8, r18
    11f2:	93 06       	cpc	r9, r19
    11f4:	18 f4       	brcc	.+6      	; 0x11fc <main+0x400>
    11f6:	48 15       	cp	r20, r8
    11f8:	59 05       	cpc	r21, r9
    11fa:	00 f1       	brcs	.+64     	; 0x123c <main+0x440>
    11fc:	20 91 fe 00 	lds	r18, 0x00FE	; 0x8000fe <ThirdGear>
    1200:	30 91 ff 00 	lds	r19, 0x00FF	; 0x8000ff <ThirdGear+0x1>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:626
            {
                return(1);
            }
            else if((ThrottlePosition < SecondGear) && (ThrottlePosition > ThirdGear))
    1204:	84 16       	cp	r8, r20
    1206:	95 06       	cpc	r9, r21
    1208:	18 f4       	brcc	.+6      	; 0x1210 <main+0x414>
    120a:	28 15       	cp	r18, r8
    120c:	39 05       	cpc	r19, r9
    120e:	d0 f0       	brcs	.+52     	; 0x1244 <main+0x448>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:630
            {
                return(2);
            }
            else if((ThrottlePosition < ThirdGear) && (ThrottlePosition > FourthGear))
    1210:	82 16       	cp	r8, r18
    1212:	93 06       	cpc	r9, r19
    1214:	38 f4       	brcc	.+14     	; 0x1224 <main+0x428>
    1216:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <FourthGear>
    121a:	30 91 fd 00 	lds	r19, 0x00FD	; 0x8000fd <FourthGear+0x1>
    121e:	28 15       	cp	r18, r8
    1220:	39 05       	cpc	r19, r9
    1222:	90 f0       	brcs	.+36     	; 0x1248 <main+0x44c>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:634
            {
                return(3);
            }
            else if ((ThrottlePosition > NeutralThrot) && (ThrottlePosition < ReverseThrot))    // Reverse always second gear
    1224:	88 15       	cp	r24, r8
    1226:	99 05       	cpc	r25, r9
    1228:	08 f0       	brcs	.+2      	; 0x122c <main+0x430>
    122a:	38 cf       	rjmp	.-400    	; 0x109c <main+0x2a0>
    122c:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <ReverseThrot>
    1230:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <ReverseThrot+0x1>
    1234:	88 16       	cp	r8, r24
    1236:	99 06       	cpc	r9, r25
    1238:	08 f0       	brcs	.+2      	; 0x123c <main+0x440>
    123a:	30 cf       	rjmp	.-416    	; 0x109c <main+0x2a0>
main():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:636
            {
                return(1); 
    123c:	c1 e0       	ldi	r28, 0x01	; 1
    123e:	2e cf       	rjmp	.-420    	; 0x109c <main+0x2a0>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:584
    if((PWMPresent==0)||(PWMPresent==1))  //Either no PWM inputs or just horn
    {
      #ifdef DEBUG
      mySerial.println(F("Throttle not used"));
      #endif
      return(0);
    1240:	c0 e0       	ldi	r28, 0x00	; 0
    1242:	2c cf       	rjmp	.-424    	; 0x109c <main+0x2a0>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:603
            {
                return(1);
            }
            else if((ThrottlePosition > SecondGear) && (ThrottlePosition < ThirdGear))
            {
                return(2);
    1244:	c2 e0       	ldi	r28, 0x02	; 2
    1246:	2a cf       	rjmp	.-428    	; 0x109c <main+0x2a0>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:607
            }
            else if((ThrottlePosition > ThirdGear) && (ThrottlePosition < FourthGear))
            {
                return(3);
    1248:	c3 e0       	ldi	r28, 0x03	; 3
    124a:	28 cf       	rjmp	.-432    	; 0x109c <main+0x2a0>
printDetail():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:734
  }    
  
}

void printDetail(uint8_t type, int value){
  switch (type) {
    124c:	84 30       	cpi	r24, 0x04	; 4
    124e:	09 f4       	brne	.+2      	; 0x1252 <main+0x456>
    1250:	3b c0       	rjmp	.+118    	; 0x12c8 <main+0x4cc>
    1252:	a0 f1       	brcs	.+104    	; 0x12bc <main+0x4c0>
    1254:	86 30       	cpi	r24, 0x06	; 6
    1256:	09 f0       	breq	.+2      	; 0x125a <main+0x45e>
    1258:	44 cf       	rjmp	.-376    	; 0x10e2 <main+0x2e6>
read():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.cpp:128
  return _handleType;
}

uint16_t DFRobotDFPlayerMini::read(){
  _isAvailable = false;
  return _handleParameter;
    125a:	a0 90 33 01 	lds	r10, 0x0133	; 0x800133 <myMP3+0x22>
    125e:	b0 90 34 01 	lds	r11, 0x0134	; 0x800134 <myMP3+0x23>
printDetail():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:755
    case DFPlayerCardOnline:
      BlinkLED(6,300,700);
      break;

    case DFPlayerError:
     BlinkLED(15,300,700);
    1262:	4c eb       	ldi	r20, 0xBC	; 188
    1264:	52 e0       	ldi	r21, 0x02	; 2
    1266:	6c e2       	ldi	r22, 0x2C	; 44
    1268:	71 e0       	ldi	r23, 0x01	; 1
    126a:	8f e0       	ldi	r24, 0x0F	; 15
    126c:	8f da       	rcall	.-2786   	; 0x78c <BlinkLED(unsigned char, unsigned int, unsigned int)>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:756
      switch (value) {
    126e:	f5 01       	movw	r30, r10
    1270:	31 97       	sbiw	r30, 0x01	; 1
    1272:	e7 30       	cpi	r30, 0x07	; 7
    1274:	f1 05       	cpc	r31, r1
    1276:	08 f0       	brcs	.+2      	; 0x127a <main+0x47e>
    1278:	34 cf       	rjmp	.-408    	; 0x10e2 <main+0x2e6>
    127a:	ec 5b       	subi	r30, 0xBC	; 188
    127c:	f6 4f       	sbci	r31, 0xF6	; 246
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:776
          break;
        case FileMismatch:
          BlinkLED(12,300,700);
          break;
        case Advertise:
          BlinkLED(13,300,700);
    127e:	4c eb       	ldi	r20, 0xBC	; 188
    1280:	52 e0       	ldi	r21, 0x02	; 2
    1282:	6c e2       	ldi	r22, 0x2C	; 44
    1284:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:756
      BlinkLED(6,300,700);
      break;

    case DFPlayerError:
     BlinkLED(15,300,700);
      switch (value) {
    1286:	09 94       	ijmp
    1288:	25 c0       	rjmp	.+74     	; 0x12d4 <main+0x4d8>
    128a:	26 c0       	rjmp	.+76     	; 0x12d8 <main+0x4dc>
    128c:	27 c0       	rjmp	.+78     	; 0x12dc <main+0x4e0>
    128e:	28 c0       	rjmp	.+80     	; 0x12e0 <main+0x4e4>
    1290:	29 c0       	rjmp	.+82     	; 0x12e4 <main+0x4e8>
    1292:	2a c0       	rjmp	.+84     	; 0x12e8 <main+0x4ec>
    1294:	2b c0       	rjmp	.+86     	; 0x12ec <main+0x4f0>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:739
  switch (type) {
     case DFPlayerPlayFinished:
     //BlinkLED(1,200,200);
     break;
    case TimeOut:
      BlinkLED(2,300,700);
    1296:	4c eb       	ldi	r20, 0xBC	; 188
    1298:	52 e0       	ldi	r21, 0x02	; 2
    129a:	6c e2       	ldi	r22, 0x2C	; 44
    129c:	71 e0       	ldi	r23, 0x01	; 1
    129e:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:776
          break;
        case FileMismatch:
          BlinkLED(12,300,700);
          break;
        case Advertise:
          BlinkLED(13,300,700);
    12a0:	75 da       	rcall	.-2838   	; 0x78c <BlinkLED(unsigned char, unsigned int, unsigned int)>
    12a2:	1f cf       	rjmp	.-450    	; 0x10e2 <main+0x2e6>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:742
     break;
    case TimeOut:
      BlinkLED(2,300,700);
      break;
    case WrongStack:
      BlinkLED(3,300,700);
    12a4:	4c eb       	ldi	r20, 0xBC	; 188
    12a6:	52 e0       	ldi	r21, 0x02	; 2
    12a8:	6c e2       	ldi	r22, 0x2C	; 44
    12aa:	71 e0       	ldi	r23, 0x01	; 1
    12ac:	83 e0       	ldi	r24, 0x03	; 3
    12ae:	f8 cf       	rjmp	.-16     	; 0x12a0 <main+0x4a4>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:745
      break;
    case DFPlayerCardInserted:
      BlinkLED(4,300,700);
    12b0:	4c eb       	ldi	r20, 0xBC	; 188
    12b2:	52 e0       	ldi	r21, 0x02	; 2
    12b4:	6c e2       	ldi	r22, 0x2C	; 44
    12b6:	71 e0       	ldi	r23, 0x01	; 1
    12b8:	84 e0       	ldi	r24, 0x04	; 4
    12ba:	f2 cf       	rjmp	.-28     	; 0x12a0 <main+0x4a4>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:748
      break;
    case DFPlayerCardRemoved:
      BlinkLED(5,300,700);
    12bc:	4c eb       	ldi	r20, 0xBC	; 188
    12be:	52 e0       	ldi	r21, 0x02	; 2
    12c0:	6c e2       	ldi	r22, 0x2C	; 44
    12c2:	71 e0       	ldi	r23, 0x01	; 1
    12c4:	85 e0       	ldi	r24, 0x05	; 5
    12c6:	ec cf       	rjmp	.-40     	; 0x12a0 <main+0x4a4>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:751
      break;
    case DFPlayerCardOnline:
      BlinkLED(6,300,700);
    12c8:	4c eb       	ldi	r20, 0xBC	; 188
    12ca:	52 e0       	ldi	r21, 0x02	; 2
    12cc:	6c e2       	ldi	r22, 0x2C	; 44
    12ce:	71 e0       	ldi	r23, 0x01	; 1
    12d0:	86 e0       	ldi	r24, 0x06	; 6
    12d2:	e6 cf       	rjmp	.-52     	; 0x12a0 <main+0x4a4>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:758

    case DFPlayerError:
     BlinkLED(15,300,700);
      switch (value) {
        case Busy:
          BlinkLED(7,300,700);
    12d4:	87 e0       	ldi	r24, 0x07	; 7
    12d6:	e4 cf       	rjmp	.-56     	; 0x12a0 <main+0x4a4>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:761
          break;
        case Sleeping:
          BlinkLED(8,300,700);
    12d8:	88 e0       	ldi	r24, 0x08	; 8
    12da:	e2 cf       	rjmp	.-60     	; 0x12a0 <main+0x4a4>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:764
          break;
        case SerialWrongStack:
          BlinkLED(9,300,700);
    12dc:	89 e0       	ldi	r24, 0x09	; 9
    12de:	e0 cf       	rjmp	.-64     	; 0x12a0 <main+0x4a4>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:767
          break;
        case CheckSumNotMatch:
          BlinkLED(10,300,700);
    12e0:	8a e0       	ldi	r24, 0x0A	; 10
    12e2:	de cf       	rjmp	.-68     	; 0x12a0 <main+0x4a4>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:770
          break;
        case FileIndexOut:
          BlinkLED(11,300,700);
    12e4:	8b e0       	ldi	r24, 0x0B	; 11
    12e6:	dc cf       	rjmp	.-72     	; 0x12a0 <main+0x4a4>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:773
          break;
        case FileMismatch:
          BlinkLED(12,300,700);
    12e8:	8c e0       	ldi	r24, 0x0C	; 12
    12ea:	da cf       	rjmp	.-76     	; 0x12a0 <main+0x4a4>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:776
          break;
        case Advertise:
          BlinkLED(13,300,700);
    12ec:	8d e0       	ldi	r24, 0x0D	; 13
    12ee:	d8 cf       	rjmp	.-80     	; 0x12a0 <main+0x4a4>
loop():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:681
      {
        myMP3.loop(CurrentSound);
      } 
      PreviousSound=CurrentSound;
  }
  else if (Scaled_V>TUG_DIESEL_LOWER && Scaled_V<TUG_DIESEL_UPPER)
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e7       	ldi	r20, 0x70	; 112
    12f6:	50 e4       	ldi	r21, 0x40	; 64
    12f8:	c5 01       	movw	r24, r10
    12fa:	b4 01       	movw	r22, r8
    12fc:	23 d2       	rcall	.+1094   	; 0x1744 <__gesf2>
    12fe:	18 16       	cp	r1, r24
    1300:	a4 f4       	brge	.+40     	; 0x132a <main+0x52e>
    1302:	2a e9       	ldi	r18, 0x9A	; 154
    1304:	39 e9       	ldi	r19, 0x99	; 153
    1306:	41 e8       	ldi	r20, 0x81	; 129
    1308:	50 e4       	ldi	r21, 0x40	; 64
    130a:	c5 01       	movw	r24, r10
    130c:	b4 01       	movw	r22, r8
    130e:	e3 d0       	rcall	.+454    	; 0x14d6 <__cmpsf2>
    1310:	87 ff       	sbrs	r24, 7
    1312:	0b c0       	rjmp	.+22     	; 0x132a <main+0x52e>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:683
  {
      Sounds=TugDiesel;
    1314:	d0 92 61 00 	sts	0x0061, r13	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1318:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__DATA_REGION_ORIGIN__>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:684
      CurrentSound=SpeedIndex[Sounds][CurrentGear];
    131c:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <CurrentGear>
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	e4 58       	subi	r30, 0x84	; 132
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	64 81       	ldd	r22, Z+4	; 0x04
    1328:	01 cf       	rjmp	.-510    	; 0x112c <main+0x330>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:692
          myMP3.loop(CurrentSound);
        }
      PreviousSound=CurrentSound;
  }
  
   else if (Scaled_V>STEAM_1_LOWER && Scaled_V<STEAM_1_UPPER)
    132a:	2d ec       	ldi	r18, 0xCD	; 205
    132c:	3c ec       	ldi	r19, 0xCC	; 204
    132e:	4c e4       	ldi	r20, 0x4C	; 76
    1330:	50 e4       	ldi	r21, 0x40	; 64
    1332:	c5 01       	movw	r24, r10
    1334:	b4 01       	movw	r22, r8
    1336:	06 d2       	rcall	.+1036   	; 0x1744 <__gesf2>
    1338:	18 16       	cp	r1, r24
    133a:	a4 f4       	brge	.+40     	; 0x1364 <main+0x568>
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	40 e6       	ldi	r20, 0x60	; 96
    1342:	50 e4       	ldi	r21, 0x40	; 64
    1344:	c5 01       	movw	r24, r10
    1346:	b4 01       	movw	r22, r8
    1348:	c6 d0       	rcall	.+396    	; 0x14d6 <__cmpsf2>
    134a:	87 ff       	sbrs	r24, 7
    134c:	0b c0       	rjmp	.+22     	; 0x1364 <main+0x568>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:694
  {
      Sounds=SteamBoat1;
    134e:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1352:	e0 92 60 00 	sts	0x0060, r14	; 0x800060 <__DATA_REGION_ORIGIN__>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:695
      CurrentSound=SpeedIndex[Sounds][CurrentGear];
    1356:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <CurrentGear>
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	e4 58       	subi	r30, 0x84	; 132
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	60 85       	ldd	r22, Z+8	; 0x08
    1362:	e4 ce       	rjmp	.-568    	; 0x112c <main+0x330>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:702
       {  
          myMP3.loop(CurrentSound);
       }
      PreviousSound=CurrentSound;          
  }
     else if (Scaled_V>STEAM_2_LOWER && Scaled_V<STEAM_2_UPPER)
    1364:	26 e6       	ldi	r18, 0x66	; 102
    1366:	36 e6       	ldi	r19, 0x66	; 102
    1368:	46 e1       	ldi	r20, 0x16	; 22
    136a:	50 e4       	ldi	r21, 0x40	; 64
    136c:	c5 01       	movw	r24, r10
    136e:	b4 01       	movw	r22, r8
    1370:	e9 d1       	rcall	.+978    	; 0x1744 <__gesf2>
    1372:	18 16       	cp	r1, r24
    1374:	0c f0       	brlt	.+2      	; 0x1378 <main+0x57c>
    1376:	e7 ce       	rjmp	.-562    	; 0x1146 <main+0x34a>
    1378:	2a e9       	ldi	r18, 0x9A	; 154
    137a:	39 e9       	ldi	r19, 0x99	; 153
    137c:	49 e2       	ldi	r20, 0x29	; 41
    137e:	50 e4       	ldi	r21, 0x40	; 64
    1380:	c5 01       	movw	r24, r10
    1382:	b4 01       	movw	r22, r8
    1384:	a8 d0       	rcall	.+336    	; 0x14d6 <__cmpsf2>
    1386:	87 ff       	sbrs	r24, 7
    1388:	de ce       	rjmp	.-580    	; 0x1146 <main+0x34a>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:704
  {
      Sounds=SteamBoat2;
    138a:	10 93 61 00 	sts	0x0061, r17	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    138e:	00 93 60 00 	sts	0x0060, r16	; 0x800060 <__DATA_REGION_ORIGIN__>
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:705
      CurrentSound=SpeedIndex[Sounds][CurrentGear];
    1392:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <CurrentGear>
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	e4 58       	subi	r30, 0x84	; 132
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	64 85       	ldd	r22, Z+12	; 0x0c
    139e:	c6 ce       	rjmp	.-628    	; 0x112c <main+0x330>
PlayHorn():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:213
    mySerial.print(HornPulseLimit);
    
    #endif
    CurrentSound=SpeedIndex[Sounds][CurrentGear];
   
    if((HornGreatOrLessThan==GREATERTHAN && PWMTime > HornPulseLimit) || (HornGreatOrLessThan==LESSTHAN && PWMTime < HornPulseLimit))
    13a0:	82 32       	cpi	r24, 0x22	; 34
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <main+0x5aa>
    13a4:	2b ce       	rjmp	.-938    	; 0xffc <main+0x200>
    13a6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <HornPulseLimit>
    13aa:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <HornPulseLimit+0x1>
    13ae:	a8 16       	cp	r10, r24
    13b0:	b9 06       	cpc	r11, r25
    13b2:	08 f4       	brcc	.+2      	; 0x13b6 <main+0x5ba>
    13b4:	ec ce       	rjmp	.-552    	; 0x118e <main+0x392>
    13b6:	22 ce       	rjmp	.-956    	; 0xffc <main+0x200>

000013b8 <_GLOBAL__sub_I_SpeedIndex>:
_ZN5PrintC2Ev():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Print.h:75
  public:
    Print() : write_error(0) {}
    13b8:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <mySerial+0x3>
    13bc:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <mySerial+0x2>
_ZN6StreamC2Ev():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/Stream.h:64
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    13c0:	88 ee       	ldi	r24, 0xE8	; 232
    13c2:	93 e0       	ldi	r25, 0x03	; 3
    13c4:	a0 e0       	ldi	r26, 0x00	; 0
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <mySerial+0x4>
    13cc:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <mySerial+0x5>
    13d0:	a0 93 e1 00 	sts	0x00E1, r26	; 0x8000e1 <mySerial+0x6>
    13d4:	b0 93 e2 00 	sts	0x00E2, r27	; 0x8000e2 <mySerial+0x7>
__base_ctor ():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:253
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
    13d8:	80 e7       	ldi	r24, 0x70	; 112
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <mySerial+0x1>
    13e0:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <mySerial>
    13e4:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <mySerial+0x17>
    13e8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <mySerial+0x16>
    13ec:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <mySerial+0x19>
    13f0:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <mySerial+0x18>
    13f4:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <mySerial+0x1b>
    13f8:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <mySerial+0x1a>
    13fc:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <mySerial+0x1d>
    1400:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <mySerial+0x1c>
    1404:	60 91 f9 00 	lds	r22, 0x00F9	; 0x8000f9 <mySerial+0x1e>
    1408:	6e 7f       	andi	r22, 0xFE	; 254
    140a:	6d 7f       	andi	r22, 0xFD	; 253
    140c:	60 93 f9 00 	sts	0x00F9, r22	; 0x8000f9 <mySerial+0x1e>
setTX():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:273
{
  // First write, then set output. If we do this the other way around,
  // the pin would be output low for a short while before switching to
  // output hihg. Now, it is input with pullup for a short while, which
  // is fine. With inverse logic, either order is fine.
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
    1410:	66 95       	lsr	r22
    1412:	61 70       	andi	r22, 0x01	; 1
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	68 27       	eor	r22, r24
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	7c d9       	rcall	.-3336   	; 0x714 <digitalWrite>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:274
  pinMode(tx, OUTPUT);
    141c:	61 e0       	ldi	r22, 0x01	; 1
    141e:	83 e0       	ldi	r24, 0x03	; 3
    1420:	e1 d9       	rcall	.-3134   	; 0x7e4 <pinMode>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:275
  _transmitBitMask = digitalPinToBitMask(tx);
    1422:	88 e0       	ldi	r24, 0x08	; 8
    1424:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <mySerial+0x10>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:277
  uint8_t port = digitalPinToPort(tx);
  _transmitPortRegister = portOutputRegister(port);
    1428:	88 e3       	ldi	r24, 0x38	; 56
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <mySerial+0x12>
    1430:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <mySerial+0x11>
setRX():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:282
}

void SoftwareSerial::setRX(uint8_t rx)
{
  pinMode(rx, INPUT);
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	84 e0       	ldi	r24, 0x04	; 4
    1438:	d5 d9       	rcall	.-3158   	; 0x7e4 <pinMode>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:283
  if (!_inverse_logic)
    143a:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <mySerial+0x1e>
    143e:	81 fd       	sbrc	r24, 1
    1440:	03 c0       	rjmp	.+6      	; 0x1448 <_GLOBAL__sub_I_SpeedIndex+0x90>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:284
    digitalWrite(rx, HIGH);  // pullup for normal logic!
    1442:	61 e0       	ldi	r22, 0x01	; 1
    1444:	84 e0       	ldi	r24, 0x04	; 4
    1446:	66 d9       	rcall	.-3380   	; 0x714 <digitalWrite>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:285
  _receivePin = rx;
    1448:	84 e0       	ldi	r24, 0x04	; 4
    144a:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <mySerial+0xc>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:286
  _receiveBitMask = digitalPinToBitMask(rx);
    144e:	80 e1       	ldi	r24, 0x10	; 16
    1450:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <mySerial+0xd>
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:288
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
    1454:	86 e3       	ldi	r24, 0x36	; 54
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	90 93 ea 00 	sts	0x00EA, r25	; 0x8000ea <mySerial+0xf>
    145c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <mySerial+0xe>
__base_ctor ():
C:\Users\Ian Stedman\Dropbox\Arduino\libraries\DFRobotDFPlayerMini/DFRobotDFPlayerMini.h:68
#define Stack_ACK 4
#define Stack_Parameter 5
#define Stack_CheckSum 7
#define Stack_End 9

class DFRobotDFPlayerMini {
    1460:	84 ef       	ldi	r24, 0xF4	; 244
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	a0 e0       	ldi	r26, 0x00	; 0
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <myMP3+0x6>
    146c:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <myMP3+0x7>
    1470:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <myMP3+0x8>
    1474:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <myMP3+0x9>
    1478:	8a e0       	ldi	r24, 0x0A	; 10
    147a:	e2 e6       	ldi	r30, 0x62	; 98
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	a5 e2       	ldi	r26, 0x25	; 37
    1480:	b1 e0       	ldi	r27, 0x01	; 1
    1482:	01 90       	ld	r0, Z+
    1484:	0d 92       	st	X+, r0
    1486:	8a 95       	dec	r24
    1488:	e1 f7       	brne	.-8      	; 0x1482 <_GLOBAL__sub_I_SpeedIndex+0xca>
    148a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <myMP3+0x1e>
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <myMP3+0x1f>
    1494:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <myMP3+0x24>
    1498:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <myMP3+0x25>
_GLOBAL__sub_I_SpeedIndex():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:785
      }
      break;
    default:
      break;
  }
}
    149c:	08 95       	ret

0000149e <_GLOBAL__sub_D_SpeedIndex>:
__base_dtor ():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:262
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    149e:	80 e7       	ldi	r24, 0x70	; 112
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <mySerial+0x1>
    14a6:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <mySerial>
stopListening():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:109
}

// Stop listening. Returns true if we were actually listening.
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
    14aa:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <SoftwareSerial::active_object>
    14ae:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <SoftwareSerial::active_object+0x1>
    14b2:	8b 5d       	subi	r24, 0xDB	; 219
    14b4:	90 40       	sbci	r25, 0x00	; 0
    14b6:	71 f4       	brne	.+28     	; 0x14d4 <_GLOBAL__sub_D_SpeedIndex+0x36>
setRxIntMsk():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:380
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    14b8:	e0 91 ee 00 	lds	r30, 0x00EE	; 0x8000ee <mySerial+0x13>
    14bc:	f0 91 ef 00 	lds	r31, 0x00EF	; 0x8000ef <mySerial+0x14>
    14c0:	90 81       	ld	r25, Z
    14c2:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <mySerial+0x15>
    14c6:	80 95       	com	r24
    14c8:	89 23       	and	r24, r25
    14ca:	80 83       	st	Z, r24
stopListening():
C:\Users\Ian Stedman\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\SoftwareSerial/SoftwareSerial.cpp:112
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
  {
    setRxIntMsk(false);
    active_object = NULL;
    14cc:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <SoftwareSerial::active_object+0x1>
    14d0:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <SoftwareSerial::active_object>
_GLOBAL__sub_D_SpeedIndex():
C:\Users\Ian Stedman\Dropbox\Arduino\RCSounds_V1.1/RCSounds_V1.1.ino:785
    14d4:	08 95       	ret

000014d6 <__cmpsf2>:
__cmpsf2():
    14d6:	40 d0       	rcall	.+128    	; 0x1558 <__fp_cmp>
    14d8:	08 f4       	brcc	.+2      	; 0x14dc <__cmpsf2+0x6>
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	08 95       	ret

000014de <__floatunsisf>:
__floatunsisf():
    14de:	e8 94       	clt
    14e0:	09 c0       	rjmp	.+18     	; 0x14f4 <__floatsisf+0x12>

000014e2 <__floatsisf>:
    14e2:	97 fb       	bst	r25, 7
    14e4:	3e f4       	brtc	.+14     	; 0x14f4 <__floatsisf+0x12>
    14e6:	90 95       	com	r25
    14e8:	80 95       	com	r24
    14ea:	70 95       	com	r23
    14ec:	61 95       	neg	r22
    14ee:	7f 4f       	sbci	r23, 0xFF	; 255
    14f0:	8f 4f       	sbci	r24, 0xFF	; 255
    14f2:	9f 4f       	sbci	r25, 0xFF	; 255
    14f4:	99 23       	and	r25, r25
    14f6:	a9 f0       	breq	.+42     	; 0x1522 <__floatsisf+0x40>
    14f8:	f9 2f       	mov	r31, r25
    14fa:	96 e9       	ldi	r25, 0x96	; 150
    14fc:	bb 27       	eor	r27, r27
    14fe:	93 95       	inc	r25
    1500:	f6 95       	lsr	r31
    1502:	87 95       	ror	r24
    1504:	77 95       	ror	r23
    1506:	67 95       	ror	r22
    1508:	b7 95       	ror	r27
    150a:	f1 11       	cpse	r31, r1
    150c:	f8 cf       	rjmp	.-16     	; 0x14fe <__floatsisf+0x1c>
    150e:	fa f4       	brpl	.+62     	; 0x154e <__floatsisf+0x6c>
    1510:	bb 0f       	add	r27, r27
    1512:	11 f4       	brne	.+4      	; 0x1518 <__floatsisf+0x36>
    1514:	60 ff       	sbrs	r22, 0
    1516:	1b c0       	rjmp	.+54     	; 0x154e <__floatsisf+0x6c>
    1518:	6f 5f       	subi	r22, 0xFF	; 255
    151a:	7f 4f       	sbci	r23, 0xFF	; 255
    151c:	8f 4f       	sbci	r24, 0xFF	; 255
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	16 c0       	rjmp	.+44     	; 0x154e <__floatsisf+0x6c>
    1522:	88 23       	and	r24, r24
    1524:	11 f0       	breq	.+4      	; 0x152a <__floatsisf+0x48>
    1526:	96 e9       	ldi	r25, 0x96	; 150
    1528:	11 c0       	rjmp	.+34     	; 0x154c <__floatsisf+0x6a>
    152a:	77 23       	and	r23, r23
    152c:	21 f0       	breq	.+8      	; 0x1536 <__floatsisf+0x54>
    152e:	9e e8       	ldi	r25, 0x8E	; 142
    1530:	87 2f       	mov	r24, r23
    1532:	76 2f       	mov	r23, r22
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <__floatsisf+0x5e>
    1536:	66 23       	and	r22, r22
    1538:	71 f0       	breq	.+28     	; 0x1556 <__floatsisf+0x74>
    153a:	96 e8       	ldi	r25, 0x86	; 134
    153c:	86 2f       	mov	r24, r22
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	2a f0       	brmi	.+10     	; 0x154e <__floatsisf+0x6c>
    1544:	9a 95       	dec	r25
    1546:	66 0f       	add	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	88 1f       	adc	r24, r24
    154c:	da f7       	brpl	.-10     	; 0x1544 <__floatsisf+0x62>
    154e:	88 0f       	add	r24, r24
    1550:	96 95       	lsr	r25
    1552:	87 95       	ror	r24
    1554:	97 f9       	bld	r25, 7
    1556:	08 95       	ret

00001558 <__fp_cmp>:
__fp_cmp():
    1558:	99 0f       	add	r25, r25
    155a:	00 08       	sbc	r0, r0
    155c:	55 0f       	add	r21, r21
    155e:	aa 0b       	sbc	r26, r26
    1560:	e0 e8       	ldi	r30, 0x80	; 128
    1562:	fe ef       	ldi	r31, 0xFE	; 254
    1564:	16 16       	cp	r1, r22
    1566:	17 06       	cpc	r1, r23
    1568:	e8 07       	cpc	r30, r24
    156a:	f9 07       	cpc	r31, r25
    156c:	c0 f0       	brcs	.+48     	; 0x159e <__fp_cmp+0x46>
    156e:	12 16       	cp	r1, r18
    1570:	13 06       	cpc	r1, r19
    1572:	e4 07       	cpc	r30, r20
    1574:	f5 07       	cpc	r31, r21
    1576:	98 f0       	brcs	.+38     	; 0x159e <__fp_cmp+0x46>
    1578:	62 1b       	sub	r22, r18
    157a:	73 0b       	sbc	r23, r19
    157c:	84 0b       	sbc	r24, r20
    157e:	95 0b       	sbc	r25, r21
    1580:	39 f4       	brne	.+14     	; 0x1590 <__fp_cmp+0x38>
    1582:	0a 26       	eor	r0, r26
    1584:	61 f0       	breq	.+24     	; 0x159e <__fp_cmp+0x46>
    1586:	23 2b       	or	r18, r19
    1588:	24 2b       	or	r18, r20
    158a:	25 2b       	or	r18, r21
    158c:	21 f4       	brne	.+8      	; 0x1596 <__fp_cmp+0x3e>
    158e:	08 95       	ret
    1590:	0a 26       	eor	r0, r26
    1592:	09 f4       	brne	.+2      	; 0x1596 <__fp_cmp+0x3e>
    1594:	a1 40       	sbci	r26, 0x01	; 1
    1596:	a6 95       	lsr	r26
    1598:	8f ef       	ldi	r24, 0xFF	; 255
    159a:	81 1d       	adc	r24, r1
    159c:	81 1d       	adc	r24, r1
    159e:	08 95       	ret

000015a0 <__mulsf3>:
__mulsf3():
    15a0:	0a d0       	rcall	.+20     	; 0x15b6 <__mulsf3x>
    15a2:	80 c0       	rjmp	.+256    	; 0x16a4 <__fp_round>
    15a4:	71 d0       	rcall	.+226    	; 0x1688 <__fp_pscA>
    15a6:	28 f0       	brcs	.+10     	; 0x15b2 <__mulsf3+0x12>
    15a8:	76 d0       	rcall	.+236    	; 0x1696 <__fp_pscB>
    15aa:	18 f0       	brcs	.+6      	; 0x15b2 <__mulsf3+0x12>
    15ac:	95 23       	and	r25, r21
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <__mulsf3+0x12>
    15b0:	62 c0       	rjmp	.+196    	; 0x1676 <__fp_inf>
    15b2:	67 c0       	rjmp	.+206    	; 0x1682 <__fp_nan>
    15b4:	ab c0       	rjmp	.+342    	; 0x170c <__fp_szero>

000015b6 <__mulsf3x>:
__mulsf3x():
    15b6:	87 d0       	rcall	.+270    	; 0x16c6 <__fp_split3>
    15b8:	a8 f3       	brcs	.-22     	; 0x15a4 <__mulsf3+0x4>

000015ba <__mulsf3_pse>:
    15ba:	99 23       	and	r25, r25
    15bc:	d9 f3       	breq	.-10     	; 0x15b4 <__mulsf3+0x14>
    15be:	55 23       	and	r21, r21
    15c0:	c9 f3       	breq	.-14     	; 0x15b4 <__mulsf3+0x14>
    15c2:	95 0f       	add	r25, r21
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	55 1f       	adc	r21, r21
    15c8:	aa 27       	eor	r26, r26
    15ca:	ee 27       	eor	r30, r30
    15cc:	ff 27       	eor	r31, r31
    15ce:	bb 27       	eor	r27, r27
    15d0:	00 24       	eor	r0, r0
    15d2:	08 94       	sec
    15d4:	67 95       	ror	r22
    15d6:	20 f4       	brcc	.+8      	; 0x15e0 <__mulsf3_pse+0x26>
    15d8:	e2 0f       	add	r30, r18
    15da:	f3 1f       	adc	r31, r19
    15dc:	b4 1f       	adc	r27, r20
    15de:	0a 1e       	adc	r0, r26
    15e0:	22 0f       	add	r18, r18
    15e2:	33 1f       	adc	r19, r19
    15e4:	44 1f       	adc	r20, r20
    15e6:	aa 1f       	adc	r26, r26
    15e8:	66 95       	lsr	r22
    15ea:	a9 f7       	brne	.-22     	; 0x15d6 <__mulsf3_pse+0x1c>
    15ec:	77 95       	ror	r23
    15ee:	30 f4       	brcc	.+12     	; 0x15fc <__mulsf3_pse+0x42>
    15f0:	f3 0f       	add	r31, r19
    15f2:	b4 1f       	adc	r27, r20
    15f4:	0a 1e       	adc	r0, r26
    15f6:	12 1e       	adc	r1, r18
    15f8:	08 f4       	brcc	.+2      	; 0x15fc <__mulsf3_pse+0x42>
    15fa:	63 95       	inc	r22
    15fc:	33 0f       	add	r19, r19
    15fe:	44 1f       	adc	r20, r20
    1600:	aa 1f       	adc	r26, r26
    1602:	22 1f       	adc	r18, r18
    1604:	76 95       	lsr	r23
    1606:	99 f7       	brne	.-26     	; 0x15ee <__mulsf3_pse+0x34>
    1608:	87 95       	ror	r24
    160a:	20 f4       	brcc	.+8      	; 0x1614 <__mulsf3_pse+0x5a>
    160c:	b4 0f       	add	r27, r20
    160e:	0a 1e       	adc	r0, r26
    1610:	12 1e       	adc	r1, r18
    1612:	63 1f       	adc	r22, r19
    1614:	44 0f       	add	r20, r20
    1616:	aa 1f       	adc	r26, r26
    1618:	22 1f       	adc	r18, r18
    161a:	33 1f       	adc	r19, r19
    161c:	86 95       	lsr	r24
    161e:	a9 f7       	brne	.-22     	; 0x160a <__mulsf3_pse+0x50>
    1620:	86 2f       	mov	r24, r22
    1622:	71 2d       	mov	r23, r1
    1624:	60 2d       	mov	r22, r0
    1626:	11 24       	eor	r1, r1
    1628:	9f 57       	subi	r25, 0x7F	; 127
    162a:	50 40       	sbci	r21, 0x00	; 0
    162c:	8a f0       	brmi	.+34     	; 0x1650 <__mulsf3_pse+0x96>
    162e:	e1 f0       	breq	.+56     	; 0x1668 <__mulsf3_pse+0xae>
    1630:	88 23       	and	r24, r24
    1632:	4a f0       	brmi	.+18     	; 0x1646 <__mulsf3_pse+0x8c>
    1634:	ee 0f       	add	r30, r30
    1636:	ff 1f       	adc	r31, r31
    1638:	bb 1f       	adc	r27, r27
    163a:	66 1f       	adc	r22, r22
    163c:	77 1f       	adc	r23, r23
    163e:	88 1f       	adc	r24, r24
    1640:	91 50       	subi	r25, 0x01	; 1
    1642:	50 40       	sbci	r21, 0x00	; 0
    1644:	a9 f7       	brne	.-22     	; 0x1630 <__mulsf3_pse+0x76>
    1646:	9e 3f       	cpi	r25, 0xFE	; 254
    1648:	51 05       	cpc	r21, r1
    164a:	70 f0       	brcs	.+28     	; 0x1668 <__mulsf3_pse+0xae>
    164c:	14 c0       	rjmp	.+40     	; 0x1676 <__fp_inf>
    164e:	5e c0       	rjmp	.+188    	; 0x170c <__fp_szero>
    1650:	5f 3f       	cpi	r21, 0xFF	; 255
    1652:	ec f3       	brlt	.-6      	; 0x164e <__mulsf3_pse+0x94>
    1654:	98 3e       	cpi	r25, 0xE8	; 232
    1656:	dc f3       	brlt	.-10     	; 0x164e <__mulsf3_pse+0x94>
    1658:	86 95       	lsr	r24
    165a:	77 95       	ror	r23
    165c:	67 95       	ror	r22
    165e:	b7 95       	ror	r27
    1660:	f7 95       	ror	r31
    1662:	e7 95       	ror	r30
    1664:	9f 5f       	subi	r25, 0xFF	; 255
    1666:	c1 f7       	brne	.-16     	; 0x1658 <__mulsf3_pse+0x9e>
    1668:	fe 2b       	or	r31, r30
    166a:	88 0f       	add	r24, r24
    166c:	91 1d       	adc	r25, r1
    166e:	96 95       	lsr	r25
    1670:	87 95       	ror	r24
    1672:	97 f9       	bld	r25, 7
    1674:	08 95       	ret

00001676 <__fp_inf>:
    1676:	97 f9       	bld	r25, 7
    1678:	9f 67       	ori	r25, 0x7F	; 127
    167a:	80 e8       	ldi	r24, 0x80	; 128
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	60 e0       	ldi	r22, 0x00	; 0
    1680:	08 95       	ret

00001682 <__fp_nan>:
    1682:	9f ef       	ldi	r25, 0xFF	; 255
    1684:	80 ec       	ldi	r24, 0xC0	; 192
    1686:	08 95       	ret

00001688 <__fp_pscA>:
__fp_pscA():
    1688:	00 24       	eor	r0, r0
    168a:	0a 94       	dec	r0
    168c:	16 16       	cp	r1, r22
    168e:	17 06       	cpc	r1, r23
    1690:	18 06       	cpc	r1, r24
    1692:	09 06       	cpc	r0, r25
    1694:	08 95       	ret

00001696 <__fp_pscB>:
__fp_pscB():
    1696:	00 24       	eor	r0, r0
    1698:	0a 94       	dec	r0
    169a:	12 16       	cp	r1, r18
    169c:	13 06       	cpc	r1, r19
    169e:	14 06       	cpc	r1, r20
    16a0:	05 06       	cpc	r0, r21
    16a2:	08 95       	ret

000016a4 <__fp_round>:
__fp_round():
    16a4:	09 2e       	mov	r0, r25
    16a6:	03 94       	inc	r0
    16a8:	00 0c       	add	r0, r0
    16aa:	11 f4       	brne	.+4      	; 0x16b0 <__fp_round+0xc>
    16ac:	88 23       	and	r24, r24
    16ae:	52 f0       	brmi	.+20     	; 0x16c4 <__fp_round+0x20>
    16b0:	bb 0f       	add	r27, r27
    16b2:	40 f4       	brcc	.+16     	; 0x16c4 <__fp_round+0x20>
    16b4:	bf 2b       	or	r27, r31
    16b6:	11 f4       	brne	.+4      	; 0x16bc <__fp_round+0x18>
    16b8:	60 ff       	sbrs	r22, 0
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <__fp_round+0x20>
    16bc:	6f 5f       	subi	r22, 0xFF	; 255
    16be:	7f 4f       	sbci	r23, 0xFF	; 255
    16c0:	8f 4f       	sbci	r24, 0xFF	; 255
    16c2:	9f 4f       	sbci	r25, 0xFF	; 255
    16c4:	08 95       	ret

000016c6 <__fp_split3>:
__fp_split3():
    16c6:	57 fd       	sbrc	r21, 7
    16c8:	90 58       	subi	r25, 0x80	; 128
    16ca:	44 0f       	add	r20, r20
    16cc:	55 1f       	adc	r21, r21
    16ce:	59 f0       	breq	.+22     	; 0x16e6 <__fp_splitA+0x10>
    16d0:	5f 3f       	cpi	r21, 0xFF	; 255
    16d2:	71 f0       	breq	.+28     	; 0x16f0 <__fp_splitA+0x1a>
    16d4:	47 95       	ror	r20

000016d6 <__fp_splitA>:
    16d6:	88 0f       	add	r24, r24
    16d8:	97 fb       	bst	r25, 7
    16da:	99 1f       	adc	r25, r25
    16dc:	61 f0       	breq	.+24     	; 0x16f6 <__fp_splitA+0x20>
    16de:	9f 3f       	cpi	r25, 0xFF	; 255
    16e0:	79 f0       	breq	.+30     	; 0x1700 <__fp_splitA+0x2a>
    16e2:	87 95       	ror	r24
    16e4:	08 95       	ret
    16e6:	12 16       	cp	r1, r18
    16e8:	13 06       	cpc	r1, r19
    16ea:	14 06       	cpc	r1, r20
    16ec:	55 1f       	adc	r21, r21
    16ee:	f2 cf       	rjmp	.-28     	; 0x16d4 <__fp_split3+0xe>
    16f0:	46 95       	lsr	r20
    16f2:	f1 df       	rcall	.-30     	; 0x16d6 <__fp_splitA>
    16f4:	08 c0       	rjmp	.+16     	; 0x1706 <__fp_splitA+0x30>
    16f6:	16 16       	cp	r1, r22
    16f8:	17 06       	cpc	r1, r23
    16fa:	18 06       	cpc	r1, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	f1 cf       	rjmp	.-30     	; 0x16e2 <__fp_splitA+0xc>
    1700:	86 95       	lsr	r24
    1702:	71 05       	cpc	r23, r1
    1704:	61 05       	cpc	r22, r1
    1706:	08 94       	sec
    1708:	08 95       	ret

0000170a <__fp_zero>:
__fp_zero():
    170a:	e8 94       	clt

0000170c <__fp_szero>:
    170c:	bb 27       	eor	r27, r27
    170e:	66 27       	eor	r22, r22
    1710:	77 27       	eor	r23, r23
    1712:	cb 01       	movw	r24, r22
    1714:	97 f9       	bld	r25, 7
    1716:	08 95       	ret

00001718 <eeprom_read_byte>:
eeprom_read_byte():
    1718:	e1 99       	sbic	0x1c, 1	; 28
    171a:	fe cf       	rjmp	.-4      	; 0x1718 <eeprom_read_byte>
    171c:	9f bb       	out	0x1f, r25	; 31
    171e:	8e bb       	out	0x1e, r24	; 30
    1720:	e0 9a       	sbi	0x1c, 0	; 28
    1722:	99 27       	eor	r25, r25
    1724:	8d b3       	in	r24, 0x1d	; 29
    1726:	08 95       	ret

00001728 <eeprom_write_byte>:
eeprom_write_byte():
    1728:	26 2f       	mov	r18, r22

0000172a <eeprom_write_r18>:
    172a:	e1 99       	sbic	0x1c, 1	; 28
    172c:	fe cf       	rjmp	.-4      	; 0x172a <eeprom_write_r18>
    172e:	1c ba       	out	0x1c, r1	; 28
    1730:	9f bb       	out	0x1f, r25	; 31
    1732:	8e bb       	out	0x1e, r24	; 30
    1734:	2d bb       	out	0x1d, r18	; 29
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	e2 9a       	sbi	0x1c, 2	; 28
    173c:	e1 9a       	sbi	0x1c, 1	; 28
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	08 95       	ret

00001744 <__gesf2>:
__gesf2():
    1744:	09 df       	rcall	.-494    	; 0x1558 <__fp_cmp>
    1746:	08 f4       	brcc	.+2      	; 0x174a <__gesf2+0x6>
    1748:	8f ef       	ldi	r24, 0xFF	; 255
    174a:	08 95       	ret

0000174c <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    174c:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    174e:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    1750:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    1752:	07 c0       	rjmp	.+14     	; 0x1762 <__udivmodhi4_ep>

00001754 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    1754:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    1756:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    1758:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    175a:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    175c:	10 f0       	brcs	.+4      	; 0x1762 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    175e:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    1760:	b7 0b       	sbc	r27, r23

00001762 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    1762:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    1764:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    1766:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    1768:	a9 f7       	brne	.-22     	; 0x1754 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    176a:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    176c:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    176e:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    1770:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    1772:	08 95       	ret

00001774 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    1774:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    1776:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    1778:	16 f4       	brtc	.+4      	; 0x177e <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    177a:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    177c:	06 d0       	rcall	.+12     	; 0x178a <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    177e:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    1780:	08 d0       	rcall	.+16     	; 0x1792 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    1782:	e4 df       	rcall	.-56     	; 0x174c <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    1784:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    1786:	05 d0       	rcall	.+10     	; 0x1792 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    1788:	3e f4       	brtc	.+14     	; 0x1798 <__divmodhi4_exit>

0000178a <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    178a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    178c:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    178e:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    1790:	08 95       	ret

00001792 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    1792:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    1794:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    1796:	7f 4f       	sbci	r23, 0xFF	; 255

00001798 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    1798:	08 95       	ret

0000179a <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    179a:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    179c:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    179e:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    17a0:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    17a2:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    17a4:	09 94       	ijmp

000017a6 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    17a6:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    17a8:	c2 e2       	ldi	r28, 0x22	; 34
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    17aa:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    17ac:	03 c0       	rjmp	.+6      	; 0x17b4 <__do_global_dtors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    17ae:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    17b0:	f4 df       	rcall	.-24     	; 0x179a <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    17b2:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    17b4:	c3 32       	cpi	r28, 0x23	; 35
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    17b6:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    17b8:	d1 f7       	brne	.-12     	; 0x17ae <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    17ba:	f8 94       	cli

000017bc <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    17bc:	ff cf       	rjmp	.-2      	; 0x17bc <__stop_program>
